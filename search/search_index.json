{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GenAI ABAP Documentation Showcase","text":"<p>This documentation shows a simple example of GenAI generated ABAP documentation focused on classes, interfaces, reports and function modules. PoC this is a simple first showcase to give you an idea of what to do with the LLM Client.</p> <p>Everyone has different documentation requirements. This showcase shows a relatively simple approach focusing on the most important aspects of those code objects. A more detailed documentation is possible but you should always ask yourself: Who reads this? Do we really need it? Should we spend additional money at that?</p> <p>All top-level folders contain a documentation of the same llm client implementation using different models:</p> <ul> <li>Llama 3.2 3b - surprisingly good for a 3b model, low resource test model</li> <li>Claude 3.5 Haiku</li> <li>Claude 3.5 Sonnet - my personal favorite for ABAP coding</li> <li>Deepseek R1</li> <li>Mistral Small 3 - a 24b model</li> </ul>"},{"location":"Claude%203.5%20Haiku/","title":"Package ZLLM_CLIENT","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Haiku/#overview","title":"Overview","text":"<p>The ABAP LLM (Large Language Model) Client Development Package is a comprehensive, modular framework designed to provide robust, secure, and flexible integration of AI language models into SAP systems. This package offers a standardized approach to interacting with various AI providers like OpenAI, Anthropic, Azure OpenAI, Ollama, and OpenRouter through a centralized, extensible architecture.</p>"},{"location":"Claude%203.5%20Haiku/#key-features","title":"Key Features","text":"<ul> <li>Centralized client management with factory and base client implementations</li> <li>Secure authorization and encryption mechanisms</li> <li>Flexible configuration and options management</li> <li>Comprehensive logging and statistical tracking</li> <li>Dynamic JSON schema generation and parsing</li> <li>Support for tool-based interactions and template rendering</li> <li>Modular design allowing easy extension to new AI providers</li> </ul>"},{"location":"Claude%203.5%20Haiku/#technical-architecture","title":"Technical Architecture","text":"<p>The package implements a layered architecture with:</p> <ul> <li>Core utility classes for common operations</li> <li>Standardized interfaces for key functionalities</li> <li>Provider-specific client implementations</li> <li>Custom exception handling</li> <li>Configurable runtime components</li> </ul>"},{"location":"Claude%203.5%20Haiku/#security-and-flexibility","title":"Security and Flexibility","text":"<p>Emphasizes enterprise-grade security through:</p> <ul> <li>Authorization checks</li> <li>Encryption utilities</li> <li>Configurable logging</li> <li>Validation mechanisms</li> <li>Centralized configuration management</li> </ul>"},{"location":"Claude%203.5%20Haiku/#use-cases","title":"Use Cases","text":"<p>Enables advanced AI-driven capabilities in SAP systems such as:</p> <ul> <li>Intelligent text generation</li> <li>Dynamic tool interactions</li> <li>Structured data processing</li> <li>Configurable AI model integrations</li> <li>Extensible AI service communication</li> </ul>"},{"location":"Claude%203.5%20Haiku/#implementation-approach","title":"Implementation Approach","text":"<p>Leverages ABAP's object-oriented capabilities to create a modular, type-safe, and easily maintainable framework for AI model interactions across different providers and use cases.</p>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_AUTH_DISABLED_CLAS/","title":"Class ZCL_LLM_AUTH_DISABLED","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_AUTH_DISABLED_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_auth_disabled</code> class is an implementation of the <code>zif_llm_auth</code> interface that provides a permissive authorization mechanism. This class is designed to disable or bypass authorization checks for various cryptographic and client-related operations. It serves as a default or test implementation where no strict authorization restrictions are enforced.</p> <p>The class implements four key authorization methods:</p> <ol> <li><code>check_decrypt()</code>: Authorization check for decryption operations</li> <li><code>check_encrypt()</code>: Authorization check for encryption operations</li> <li><code>check_get_client()</code>: Authorization check for client retrieval</li> <li><code>check_provider_maintenance()</code>: Authorization check for provider maintenance tasks</li> </ol> <p>Each method is intentionally left empty, effectively allowing all operations without raising authorization exceptions.</p>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_AUTH_DISABLED_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li>Interface: <code>zif_llm_auth</code></li> <li>Potential Exception: <code>ZCX_LLM_AUTHORIZATION</code> (not raised in this implementation)</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_AUTH_DISABLED_CLAS/#details","title":"Details","text":"<p>The class represents a \"disabled\" authorization strategy, which is particularly useful in:</p> <ul> <li>Testing scenarios</li> <li>Development environments</li> <li>Situations requiring unrestricted access to cryptographic methods</li> </ul> <pre><code>graph TD\n    A[zcl_llm_auth_disabled] --&gt;|Implements| B[zif_llm_auth Interface]\n    A --&gt; C[check_decrypt()]\n    A --&gt; D[check_encrypt()]\n    A --&gt; E[check_get_client()]\n    A --&gt; F[check_provider_maintenance()]\n\n    C --&gt; G[No Authorization Restrictions]\n    D --&gt; G\n    E --&gt; G\n    F --&gt; G</code></pre> <p>Key characteristics:</p> <ul> <li>Provides a \"pass-through\" authorization mechanism</li> <li>Marked as <code>FINAL</code> and <code>PUBLIC</code>, preventing further inheritance</li> <li>Uses <code>#EC EMPTY_PROCEDURE</code> to suppress potential code inspector warnings about empty methods</li> <li>Intended to be registered in a BADI (Business Add-In) named <code>ZLLM_DEFAULTS</code></li> </ul> <p>The implementation suggests a flexible design where custom authorization logic can be easily plugged in by replacing this default implementation.</p>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_CALL_LOGGER_CLAS/","title":"Class ZCL_LLM_CALL_LOGGER","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_CALL_LOGGER_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_call_logger</code> is a specialized ABAP class designed to log LLM (Large Language Model) call entries with configurable logging behavior. It implements the <code>zif_llm_call_logger</code> interface and provides a mechanism to conditionally log entries based on system settings and user filters.</p> <p>Key functionalities:</p> <ul> <li>Conditional logging of LLM call entries</li> <li>System-wide logging activation control</li> <li>User-specific logging filter</li> <li>Automatic configuration during object instantiation</li> </ul> <p>Public Methods:</p> <ul> <li><code>zif_llm_call_logger~add()</code>: Logs an entry to the <code>zllm_call_log</code> table if logging is active</li> <li><code>constructor()</code>: Initializes logging configuration by checking system settings</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_CALL_LOGGER_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li>Database Table: <code>zllm_system</code> (for system configuration)</li> <li>Database Table: <code>zllm_call_log</code> (for storing log entries)</li> <li>Interface: <code>zif_llm_call_logger</code></li> </ul>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_CALL_LOGGER_CLAS/#details","title":"Details","text":"<p>The logging mechanism follows a two-stage filtering process:</p> <pre><code>flowchart TD\n    A[Constructor] --&gt; B{System Logging Enabled?}\n    B --&gt;|Yes| C{User Filter Matches?}\n    B --&gt;|No| D[Logging Inactive]\n    C --&gt;|Yes| E[Logging Active]\n    C --&gt;|No| D</code></pre> <p>Logging Configuration Logic:</p> <ol> <li>During object creation, the constructor queries the <code>zllm_system</code> table</li> <li>Checks if system-wide logging is enabled (<code>save_calls = abap_true</code>)</li> <li>Validates user filter:</li> <li>Matches current user (<code>sy-uname</code>)</li> <li>Or allows all users (<code>call_filter_uname = '*'</code>)</li> <li>Sets the <code>active</code> flag accordingly</li> </ol> <p>When <code>zif_llm_call_logger~add()</code> is called:</p> <ul> <li>Checks the <code>active</code> flag</li> <li>If active, inserts the entry into <code>zllm_call_log</code></li> <li>If inactive, silently returns without logging</li> </ul> <p>This design allows flexible, configurable logging with minimal performance overhead.</p>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_CHAT_REQUEST_CLAS/","title":"Class ZCL_LLM_CHAT_REQUEST","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_CHAT_REQUEST_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_chat_request</code> class is an implementation of the <code>zif_llm_chat_request</code> interface, designed to manage and manipulate chat requests for Large Language Model (LLM) interactions. It provides a comprehensive set of methods to:</p> <ul> <li>Add and manage chat messages</li> <li>Handle tools and tool results</li> <li>Configure structured output</li> <li>Manage tool choices</li> <li>Retrieve internal request details</li> </ul> <p>Key public methods include:</p> <ul> <li><code>add_message</code>: Add a single message to the request</li> <li><code>add_messages</code>: Add multiple messages at once</li> <li><code>add_tool</code>: Add a tool to the request</li> <li><code>add_tool_result</code>: Add a tool result message</li> <li><code>clear_messages</code>: Remove all messages</li> <li><code>clear_tools</code>: Remove all tools</li> <li><code>set_tool_choice</code>: Configure tool selection strategy</li> <li><code>set_structured_output</code>: Define structured output schema</li> <li><code>get_internal_request</code>: Retrieve the full internal request object</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_CHAT_REQUEST_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li><code>zif_llm_client</code>: Interface for role constants</li> <li><code>zcl_llm_common</code>: Utility class for JSON conversion</li> <li><code>zllm_request</code>: Custom data type for storing chat request details</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_CHAT_REQUEST_CLAS/#details","title":"Details","text":"<p>The class uses a central <code>request</code> attribute of type <code>zllm_request</code> to store and manage all request-related information. It acts as a builder/configuration class for preparing LLM chat requests with flexible options.</p> <pre><code>classDiagram\n    class zcl_llm_chat_request {\n        - request : zllm_request\n        + add_message(message)\n        + add_tools(tools)\n        + set_tool_choice(choice)\n        + get_internal_request() : zllm_request\n    }\n    class zif_llm_chat_request {\n        &lt;&lt;interface&gt;&gt;\n    }\n    zcl_llm_chat_request ..|&gt; zif_llm_chat_request : implements</code></pre> <p>Key design characteristics:</p> <ul> <li>Implements a fluent interface for building chat requests</li> <li>Supports dynamic addition of messages, tools, and tool results</li> <li>Provides methods for configuring advanced LLM request features</li> <li>Maintains a flexible internal request structure</li> <li>Allows retrieval of the complete configured request object</li> </ul> <p>The class is designed to be used as a configuration builder before sending a request to an LLM client, providing a type-safe and structured approach to preparing chat interactions.</p>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_CLIENT_BASE_CLAS/","title":"Class ZCL_LLM_CLIENT_BASE","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_CLIENT_BASE_CLAS/#overview","title":"Overview","text":"<p><code>zcl_llm_client_base</code> is an abstract base class for implementing Large Language Model (LLM) clients across different providers. It provides a standardized framework for:</p> <ul> <li>Creating chat requests</li> <li>Handling HTTP communication</li> <li>Processing LLM responses</li> <li>Managing tool calls and structured outputs</li> </ul> <p>Key public methods:</p> <ul> <li><code>chat()</code>: Sends a chat request to the LLM provider</li> <li><code>new_request()</code>: Creates a new chat request with default configurations</li> <li><code>get_client()</code>: Retrieves a provider-specific client implementation</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_CLIENT_BASE_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li><code>zif_llm_client</code>: Main client interface</li> <li><code>zif_llm_http_client_wrapper</code>: HTTP communication wrapper</li> <li><code>zif_llm_tool_parser</code>: Tool parameter parsing</li> <li><code>zif_llm_statistics</code>: Statistics tracking</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_CLIENT_BASE_CLAS/#details","title":"Details","text":"<p>The class implements a flexible and extensible architecture for LLM interactions with several key design aspects:</p> <pre><code>classDiagram\n    class zcl_llm_client_base {\n        +zif_llm_client~chat()\n        +zif_llm_client~new_request()\n        #build_request_json()\n        #handle_http_response()\n        #handle_tool_calls()\n    }\n    note for zcl_llm_client_base \"Abstract base class\\nProvides core LLM client functionality\"</code></pre> <p>Key architectural patterns:</p> <ul> <li>Abstract methods for provider-specific implementations</li> <li>Standardized response and request handling</li> <li>Flexible tool call and structured output processing</li> <li>Configurable via client and provider configurations</li> </ul> <p>Request processing flow:</p> <ol> <li>Create request via <code>new_request()</code></li> <li>Configure request parameters</li> <li>Call <code>chat()</code> method</li> <li>Internal methods handle:</li> <li>JSON request building</li> <li>HTTP communication</li> <li>Response parsing</li> <li>Tool call processing</li> </ol> <p>The class supports:</p> <ul> <li>Multiple LLM providers</li> <li>Structured output generation</li> <li>Tool call execution</li> <li>Detailed usage statistics tracking</li> </ul> <p>Extensibility is achieved through abstract methods like <code>get_chat_endpoint()</code>, <code>set_auth()</code>, allowing provider-specific implementations while maintaining a consistent interface.</p>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_COMMON_CLAS/","title":"Class ZCL_LLM_COMMON","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_COMMON_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_common</code> is a utility class designed to provide JSON serialization and deserialization functionality with dynamic JSON implementation resolution. It offers two primary public methods:</p> <ul> <li><code>to_json()</code>: Converts ABAP data structures to JSON strings</li> <li><code>from_json()</code>: Converts JSON strings back to ABAP data structures</li> </ul> <p>The class uses a dynamically resolved JSON implementation class and supports optional JSON compression.</p>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_COMMON_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li><code>/ui2/cl_json</code>: JSON serialization/deserialization utility</li> <li><code>zllm_implementation</code> Business Add-In (BADI) for JSON implementation configuration</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_COMMON_CLAS/#details","title":"Details","text":"<p>The class implements a flexible JSON conversion mechanism through several key design elements:</p>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_COMMON_CLAS/#dynamic-json-implementation-resolution","title":"Dynamic JSON Implementation Resolution","text":"<pre><code>sequenceDiagram\n    participant Class Constructor\n    participant BADI\n    participant JSON Implementation Class\n\n    Class Constructor-&gt;&gt;BADI: Get JSON Implementation\n    BADI--&gt;&gt;Class Constructor: Return JSON Class Name\n    Class Constructor-&gt;&gt;JSON Implementation Class: Store Class Name</code></pre> <p>The <code>class_constructor</code> method dynamically retrieves the JSON implementation class through a BADI, allowing runtime configuration of the JSON serialization strategy.</p>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_COMMON_CLAS/#json-conversion-methods","title":"JSON Conversion Methods","text":"<p>The <code>to_json()</code> and <code>from_json()</code> methods use dynamic method calls to the resolved JSON implementation class, with the following characteristics:</p> <ul> <li>Supports low-case property naming</li> <li>Optional JSON compression in <code>to_json()</code></li> <li>Handles various data structure types</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_COMMON_CLAS/#configuration-persistence","title":"Configuration Persistence","text":"<p>The class maintains two private class-level attributes:</p> <ul> <li><code>json_class</code>: Stores the dynamically resolved JSON implementation class name</li> <li><code>llm_badi</code>: Holds a reference to the LLM implementation BADI</li> </ul> <p>The <code>get_llm_badi()</code> method provides access to the BADI instance, enabling further configuration or interaction if needed.</p>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_DEFAULT_IMPL_CLAS/","title":"Class ZCL_LLM_DEFAULT_IMPL","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_DEFAULT_IMPL_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_default_impl</code> class is a default implementation provider for various system components related to Large Language Model (LLM) interactions. It implements the <code>zif_llm_default_impl</code> interface and provides singleton-like access to key implementation classes for encryption, logging, statistics, and authorization.</p> <p>Public methods include:</p> <ul> <li><code>get_encryption_impl()</code>: Returns an encryption implementation</li> <li><code>get_json_impl()</code>: Returns a JSON handling class</li> <li><code>get_call_logger_impl()</code>: Returns a call logging implementation</li> <li><code>get_statistics_impl()</code>: Returns a statistics tracking implementation</li> <li><code>get_authorization_impl()</code>: Returns an authorization implementation</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_DEFAULT_IMPL_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li><code>zif_llm_encryption</code></li> <li><code>zif_llm_statistics</code></li> <li><code>zif_llm_call_logger</code></li> <li><code>zif_llm_auth</code></li> </ul>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_DEFAULT_IMPL_CLAS/#details","title":"Details","text":"<p>The class uses a lazy initialization pattern for its implementation classes, creating instances only when first requested.</p> <pre><code>classDiagram\n    class zcl_llm_default_impl {\n        -enc_class\n        -stat_class\n        -log_class\n        -auth_class\n        +get_encryption_impl()\n        +get_json_impl()\n        +get_call_logger_impl()\n        +get_statistics_impl()\n        +get_authorization_impl()\n    }\n    note \"Lazy Initialization\\nSingleton-like Access\" as Note</code></pre> <p>Key implementation details:</p> <ul> <li>Uses class-level static references to cache implementation instances</li> <li>Provides a centralized point for retrieving default implementations</li> <li>Default authorization implementation uses a disabled authorization class</li> <li>JSON implementation directly returns the standard SAP JSON class path</li> </ul> <p>The design allows for easy extension and replacement of core LLM interaction components through a centralized interface.</p>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_ENCRYPTION_CLAS/","title":"Class ZCL_LLM_ENCRYPTION","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_ENCRYPTION_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_encryption</code> class provides a robust encryption and decryption mechanism using SAP's Security Services Framework (SSF). It implements the <code>zif_llm_encryption</code> interface, offering two primary methods:</p> <ul> <li><code>encrypt</code>: Converts plain text into an encrypted xstring</li> <li><code>decrypt</code>: Converts an encrypted xstring back to its original plain text</li> </ul> <p>The class supports encryption of various text lengths, handling standard and long strings through chunked processing. It ensures secure data transformation with built-in authorization checks.</p>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_ENCRYPTION_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li><code>zif_llm_auth</code>: Authorization interface for encryption/decryption permission checks</li> <li><code>zcx_llm_validation</code>: Custom exception class for handling encryption errors</li> <li> <p>SAP Security Services Framework (SSF) function modules:</p> </li> <li> <p><code>SSF_KRN_ENVELOPE</code></p> </li> <li><code>SSF_KRN_DEVELOPE</code></li> <li><code>SSFC_GET_CERTIFICATE</code></li> <li><code>SSFC_PARSE_CERTIFICATE</code></li> </ul>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_ENCRYPTION_CLAS/#details","title":"Details","text":"<p>The encryption process involves several sophisticated steps:</p> <pre><code>graph TD\n    A[Input Text] --&gt; B[Convert to UTF-8 XString]\n    B --&gt; C[Chunk Data into 255-byte Segments]\n    C --&gt; D[SSF Envelope Encryption]\n    D --&gt; E[Concatenate Encrypted Chunks]\n    E --&gt; F[Encrypted XString]</code></pre> <p>Key implementation characteristics:</p> <ul> <li>Uses a fixed chunk size of 255 bytes for handling variable-length inputs</li> <li>Retrieves encryption subject and address book from certificate during class initialization</li> <li>Performs authorization checks before encryption/decryption</li> <li>Handles potential errors with detailed exception handling</li> <li>Supports UTF-8 text conversion</li> </ul> <p>The class leverages SAP's built-in cryptographic services to provide a secure, flexible encryption mechanism that can handle diverse text inputs while maintaining data integrity and confidentiality.</p>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_FACTORY_CLAS/","title":"Class ZCL_LLM_FACTORY","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_FACTORY_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_factory</code> is a factory class for creating Large Language Model (LLM) clients. It provides a centralized mechanism to:</p> <ul> <li>Validate client and provider configurations</li> <li>Dynamically instantiate LLM clients based on configuration</li> <li>Enforce authorization checks before client creation</li> </ul> <p>The class implements the <code>zif_llm_factory</code> interface, with the primary public method <code>get_client()</code> which creates and returns an LLM client for a specified model.</p>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_FACTORY_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li><code>zif_llm_auth</code>: Authorization interface for checking client creation permissions</li> <li><code>zllm_clnt_config</code>: Database table storing client configurations</li> <li><code>zllm_providers</code>: Database table storing provider configurations</li> <li><code>zcx_llm_validation</code>: Custom exception class for validation errors</li> <li>BADI mechanism for flexible authorization implementation</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_FACTORY_CLAS/#details","title":"Details","text":""},{"location":"Claude%203.5%20Haiku/ZCL_LLM_FACTORY_CLAS/#client-creation-process","title":"Client Creation Process","text":"<p>The <code>get_client()</code> method follows a structured validation and instantiation process:</p> <pre><code>graph TD\n    A[Start: Call get_client] --&gt; B{Authorization Check}\n    B --&gt; |Authorized| C[Retrieve Client Configuration]\n    C --&gt; D{Client Config Exists?}\n    D --&gt; |Yes| E[Retrieve Provider Configuration]\n    D --&gt; |No| F[Raise model_does_not_exist Exception]\n    E --&gt; G{Provider Config Exists?}\n    G --&gt; |Yes| H[Dynamically Instantiate Client]\n    G --&gt; |No| I[Raise provider_does_not_exist Exception]\n    H --&gt; J[Return Client Instance]</code></pre> <p>Key implementation details:</p> <ul> <li>Uses dynamic method call via <code>CALL METHOD</code> to instantiate provider-specific clients</li> <li>Leverages BADI for flexible authorization implementation</li> <li>Performs two-stage validation (client and provider configurations)</li> <li>Raises specific validation exceptions for configuration errors</li> </ul> <p>The <code>class_constructor()</code> initializes the authorization implementation through a BADI, ensuring a pluggable authorization mechanism.</p>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_HTTP_CLIENT_WRAPPER_CLAS/","title":"Class ZCL_LLM_HTTP_CLIENT_WRAPPER","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_HTTP_CLIENT_WRAPPER_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_http_client_wrapper</code> is a private constructor HTTP client wrapper class that provides a robust and flexible interface for making HTTP communications. It implements the <code>zif_llm_http_client_wrapper</code> interface and offers methods for creating, configuring, and managing HTTP client interactions. The class is designed to handle HTTP communication with external providers, with built-in error handling and logging capabilities.</p> <p>Key public methods include:</p> <ul> <li><code>get_client()</code>: Creates a new HTTP client instance</li> <li><code>set_header()</code>: Sets custom HTTP headers</li> <li><code>set_url()</code>: Configures the target URL</li> <li><code>communicate()</code>: Sends HTTP requests and processes responses</li> <li><code>close_client()</code>: Closes the HTTP client connection</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_HTTP_CLIENT_WRAPPER_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li><code>if_http_client</code>: SAP standard HTTP client interface</li> <li><code>zif_llm_call_logger</code>: Custom logging interface</li> <li><code>zcx_llm_validation</code>: Custom validation exception class</li> <li><code>zcx_llm_http_error</code>: Custom HTTP communication error class</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_HTTP_CLIENT_WRAPPER_CLAS/#details","title":"Details","text":"<p>The class follows a comprehensive HTTP communication workflow:</p> <pre><code>graph TD\n    A[Constructor] --&gt; B{Validate RFC Destination}\n    B --&gt;|Valid| C[Initialize HTTP Client]\n    B --&gt;|Invalid| D[Raise Validation Exception]\n    C --&gt; E[Prepare Request]\n    E --&gt; F[Set Headers]\n    F --&gt; G[Send Request]\n    G --&gt; H[Receive Response]\n    H --&gt; I[Log Communication]\n    I --&gt; J[Handle Response/Errors]</code></pre> <p>Key implementation details:</p> <ul> <li>Supports dynamic configuration through <code>client_config</code> and <code>provider_config</code></li> <li>Automatically sets default headers like 'Content-Type'</li> <li>Implements comprehensive error handling for various HTTP communication scenarios</li> <li>Integrates with a call logger to record communication details</li> <li>Handles response status code validation</li> <li>Automatically resets request to prevent header/path prefix contamination between calls</li> </ul> <p>The class is designed with flexibility and robustness in mind, providing a clean abstraction layer over SAP's standard HTTP client functionality while adding enhanced error handling and logging capabilities.</p>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_OPTIONS_CLAS/","title":"Class ZCL_LLM_OPTIONS","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_OPTIONS_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_options</code> class is a configuration management class for Large Language Model (LLM) parameters. It provides a flexible and type-safe way to set and manage various configuration options for LLM interactions. The class implements the <code>zif_llm_options</code> interface and supports setting and validating a wide range of parameters such as temperature, top_p, top_k, seed, frequency penalty, presence penalty, and custom parameters.</p> <p>Key public methods include:</p> <ul> <li><code>set_temperature</code>: Set model temperature (0.0 to 2.0)</li> <li><code>set_top_p</code>: Set top_p sampling parameter (0.0 to 1.0)</li> <li><code>set_top_k</code>: Set top_k sampling parameter (&gt; 0)</li> <li><code>set_seed</code>: Set random seed (non-negative integers)</li> <li><code>set_frequency_penalty</code>: Set frequency penalty (-2.0 to 2.0)</li> <li><code>set_presence_penalty</code>: Set presence penalty (-2.0 to 2.0)</li> <li><code>set_min_p</code>: Set minimum probability parameter (0.0 to 1.0)</li> <li><code>set_top_a</code>: Set top_a parameter (0.0 to 1.0)</li> <li><code>set_custom_parameters</code>: Add or update custom parameters</li> <li><code>get_parameters</code>: Retrieve current parameter configuration</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_OPTIONS_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li><code>zif_llm_options</code> interface</li> <li><code>zcx_llm_validation</code> exception class for parameter validation</li> <li><code>zllm_keyvalues</code> type for storing key-value parameters</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_OPTIONS_CLAS/#details","title":"Details","text":"<p>The class uses an internal data structure <code>int_parameters</code> to store parameters as key-value pairs. Each parameter setting method follows a consistent pattern:</p> <ol> <li>Validate the input value using range-specific validation methods</li> <li>Convert the value to a string representation</li> <li>Add or replace the parameter in the internal parameter collection</li> </ol> <p>Validation is performed through two core validation methods:</p> <ul> <li><code>validate_range_float</code>: Validates floating-point parameters within a specified range</li> <li><code>validate_range_int</code>: Validates integer parameters within a specified range</li> </ul> <pre><code>classDiagram\n    class zcl_llm_options {\n        - int_parameters: zllm_keyvalues\n        + set_temperature(temperature: decfloat16)\n        + set_top_p(top_p: decfloat16)\n        + set_custom_parameters(parameters: zllm_keyvalues)\n        - validate_range_float(value, min, max)\n        - validate_range_int(value, min, max)\n        - set_parameter(key: string, value: string)\n    }\n    class zif_llm_options {\n        &lt;&lt;interface&gt;&gt;\n    }\n    class zcx_llm_validation {\n        &lt;&lt;exception&gt;&gt;\n    }\n\n    zcl_llm_options ..|&gt; zif_llm_options\n    zcl_llm_options ..&gt; zcx_llm_validation: raises</code></pre> <p>The class provides a robust and extensible mechanism for configuring LLM parameters with built-in type and range validation, ensuring that only valid configurations can be set.</p>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_SO_JS_CLAS/","title":"Class ZCL_LLM_SO_JS","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_SO_JS_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_so_js</code> class is a JSON Schema generator implementation for structured output in ABAP. It implements the <code>zif_llm_so</code> interface and provides functionality to convert ABAP data types and structures into a JSON schema representation. The primary purpose is to dynamically generate a JSON schema that describes the structure, types, and metadata of ABAP data types.</p> <p>Key public methods include:</p> <ul> <li><code>set_schema()</code>: Main method to generate the JSON schema for a given data type</li> <li><code>get_schema()</code>: Retrieves the generated JSON schema</li> <li><code>get_datatype()</code>: Returns the original data descriptor</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_SO_JS_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li><code>zif_llm_so</code> interface</li> <li><code>zcx_llm_validation</code> exception class for handling unsupported types</li> <li>ABAP type description classes (<code>cl_abap_typedescr</code>, <code>cl_abap_structdescr</code>, <code>cl_abap_elemdescr</code>, <code>cl_abap_tabledescr</code>)</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_SO_JS_CLAS/#details","title":"Details","text":"<p>The class uses a recursive type processing approach to generate JSON schemas:</p> <pre><code>flowchart TD\n    A[set_schema] --&gt; B{Data Type Kind}\n    B --&gt; |Struct| C[process_structure]\n    B --&gt; |Table| D[process_table]\n    B --&gt; |Element| E[process_element]\n\n    C --&gt; F[Iterate Components]\n    F --&gt; G[Generate Properties]\n    G --&gt; H[Add Type Information]\n    H --&gt; I[Add Descriptions/Enums]\n\n    D --&gt; J[Generate Array Schema]\n    J --&gt; K[Process Line Type]\n\n    E --&gt; L[Map ABAP Type to JSON Type]\n    L --&gt; M[Add Metadata]</code></pre> <p>Key processing methods:</p> <ul> <li><code>process_type()</code>: Dispatches processing based on type kind</li> <li><code>process_structure()</code>: Handles nested structures, generates object schemas</li> <li><code>process_table()</code>: Generates array schemas</li> <li><code>process_element()</code>: Converts elementary types to JSON schema types</li> </ul> <p>The implementation supports:</p> <ul> <li>Nested structures</li> <li>Tables and arrays</li> <li>Type conversion (int, string, boolean)</li> <li>Field descriptions</li> <li>Enum values</li> <li>Error handling for unsupported types</li> </ul> <p>The schema generation is flexible and can handle complex ABAP data structures, converting them into a standardized JSON schema format that can be used for documentation, validation, or interface description.</p>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_STATISTICS_CLAS/","title":"Class ZCL_LLM_STATISTICS","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_STATISTICS_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_statistics</code> class is designed to manage and control the insertion of statistical records into a database table. It provides a flexible mechanism to conditionally log statistics based on a system-wide activation flag. The class implements the <code>zif_llm_statistics</code> interface and offers a simple way to add statistical records.</p>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_STATISTICS_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li>Interface: <code>zif_llm_statistics</code></li> <li>Database Table: <code>zllm_statistics</code></li> <li>Database Table: <code>zllm_system</code> (for retrieving activation status)</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_STATISTICS_CLAS/#details","title":"Details","text":"<p>The class follows a configuration-driven approach to statistical logging:</p> <pre><code>stateDiagram-v2\n    [*] --&gt; Constructor: Retrieve activation status\n    Constructor --&gt; Active: stat_active = 'X'\n    Constructor --&gt; Inactive: stat_active = ''\n\n    Active --&gt; AddRecord: zif_llm_statistics~add()\n    Inactive --&gt; [*]: No logging</code></pre> <p>Key implementation details:</p> <ul> <li>The constructor retrieves the statistical logging activation status from the <code>zllm_system</code> table</li> <li>The <code>add</code> method checks the <code>active</code> flag before inserting a record</li> <li>If statistics are not active, the <code>add</code> method immediately returns without logging</li> <li>When active, records are directly inserted into the <code>zllm_statistics</code> table</li> </ul> <p>The design allows for centralized, configurable statistical logging with minimal performance overhead when disabled.</p>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_TEMPLATE_PARSER_CLAS/","title":"Class ZCL_LLM_TEMPLATE_PARSER","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_TEMPLATE_PARSER_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_template_parser</code> is a sophisticated template rendering class that provides Jinja2-like template processing capabilities in ABAP. It allows developers to:</p> <ul> <li>Add and manage templates</li> <li>Render templates with dynamic context</li> <li> <p>Support complex template features like:</p> </li> <li> <p>Variable substitution</p> </li> <li>Conditional rendering</li> <li>Looping</li> <li>Filtering</li> <li>Nested data access</li> </ul> <p>Public methods include:</p> <ul> <li><code>constructor()</code>: Initializes an empty template collection</li> <li><code>add_template()</code>: Adds or replaces a template in the parser</li> <li><code>render()</code>: Renders a specific template with a given context</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_TEMPLATE_PARSER_CLAS/#dependencies","title":"Dependencies","text":"<p>No external dependencies are required. The class uses standard ABAP type descriptions and type handling mechanisms.</p>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_TEMPLATE_PARSER_CLAS/#details","title":"Details","text":""},{"location":"Claude%203.5%20Haiku/ZCL_LLM_TEMPLATE_PARSER_CLAS/#template-processing-architecture","title":"Template Processing Architecture","text":"<p>The template parsing follows a multi-stage process:</p> <pre><code>graph TD\n    A[Add Template] --&gt; B[Tokenize Template]\n    B --&gt; C[Parse Tokens]\n    C --&gt; D{Control Structures}\n    D --&gt; |Variable| E[Resolve Variable]\n    D --&gt; |Conditional| F[Evaluate Condition]\n    D --&gt; |Loop| G[Process Loop Content]\n    E &amp; F &amp; G --&gt; H[Render Final Output]</code></pre> <p>Key internal mechanisms include:</p> <ul> <li>Dynamic variable resolution through nested path traversal</li> <li> <p>Flexible condition evaluation supporting:</p> </li> <li> <p>Comparison operators</p> </li> <li>Logical AND/OR</li> <li>Negation</li> <li>Advanced loop processing with metadata</li> <li>Comprehensive error handling for various template parsing scenarios</li> </ul> <p>The parser supports complex template scenarios like:</p> <ul> <li>Nested data structures</li> <li>Conditional rendering with multiple branches</li> <li>Iterative processing of tables</li> <li>String transformation filters</li> <li>Escape character handling</li> </ul> <p>The implementation leverages ABAP's type description capabilities to dynamically inspect and manipulate data structures, providing a powerful and flexible template rendering solution.</p>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_TOOL_CALCULATOR_CLAS/","title":"Class ZCL_LLM_TOOL_CALCULATOR","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_TOOL_CALCULATOR_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_tool_calculator</code> is a sophisticated mathematical expression evaluation tool that implements the <code>zif_llm_tool</code> interface. It provides a flexible calculator capable of parsing and evaluating complex mathematical expressions, supporting:</p> <ul> <li>Basic arithmetic operations (+, -, *, /)</li> <li>Power operations (**)</li> <li>Modulo operation (MOD)</li> <li>Parentheses for complex expressions</li> <li>Handling of negative numbers</li> <li>Error handling for invalid inputs and edge cases</li> </ul> <p>Public methods include:</p> <ul> <li><code>get_tool_details()</code>: Returns metadata about the calculator tool</li> <li><code>execute()</code>: Evaluates a given mathematical expression</li> <li><code>get_result()</code>: Retrieves the most recent calculation result</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_TOOL_CALCULATOR_CLAS/#dependencies","title":"Dependencies","text":"<p>No external dependencies are explicitly required. The class uses standard ABAP exception classes:</p> <ul> <li><code>cx_sy_zerodivide</code></li> <li><code>cx_sy_arithmetic_error</code></li> <li><code>cx_sy_conversion_no_number</code></li> </ul>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_TOOL_CALCULATOR_CLAS/#details","title":"Details","text":"<p>The calculator uses the Shunting Yard algorithm for parsing and evaluating expressions, which allows for handling complex mathematical expressions with proper operator precedence.</p> <p>Key internal processing steps:</p> <ol> <li>Expression Tokenization</li> <li>Breaks down input string into tokens (numbers and operators)</li> <li>Handles negative numbers and multi-character operators</li> <li> <p>Validates input characters</p> </li> <li> <p>Conversion to Reverse Polish Notation (RPN)</p> </li> <li>Transforms infix notation to RPN using operator stack</li> <li>Respects operator precedence</li> <li> <p>Handles parentheses</p> </li> <li> <p>RPN Evaluation</p> </li> <li>Uses a value stack to compute final result</li> <li>Applies operators sequentially</li> <li>Supports various arithmetic and power operations</li> </ol> <pre><code>graph TD\n    A[Input Expression] --&gt; B[Tokenization]\n    B --&gt; C[Shunting Yard Algorithm]\n    C --&gt; D[RPN Conversion]\n    D --&gt; E[RPN Evaluation]\n    E --&gt; F[Final Result]\n\n    B --&gt; |Validate Input| G{Input Valid?}\n    G --&gt;|No| H[Raise Exception]</code></pre> <p>The implementation provides robust error handling, catching scenarios like:</p> <ul> <li>Division by zero</li> <li>Invalid expression syntax</li> <li>Unsupported characters</li> <li>Insufficient operands</li> </ul> <p>Notably, the class supports advanced features like:</p> <ul> <li>Negative exponents</li> <li>Fractional calculations</li> <li>Complex nested expressions with parentheses</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_TOOL_ECHO_CLAS/","title":"Class ZCL_LLM_TOOL_ECHO","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_TOOL_ECHO_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_tool_echo</code> is a simple tool class implementing the <code>zif_llm_tool</code> interface, designed to act as an echo mechanism for tool interactions. Its primary purpose is to return the input data as-is, essentially creating a pass-through or reflection of the received data. The class supports basic tool operations like executing a tool call and retrieving tool details.</p> <p>Public methods include:</p> <ul> <li><code>get_tool_details()</code>: Returns the tool's configuration details</li> <li><code>execute()</code>: Processes and stores input data</li> <li><code>get_result()</code>: Retrieves the processed tool result</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_TOOL_ECHO_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li>Interface <code>zif_llm_tool</code>: Defines the contract for tool implementations</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_TOOL_ECHO_CLAS/#details","title":"Details","text":"<p>The class follows a straightforward design pattern for tool handling:</p> <pre><code>classDiagram\n    class zcl_llm_tool_echo {\n        -tool_details: zif_llm_tool=&gt;tool_details\n        -response_data: REF TO data\n        -tool_call_id: string\n        +execute(data, tool_call_id)\n        +get_result() tool_result\n    }\n    class zif_llm_tool {\n        &lt;&lt;interface&gt;&gt;\n    }\n    zcl_llm_tool_echo ..|&gt; zif_llm_tool : implements</code></pre> <p>Key implementation characteristics:</p> <ul> <li>Stores input data directly in <code>response_data</code></li> <li>Preserves the original <code>tool_call_id</code></li> <li>Returns the input data without modification</li> <li>Designed for scenarios requiring a simple data reflection mechanism</li> </ul> <p>The constructor allows initializing the tool with specific details, while the <code>execute()</code> method captures both the data and the tool call identifier for later retrieval.</p>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_TOOL_PARSER_CLAS/","title":"Class ZCL_LLM_TOOL_PARSER","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_TOOL_PARSER_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_tool_parser</code> is a JSON schema generator for ABAP data structures, implementing the <code>zif_llm_tool_parser</code> interface. Its primary purpose is to convert ABAP data types into a JSON schema representation, supporting various data types including:</p> <ul> <li>Elementary types (integers, strings, booleans)</li> <li>Structures</li> <li>Tables</li> <li>Nested structures and tables</li> </ul> <p>The main public method is <code>parse()</code>, which generates a JSON schema for a given data structure, handling type detection, descriptions, and enum values.</p>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_TOOL_PARSER_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li><code>zif_llm_tool_parser</code> interface</li> <li><code>zcx_llm_validation</code> exception class</li> <li>ABAP type descriptor classes (cl_abap_typedescr, cl_abap_structdescr, cl_abap_elemdescr, cl_abap_tabledescr)</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZCL_LLM_TOOL_PARSER_CLAS/#details","title":"Details","text":"<p>The class uses a recursive parsing approach to generate JSON schemas:</p> <pre><code>graph TD\n    A[parse] --&gt; B{Data Type}\n    B --&gt; |Struct| C[process_structure]\n    B --&gt; |Table| D[process_table]\n    B --&gt; |Elementary| E[process_element]\n\n    C --&gt; F[Iterate Components]\n    F --&gt; G[Recursively Process Each Component]\n\n    D --&gt; H[Process Table Line Type]\n\n    E --&gt; I{Determine Type}\n    I --&gt; |Integer| J[Set type: integer]\n    I --&gt; |String| K[Set type: string]\n    I --&gt; |Boolean| L[Set type: boolean]</code></pre> <p>Key parsing strategies:</p> <ul> <li>Supports nested structures and tables</li> <li>Generates titles and descriptions</li> <li>Handles enum values</li> <li>Validates and raises exceptions for unsupported types</li> <li>Converts field names to lowercase</li> <li>Generates a \"required\" array for structure components</li> <li>Disables additional properties in objects</li> </ul> <p>The parsing process involves several method calls:</p> <ol> <li><code>pre_schema()</code></li> <li><code>process_type()</code> (recursive type handling)</li> <li><code>process_structure()</code> / <code>process_table()</code> / <code>process_element()</code></li> <li><code>post_schema()</code></li> </ol> <p>The class is designed to be extensible, with empty hook methods like <code>pre_object()</code>, <code>post_array()</code> that can be overridden in subclasses for custom behavior.</p>"},{"location":"Claude%203.5%20Haiku/ZCX_LLM_AUTHORIZATION_CLAS/","title":"Class ZCX_LLM_AUTHORIZATION","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Haiku/ZCX_LLM_AUTHORIZATION_CLAS/#overview","title":"Overview","text":"<p><code>ZCX_LLM_AUTHORIZATION</code> is a custom ABAP exception class designed for handling authorization-related errors in an LLM (Large Language Model) client context. It inherits from <code>CX_STATIC_CHECK</code> and implements message interfaces for dynamic and static message handling. The class defines several predefined message constants for different error scenarios related to provider maintenance, client retrieval, decryption, and encryption.</p>"},{"location":"Claude%203.5%20Haiku/ZCX_LLM_AUTHORIZATION_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li><code>CX_STATIC_CHECK</code>: Parent exception class</li> <li><code>IF_T100_DYN_MSG</code>: Dynamic message interface</li> <li><code>IF_T100_MESSAGE</code>: Static message interface</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZCX_LLM_AUTHORIZATION_CLAS/#details","title":"Details","text":"<p>The exception class provides a flexible error handling mechanism with predefined message constants:</p> <pre><code>graph TD\n    A[ZCX_LLM_AUTHORIZATION] --&gt; B[Message Constants]\n    B --&gt; C[PROVIDER_MAINTENANCE]\n    B --&gt; D[GET_CLIENT]\n    B --&gt; E[DECRYPT]\n    B --&gt; F[ENCRYPT]</code></pre> <p>Key characteristics:</p> <ul> <li>Supports dynamic message creation through message interfaces</li> <li>Stores additional message variables <code>MSGV1</code> and <code>MSGV2</code></li> <li>Constructor method allows flexible exception instantiation with optional text ID and previous exception</li> <li>Uses message class 'ZLLM_CLIENT' with specific message numbers for different error scenarios</li> </ul> <p>The constructor method follows a standard ABAP exception handling pattern:</p> <ul> <li>Calls parent constructor</li> <li>Sets default or custom text ID</li> <li>Allows chaining of exceptions through the <code>PREVIOUS</code> parameter</li> </ul> <p>Typical use cases include:</p> <ul> <li>Signaling authorization-related errors in LLM client interactions</li> <li>Providing detailed error context through message variables</li> <li>Supporting centralized error handling in LLM client implementations</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZCX_LLM_HTTP_ERROR_CLAS/","title":"Class ZCX_LLM_HTTP_ERROR","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Haiku/ZCX_LLM_HTTP_ERROR_CLAS/#overview","title":"Overview","text":"<p><code>ZCX_LLM_HTTP_ERROR</code> is a custom ABAP exception class designed to handle various HTTP communication errors. It inherits from <code>CX_STATIC_CHECK</code> and implements the <code>IF_T100_MESSAGE</code> interface, providing a structured way to manage and communicate HTTP-related exceptions in SAP systems.</p> <p>The class defines four primary error constants:</p> <ul> <li><code>HTTP_CLIENT_NOT_INITIALIZED</code>: Error when HTTP client is not properly set up</li> <li><code>HTTP_COMMUNICATION_FAILURE</code>: Errors during HTTP communication</li> <li><code>HTTP_PROCESSING_FAILED</code>: Errors during HTTP request/response processing</li> <li><code>HTTP_OTHERS</code>: Catch-all for miscellaneous HTTP errors</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZCX_LLM_HTTP_ERROR_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li><code>CX_STATIC_CHECK</code>: Parent exception class</li> <li><code>IF_T100_MESSAGE</code>: Message interface for SAP message handling</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZCX_LLM_HTTP_ERROR_CLAS/#details","title":"Details","text":"<p>The exception class is designed with flexibility to capture detailed error information through four string attributes (<code>MV_ATTR1</code> to <code>MV_ATTR4</code>).</p> <p>The constructor method allows dynamic error handling by:</p> <ul> <li>Accepting optional error text ID</li> <li>Storing up to four additional error attributes</li> <li>Setting default text ID if none provided</li> </ul> <pre><code>classDiagram\n    CX_STATIC_CHECK &lt;|-- ZCX_LLM_HTTP_ERROR\n    ZCX_LLM_HTTP_ERROR : +MV_ATTR1 STRING\n    ZCX_LLM_HTTP_ERROR : +MV_ATTR2 STRING\n    ZCX_LLM_HTTP_ERROR : +CONSTRUCTOR()\n    ZCX_LLM_HTTP_ERROR : +IF_T100_MESSAGE implementation</code></pre> <p>The class is particularly useful for standardizing HTTP error handling across ABAP applications, providing a consistent mechanism to raise and process HTTP-related exceptions.</p>"},{"location":"Claude%203.5%20Haiku/ZCX_LLM_TEMPLATE_PARSER_CLAS/","title":"Class ZCX_LLM_TEMPLATE_PARSER","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Haiku/ZCX_LLM_TEMPLATE_PARSER_CLAS/#overview","title":"Overview","text":"<p><code>ZCX_LLM_TEMPLATE_PARSER</code> is a custom ABAP exception class designed for handling various parsing and template processing errors in a language model (LLM) template parsing context. It inherits from <code>CX_STATIC_CHECK</code> and implements message interfaces <code>IF_T100_DYN_MSG</code> and <code>IF_T100_MESSAGE</code>.</p> <p>The class defines numerous predefined error constants covering a wide range of potential parsing issues, such as:</p> <ul> <li>Unclosed tokens</li> <li>Invalid variable paths</li> <li>Control structure errors</li> <li>Condition evaluation problems</li> <li>Loop syntax issues</li> <li>Token mismatches</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZCX_LLM_TEMPLATE_PARSER_CLAS/#dependencies","title":"Dependencies","text":"<p>No external dependencies are evident from the class definition.</p>"},{"location":"Claude%203.5%20Haiku/ZCX_LLM_TEMPLATE_PARSER_CLAS/#details","title":"Details","text":"<p>The exception class is structured to provide granular error reporting through message constants. Each error type is defined with:</p> <ul> <li>A message ID (<code>ZLLM_CLIENT</code>)</li> <li>A unique message number</li> <li>Optional attribute placeholders for dynamic message text</li> </ul> <pre><code>classDiagram\n    CX_STATIC_CHECK &lt;|-- ZCX_LLM_TEMPLATE_PARSER\n    ZCX_LLM_TEMPLATE_PARSER : +MSGV1 symsgv\n    ZCX_LLM_TEMPLATE_PARSER : +MSGV2 symsgv\n    ZCX_LLM_TEMPLATE_PARSER : +CONSTRUCTOR()</code></pre> <p>Key error categories include:</p> <ul> <li>Parsing structural errors (unclosed tokens, control structures)</li> <li>Variable resolution problems</li> <li>Condition and loop processing issues</li> <li>Syntax and semantic validation errors</li> </ul> <p>The constructor method allows flexible exception creation with optional message parameters, supporting dynamic error messaging. The implementation follows standard ABAP exception handling patterns, enabling precise error tracking and reporting during template parsing processes.</p>"},{"location":"Claude%203.5%20Haiku/ZCX_LLM_VALIDATION_CLAS/","title":"Class ZCX_LLM_VALIDATION","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Haiku/ZCX_LLM_VALIDATION_CLAS/#overview","title":"Overview","text":"<p><code>ZCX_LLM_VALIDATION</code> is a custom ABAP exception class designed for handling various validation and error scenarios in a Large Language Model (LLM) client implementation. It inherits from <code>CX_DYNAMIC_CHECK</code> and implements the <code>IF_T100_MESSAGE</code> interface, allowing for structured error messaging across SAP systems.</p> <p>The class defines multiple predefined error constants covering scenarios such as:</p> <ul> <li>Unsupported data types</li> <li>Value range violations</li> <li>Model-related errors</li> <li>HTTP destination issues</li> <li>Encryption/decryption problems</li> <li>Provider configuration errors</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZCX_LLM_VALIDATION_CLAS/#dependencies","title":"Dependencies","text":"<p>No external dependencies are explicitly required beyond standard SAP ABAP runtime libraries.</p>"},{"location":"Claude%203.5%20Haiku/ZCX_LLM_VALIDATION_CLAS/#details","title":"Details","text":""},{"location":"Claude%203.5%20Haiku/ZCX_LLM_VALIDATION_CLAS/#error-constant-structure","title":"Error Constant Structure","text":"<p>Each error constant follows a consistent pattern:</p> <ul> <li>Message ID (<code>ZLLM_CLIENT</code>)</li> <li>Unique message number</li> <li>Up to two attribute placeholders for dynamic error details</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZCX_LLM_VALIDATION_CLAS/#constructor-mechanism","title":"Constructor Mechanism","text":"<p>The constructor allows flexible error instantiation with optional parameters:</p> <ul> <li>Dynamic text ID</li> <li>Up to four string attributes for error context</li> <li>Previous exception reference</li> </ul> <pre><code>classDiagram\n    CX_DYNAMIC_CHECK &lt;|-- ZCX_LLM_VALIDATION\n    ZCX_LLM_VALIDATION : +MV_ATTR1 STRING\n    ZCX_LLM_VALIDATION : +MV_ATTR2 STRING\n    ZCX_LLM_VALIDATION : +CONSTRUCTOR()\n    ZCX_LLM_VALIDATION : +IF_T100_MESSAGE implementation</code></pre> <p>The class supports comprehensive error tracking by storing additional context information in <code>MV_ATTR1</code> through <code>MV_ATTR4</code>, enabling detailed error reporting and troubleshooting in LLM client interactions.</p>"},{"location":"Claude%203.5%20Haiku/ZIF_LLM_AUTH_INTF/","title":"Interface ZIF_LLM_AUTH","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Haiku/ZIF_LLM_AUTH_INTF/#overview","title":"Overview","text":"<p>The <code>zif_llm_auth</code> interface defines authorization check methods for various operations related to Large Language Model (LLM) interactions. The interface provides four key authorization verification methods:</p> <ol> <li> <p><code>check_provider_maintenance()</code>:</p> </li> <li> <p>Validates authorization for performing provider maintenance</p> </li> <li> <p>Raises <code>zcx_llm_authorization</code> exception if unauthorized</p> </li> <li> <p><code>check_get_client(model)</code>:</p> </li> <li> <p>Checks authorization to retrieve a model client</p> </li> <li>Takes a model type as input</li> <li> <p>Raises <code>zcx_llm_authorization</code> exception if unauthorized</p> </li> <li> <p><code>check_decrypt()</code>:</p> </li> <li> <p>Verifies authorization to decrypt secrets</p> </li> <li> <p>Raises <code>zcx_llm_authorization</code> exception if unauthorized</p> </li> <li> <p><code>check_encrypt()</code>:</p> </li> <li> <p>Validates authorization to encrypt secrets</p> </li> <li>Raises <code>zcx_llm_authorization</code> exception if unauthorized</li> </ol>"},{"location":"Claude%203.5%20Haiku/ZIF_LLM_AUTH_INTF/#dependencies","title":"Dependencies","text":"<ul> <li>Custom exception class: <code>zcx_llm_authorization</code></li> <li>Custom type: <code>zllm_model</code></li> </ul>"},{"location":"Claude%203.5%20Haiku/ZIF_LLM_CALL_LOGGER_INTF/","title":"Interface ZIF_LLM_CALL_LOGGER","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Haiku/ZIF_LLM_CALL_LOGGER_INTF/#overview","title":"Overview","text":"<p>The <code>ZIF_LLM_CALL_LOGGER</code> interface defines a logging mechanism for tracking calls with a single method:</p> <ul> <li><code>add</code>: Allows adding a log entry of type <code>zllm_call_log</code> to the logging system</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZIF_LLM_CALL_LOGGER_INTF/#dependencies","title":"Dependencies","text":"<p>No specific external dependencies are identified in this interface definition.</p>"},{"location":"Claude%203.5%20Haiku/ZIF_LLM_CHAT_REQUEST_INTF/","title":"Interface ZIF_LLM_CHAT_REQUEST","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Haiku/ZIF_LLM_CHAT_REQUEST_INTF/#overview","title":"Overview","text":"<p>The <code>zif_llm_chat_request</code> interface defines a comprehensive contract for managing chat requests in an LLM (Large Language Model) interaction framework. It provides methods for:</p> <ol> <li> <p>Message Management:</p> </li> <li> <p><code>add_message</code>: Add a single message</p> </li> <li><code>add_messages</code>: Add multiple messages</li> <li><code>get_messages</code>: Retrieve all messages</li> <li> <p><code>clear_messages</code>: Remove all messages</p> </li> <li> <p>Tool Handling:</p> </li> <li> <p><code>add_tool</code>: Add a single tool</p> </li> <li><code>add_tools</code>: Add multiple tools</li> <li><code>get_tools</code>: Retrieve all tools</li> <li><code>clear_tools</code>: Remove all tools</li> <li><code>set_tool_choice</code>: Configure tool selection strategy</li> <li><code>add_tool_result</code>: Add tool execution results</li> <li> <p><code>add_tool_choices</code>: Add tool call details</p> </li> <li> <p>Structured Output:</p> </li> <li> <p><code>set_structured_output</code>: Configure structured output parameters</p> </li> <li> <p><code>set_structured_output_active</code>: Toggle structured output</p> </li> <li> <p>Additional Utilities:</p> </li> <li> <p><code>add_choice</code>: Append LLM choice to message list</p> </li> <li><code>get_internal_request</code>: Retrieve full request details</li> <li><code>options</code>: Access request configuration options</li> </ol> <p>The interface defines three tool choice constants:</p> <ul> <li><code>tool_choice_none</code></li> <li><code>tool_choice_auto</code></li> <li><code>tool_choice_required</code></li> </ul>"},{"location":"Claude%203.5%20Haiku/ZIF_LLM_CHAT_REQUEST_INTF/#dependencies","title":"Dependencies","text":"<ul> <li><code>zllm_msg</code>: Message type</li> <li><code>zllm_msgs</code>: Collection of messages</li> <li><code>zllm_tools</code>: Collection of tools</li> <li><code>zif_llm_tool</code>: Tool interface</li> <li><code>zif_llm_options</code>: Options interface</li> <li><code>zif_llm_so</code>: Structured output interface</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZIF_LLM_CLIENT_INTF/","title":"Interface ZIF_LLM_CLIENT","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Haiku/ZIF_LLM_CLIENT_INTF/#overview","title":"Overview","text":"<p>The <code>zif_llm_client</code> interface defines a standardized contract for interacting with Large Language Model (LLM) clients. It provides methods for creating and executing chat requests with different role types.</p> <p>Key features:</p> <ul> <li>Defines constants for message roles: <code>user</code>, <code>system</code>, <code>assistant</code>, and <code>tool</code></li> <li>Supports client creation with configuration</li> <li>Enables chat request generation and execution</li> </ul> <p>Main methods:</p> <ol> <li> <p><code>get_client()</code>:</p> </li> <li> <p>Static method to create a new LLM client</p> </li> <li>Requires client and provider configurations</li> <li> <p>Can raise validation or authorization exceptions</p> </li> <li> <p><code>chat()</code>:</p> </li> <li> <p>Executes a chat request</p> </li> <li>Takes a chat request object</li> <li> <p>Returns a response</p> </li> <li> <p><code>new_request()</code>:</p> </li> <li> <p>Creates a new chat request object</p> </li> </ol>"},{"location":"Claude%203.5%20Haiku/ZIF_LLM_CLIENT_INTF/#dependencies","title":"Dependencies","text":"<ul> <li> <p>Custom exception classes:</p> </li> <li> <p><code>zcx_llm_validation</code></p> </li> <li><code>zcx_llm_authorization</code></li> <li> <p>Custom types:</p> </li> <li> <p><code>zllm_clnt_config</code></p> </li> <li><code>zllm_providers</code></li> <li><code>zllm_response</code></li> <li><code>zllm_role</code></li> </ul>"},{"location":"Claude%203.5%20Haiku/ZIF_LLM_CLIENT_JSON_SCHEMA_INTF/","title":"Interface ZIF_LLM_CLIENT_JSON_SCHEMA","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Haiku/ZIF_LLM_CLIENT_JSON_SCHEMA_INTF/#overview","title":"Overview","text":"<p>The <code>zif_llm_client_json_schema</code> interface provides a structured approach to creating JSON schemas dynamically. It offers methods to:</p> <ol> <li><code>new_format</code>: Create a new JSON schema instance with a title</li> <li><code>add_property</code>: Add individual properties to the schema (single level)</li> <li><code>add_array</code>: Add an array of a specific object type</li> <li><code>add_object</code>: Add an object with parameters</li> <li><code>generate_schema</code>: Produce the final JSON schema as a string</li> </ol> <p>The interface supports defining complex JSON structures with various value types:</p> <ul> <li>Primitive types: string, number, boolean, integer</li> <li>Supports nullable properties</li> <li>Allows defining properties, objects, and arrays</li> </ul> <pre><code>classDiagram\n    class zif_llm_client_json_schema {\n        +new_format(title: string) : zif_llm_client_json_schema\n        +add_property(property: property_def)\n        +add_array(array: array_def)\n        +add_object(object: object_def)\n        +generate_schema() : string\n    }</code></pre>"},{"location":"Claude%203.5%20Haiku/ZIF_LLM_CLIENT_JSON_SCHEMA_INTF/#dependencies","title":"Dependencies","text":"<ul> <li>Custom exception class <code>zcx_llm_validation</code> for error handling during schema creation</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZIF_LLM_DEFAULT_IMPL_INTF/","title":"Interface ZIF_LLM_DEFAULT_IMPL","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Haiku/ZIF_LLM_DEFAULT_IMPL_INTF/#overview","title":"Overview","text":"<p>The <code>zif_llm_default_impl</code> interface defines a set of methods for retrieving default implementations of various components related to a Large Language Model (LLM) system. The interface provides methods to get implementations for:</p> <ol> <li>JSON handling</li> <li>Encryption</li> <li>Call logging</li> <li>Statistics tracking</li> <li>Authorization</li> </ol> <p>Each method returns a specific interface reference that can be used to interact with the corresponding component.</p>"},{"location":"Claude%203.5%20Haiku/ZIF_LLM_DEFAULT_IMPL_INTF/#key-methods","title":"Key Methods","text":"<ul> <li><code>get_json_impl()</code>: Retrieves the name of the JSON implementation class</li> <li><code>get_encryption_impl()</code>: Returns an encryption provider implementation</li> <li><code>get_call_logger_impl()</code>: Returns a call logging implementation</li> <li><code>get_statistics_impl()</code>: Returns a statistics tracking implementation</li> <li><code>get_authorization_impl()</code>: Returns an authorization implementation, with a note that authorization errors should raise <code>zcx_llm_authorization</code></li> </ul>"},{"location":"Claude%203.5%20Haiku/ZIF_LLM_DEFAULT_IMPL_INTF/#dependencies","title":"Dependencies","text":"<ul> <li><code>if_badi_interface</code>: Suggests the interface might be used in a Business Add-In (BAdI) context</li> <li><code>zif_llm_encryption</code>: Interface for encryption provider</li> <li><code>zif_llm_call_logger</code>: Interface for call logging</li> <li><code>zif_llm_statistics</code>: Interface for statistics tracking</li> <li><code>zif_llm_auth</code>: Interface for authorization</li> <li><code>zcx_llm_authorization</code>: Exception class for authorization errors</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZIF_LLM_ENCRYPTION_INTF/","title":"Interface ZIF_LLM_ENCRYPTION","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Haiku/ZIF_LLM_ENCRYPTION_INTF/#overview","title":"Overview","text":"<p>The <code>zif_llm_encryption</code> interface defines a contract for encryption and decryption operations with the following key methods:</p> <ol> <li><code>decrypt</code></li> <li>Purpose: Decrypts an encrypted secret</li> <li>Input: Encrypted data as <code>xstring</code></li> <li>Output: Decrypted data as <code>string</code></li> <li> <p>Potential Exceptions:</p> <ul> <li><code>zcx_llm_validation</code></li> <li><code>zcx_llm_authorization</code></li> </ul> </li> <li> <p><code>encrypt</code></p> </li> <li>Purpose: Encrypts an unencrypted secret</li> <li>Input: Unencrypted data as <code>string</code></li> <li>Output: Encrypted data as <code>xstring</code></li> <li> <p>Potential Exceptions:</p> <ul> <li><code>zcx_llm_validation</code></li> <li><code>zcx_llm_authorization</code></li> </ul> </li> </ol>"},{"location":"Claude%203.5%20Haiku/ZIF_LLM_ENCRYPTION_INTF/#dependencies","title":"Dependencies","text":"<p>No explicit dependencies are defined in the interface signature.</p>"},{"location":"Claude%203.5%20Haiku/ZIF_LLM_FACTORY_INTF/","title":"Interface ZIF_LLM_FACTORY","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Haiku/ZIF_LLM_FACTORY_INTF/#overview","title":"Overview","text":"<p>The <code>zif_llm_factory</code> interface defines a factory method for creating Large Language Model (LLM) clients. It provides a standardized way to instantiate LLM clients based on a specified model.</p> <p>Key method:</p> <ul> <li><code>get_client()</code>: Creates and returns an LLM client for a given model</li> <li>Imports a model identifier</li> <li>Returns a client implementing <code>zif_llm_client</code></li> <li>Can raise validation and authorization exceptions</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZIF_LLM_FACTORY_INTF/#dependencies","title":"Dependencies","text":"<p>Potential dependencies include:</p> <ul> <li><code>zllm_model</code> type (model identifier)</li> <li><code>zif_llm_client</code> interface (client implementation)</li> <li>Exception classes:</li> <li><code>zcx_llm_validation</code></li> <li><code>zcx_llm_authorization</code></li> </ul> <p>Workflow diagram:</p> <pre><code>graph TD\n    A[Model Identifier] --&gt; B{get_client()}\n    B --&gt; |Valid Model| C[LLM Client Instance]\n    B --&gt; |Invalid Model| D[Validation Exception]\n    B --&gt; |Unauthorized| E[Authorization Exception]</code></pre>"},{"location":"Claude%203.5%20Haiku/ZIF_LLM_HTTP_CLIENT_WRAPPER_INTF/","title":"Interface ZIF_LLM_HTTP_CLIENT_WRAPPER","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Haiku/ZIF_LLM_HTTP_CLIENT_WRAPPER_INTF/#overview","title":"Overview","text":"<p>The <code>zif_llm_http_client_wrapper</code> interface defines a standardized HTTP client wrapper with the following key methods:</p> <ol> <li>get_client (Class Method):</li> <li>Creates and returns an HTTP client instance</li> <li>Takes client and provider configuration as input</li> <li> <p>Can raise a validation exception</p> </li> <li> <p>set_header:</p> </li> <li>Allows setting HTTP headers</li> <li>Supports overwriting existing headers</li> <li> <p>Can raise a validation exception</p> </li> <li> <p>set_url:</p> </li> <li>Sets the URL for the HTTP endpoint</li> <li>Prepends the SM59 destination path</li> <li> <p>Can raise a validation exception</p> </li> <li> <p>communicate:</p> </li> <li>Sends a request to the endpoint</li> <li>Supports session ID and message handling</li> <li>Returns a structured response</li> <li> <p>Can raise an HTTP error exception</p> </li> <li> <p>close_client:</p> </li> <li>Closes the HTTP client connection</li> </ol> <p>The interface defines a <code>response</code> type with properties like HTTP code, message, response text, and HTTP response object.</p>"},{"location":"Claude%203.5%20Haiku/ZIF_LLM_HTTP_CLIENT_WRAPPER_INTF/#dependencies","title":"Dependencies","text":"<ul> <li>Custom exception classes:</li> <li><code>zcx_llm_validation</code></li> <li><code>zcx_llm_http_error</code></li> <li>Configuration types:</li> <li><code>zllm_clnt_config</code></li> <li><code>zllm_providers</code></li> <li>Standard SAP interfaces like <code>if_http_response</code></li> </ul>"},{"location":"Claude%203.5%20Haiku/ZIF_LLM_OPTIONS_INTF/","title":"Interface ZIF_LLM_OPTIONS","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Haiku/ZIF_LLM_OPTIONS_INTF/#overview","title":"Overview","text":"<p>The <code>zif_llm_options</code> interface defines configuration methods for Large Language Model (LLM) call parameters. It provides setter methods for various model generation parameters with specific value ranges and validation:</p> <ul> <li><code>set_temperature</code>: Controls randomness (range 0-2)</li> <li><code>set_max_tokens</code>: Sets maximum token output (&gt; 0)</li> <li><code>set_top_p</code>: Nucleus sampling parameter (range 0-1)</li> <li><code>set_top_k</code>: Top-k sampling parameter (range 1-infinity)</li> <li><code>set_seed</code>: Enables reproducible output generation</li> <li><code>set_frequency_penalty</code>: Reduces repetition of tokens (range -2 to 2)</li> <li><code>set_presence_penalty</code>: Encourages topic diversity (range -2 to 2)</li> <li><code>set_min_p</code>: Minimum probability threshold (range 0-1)</li> <li><code>set_top_a</code>: Alternative sampling parameter (range 0-1)</li> <li><code>set_custom_parameters</code>: Allows adding custom key-value parameters</li> <li><code>get_paramters</code>: Retrieves all configured parameters</li> </ul> <p>Each setter method raises a <code>zcx_llm_validation</code> exception for invalid input values.</p>"},{"location":"Claude%203.5%20Haiku/ZIF_LLM_OPTIONS_INTF/#dependencies","title":"Dependencies","text":"<ul> <li>Custom exception class: <code>zcx_llm_validation</code></li> <li>Custom type: <code>zllm_keyvalues</code> (key-value list for parameters)</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZIF_LLM_SO_INTF/","title":"Interface ZIF_LLM_SO","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Haiku/ZIF_LLM_SO_INTF/#overview","title":"Overview","text":"<p>The <code>ZIF_LLM_SO</code> interface provides support for structured output with the following key methods:</p> <ol> <li><code>SET_SCHEMA</code></li> <li>Purpose: Defines the schema for structured output</li> <li>Imports:<ul> <li><code>data_desc</code>: A reference to <code>CL_ABAP_DATADESCR</code> specifying the data type</li> <li><code>description</code>: Optional field descriptions</li> </ul> </li> <li> <p>Can raise a validation exception (<code>ZCX_LLM_VALIDATION</code>)</p> </li> <li> <p><code>GET_SCHEMA</code></p> </li> <li>Purpose: Retrieves the converted schema</li> <li> <p>Returns: Schema as a string</p> </li> <li> <p><code>GET_DATATYPE</code></p> </li> <li>Purpose: Retrieves the underlying data type definition</li> <li>Returns: Reference to <code>CL_ABAP_DATADESCR</code></li> </ol>"},{"location":"Claude%203.5%20Haiku/ZIF_LLM_SO_INTF/#key-types","title":"Key Types","text":"<ul> <li><code>def_description</code>: A structure containing:</li> <li><code>fieldname</code>: Field name (string)</li> <li><code>description</code>: Field description (string)</li> <li><code>enum_values</code>: Possible enum values (string table)</li> <li><code>def_descriptions</code>: Table of <code>def_description</code></li> </ul>"},{"location":"Claude%203.5%20Haiku/ZIF_LLM_SO_INTF/#dependencies","title":"Dependencies","text":"<ul> <li><code>CL_ABAP_DATADESCR</code>: ABAP runtime type services</li> <li><code>ZCX_LLM_VALIDATION</code>: Custom validation exception class</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZIF_LLM_STATISTICS_INTF/","title":"Interface ZIF_LLM_STATISTICS","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Haiku/ZIF_LLM_STATISTICS_INTF/#overview","title":"Overview","text":"<p>The interface <code>zif_llm_statistics</code> defines a contract for adding statistical records related to LLM (Large Language Model) operations. It provides a single method <code>add</code> for inserting statistic records into a system.</p>"},{"location":"Claude%203.5%20Haiku/ZIF_LLM_STATISTICS_INTF/#method-details","title":"Method Details","text":"<ul> <li><code>add</code>: Allows importing a statistic record of type <code>zllm_statistics</code></li> <li>Purpose: Enables tracking and recording of LLM-related statistical information</li> <li>Input: Single parameter <code>record</code> of custom type <code>zllm_statistics</code></li> </ul>"},{"location":"Claude%203.5%20Haiku/ZIF_LLM_STATISTICS_INTF/#dependencies","title":"Dependencies","text":"<p>No explicit external dependencies are visible in the provided interface definition.</p>"},{"location":"Claude%203.5%20Haiku/ZIF_LLM_TOOL_INTF/","title":"Interface ZIF_LLM_TOOL","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Haiku/ZIF_LLM_TOOL_INTF/#overview","title":"Overview","text":"<p>The <code>zif_llm_tool</code> interface defines a standardized contract for tool (function) calls in an SAP ABAP context, specifically designed for interaction with Large Language Models (LLMs). It provides methods for managing and executing tool-based operations with a structured approach.</p> <p>Key methods include:</p> <ul> <li><code>get_result()</code>: Retrieves the result of a tool call</li> <li><code>get_tool_details()</code>: Returns metadata about the tool, including name, description, and parameter information</li> <li><code>execute()</code>: Executes a tool with given data and returns the result</li> </ul> <p>The interface defines several complex types:</p> <ul> <li><code>tool_parameters</code>: Describes tool parameters with data description and descriptions</li> <li><code>tool_details</code>: Captures comprehensive tool metadata</li> <li><code>tool_result</code>: Represents the outcome of a tool execution, including data, tool call ID, and name</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZIF_LLM_TOOL_INTF/#dependencies","title":"Dependencies","text":"<ul> <li><code>zif_llm_tool_parser</code>: Used for parsing tool-related descriptions</li> <li><code>cl_abap_datadescr</code>: Used for describing data types of tool parameters</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZIF_LLM_TOOL_PARSER_INTF/","title":"Interface ZIF_LLM_TOOL_PARSER","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Haiku/ZIF_LLM_TOOL_PARSER_INTF/#overview","title":"Overview","text":"<p>The <code>zif_llm_tool_parser</code> interface defines a contract for parsing tool definitions with the following key characteristics:</p> <ul> <li> <p>Defines a custom type <code>def_description</code> to represent field descriptions with:</p> </li> <li> <p><code>fieldname</code>: Name of the field</p> </li> <li><code>description</code>: Textual description of the field</li> <li> <p><code>enum_values</code>: Optional list of enumeration values</p> </li> <li> <p>Provides a single method <code>parse()</code> which:</p> </li> <li> <p>Takes a data descriptor and optional descriptions</p> </li> <li>Returns a string representation of the parsed tool</li> <li>Can raise a validation exception if parsing fails</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZIF_LLM_TOOL_PARSER_INTF/#method-signature","title":"Method Signature","text":"<pre><code>METHODS parse\n  IMPORTING\n    data_desc      TYPE REF TO cl_abap_datadescr\n    descriptions   TYPE def_descriptions OPTIONAL\n  RETURNING VALUE(result) TYPE string\n  RAISING\n    zcx_llm_validation\n</code></pre>"},{"location":"Claude%203.5%20Haiku/ZIF_LLM_TOOL_PARSER_INTF/#dependencies","title":"Dependencies","text":"<ul> <li><code>cl_abap_datadescr</code>: ABAP runtime type services for data description</li> <li><code>zcx_llm_validation</code>: Custom validation exception class</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZLLM_PROVIDER_MAINTENANCE_PROG/","title":"Report ZLLM_PROVIDER_MAINTENANCE","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Haiku/ZLLM_PROVIDER_MAINTENANCE_PROG/#overview","title":"Overview","text":"<p>This ABAP report provides a maintenance transaction for managing Large Language Model (LLM) provider configurations. The application allows users to:</p> <ul> <li>Add new provider configurations</li> <li>Modify existing provider configurations</li> <li>Delete provider configurations</li> <li>Display provider details in an ALV grid</li> </ul> <p>The report is structured using two main classes:</p> <ul> <li><code>lcl_app</code>: Handles core application logic and data management</li> <li><code>lcl_screen</code>: Manages screen interactions and user interface events</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZLLM_PROVIDER_MAINTENANCE_PROG/#dependencies","title":"Dependencies","text":"<ul> <li>Custom table <code>ZLLM_PROVIDERS</code> for storing provider configurations</li> <li>Encryption interface <code>ZIF_LLM_ENCRYPTION</code> for securing authentication values</li> <li>Custom exception class <code>ZCX_LLM_AUTHORIZATION</code></li> </ul>"},{"location":"Claude%203.5%20Haiku/ZLLM_PROVIDER_MAINTENANCE_PROG/#details","title":"Details","text":"<p>The report implements a comprehensive provider configuration management system with the following key features:</p> <pre><code>flowchart TD\n    A[User Interaction] --&gt; B{Action Selected}\n    B --&gt;|Add| C[Popup Input Form]\n    B --&gt;|Change| D[Select Existing Provider]\n    B --&gt;|Delete| E[Confirm Deletion]\n\n    C --&gt; F[Encrypt Auth Value]\n    D --&gt; G[Decrypt Existing Value]\n    E --&gt; H[Remove Provider Entry]\n\n    F --&gt; I[Save to Database]\n    G --&gt; I\n    H --&gt; I</code></pre> <p>Key technical aspects:</p> <ul> <li>Uses dynamic field catalog generation for ALV display</li> <li>Implements encryption/decryption of sensitive authentication values</li> <li>Supports multi-step input handling for provider configurations</li> <li>Provides error handling for encryption/decryption operations</li> </ul> <p>The application follows a typical ABAP MVP (Model-View-Presenter) pattern with:</p> <ul> <li>Data model in <code>provider_config</code> type</li> <li>View management in <code>lcl_screen</code></li> <li>Business logic in <code>lcl_app</code></li> </ul> <p>Encryption is dynamically retrieved via a Business Add-In (BADI) implementation, allowing flexible encryption strategies.</p>"},{"location":"Claude%203.5%20Haiku/Z_LLM_CLIENT_FUGR/","title":"Function Group Z_LLM_CLIENT","text":""},{"location":"Claude%203.5%20Haiku/FUGR/Z_LLM_CLIENT/TABLEFRAME_Z_LLM_CLIENT/","title":"Function Module TABLEFRAME_Z_LLM_CLIENT","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Haiku/FUGR/Z_LLM_CLIENT/TABLEFRAME_Z_LLM_CLIENT/#overview","title":"Overview","text":"<p>The function module <code>TABLEFRAME_Z_LLM_CLIENT</code> is a standard SAP view maintenance generator function designed to handle table frame operations for a custom client-related table. It appears to be an automatically generated function module used for managing view maintenance activities in an SAP ABAP system.</p>"},{"location":"Claude%203.5%20Haiku/FUGR/Z_LLM_CLIENT/TABLEFRAME_Z_LLM_CLIENT/#dependencies","title":"Dependencies","text":"<ul> <li>Standard SAP View Maintenance Framework</li> <li>Performs operations on predefined tables:</li> <li><code>X_HEADER</code></li> <li><code>X_NAMTAB</code></li> <li><code>DBA_SELLIST</code></li> <li><code>DPL_SELLIST</code></li> <li><code>EXCL_CUA_FUNCT</code></li> </ul>"},{"location":"Claude%203.5%20Haiku/FUGR/Z_LLM_CLIENT/TABLEFRAME_Z_LLM_CLIENT/#details","title":"Details","text":"<p>The function module utilizes the <code>PERFORM TABLEFRAME</code> statement, which is a standard SAP mechanism for view maintenance. It passes several key parameters:</p> <pre><code>graph TD\n    A[TABLEFRAME Function] --&gt; B[X_HEADER]\n    A --&gt; C[X_NAMTAB]\n    A --&gt; D[DBA_SELLIST]\n    A --&gt; E[DPL_SELLIST]\n    A --&gt; F[EXCL_CUA_FUNCT]\n    A --&gt; G{Additional Parameters}\n    G --&gt; H[CORR_NUMBER]\n    G --&gt; I[VIEW_ACTION]\n    G --&gt; J[VIEW_NAME]</code></pre> <p>Key characteristics:</p> <ul> <li>Automatically generated on 02.01.2025</li> <li>Part of view maintenance generator version #001407#</li> <li>Handles table frame operations for a custom table related to LLM (likely Large Language Model) client configuration</li> <li>Provides a standardized interface for view-based table maintenance in SAP</li> </ul> <p>The function is designed to be a generic handler for view-related operations, likely supporting standard CRUD (Create, Read, Update, Delete) actions on the associated table.</p>"},{"location":"Claude%203.5%20Haiku/FUGR/Z_LLM_CLIENT/TABLEPROC_Z_LLM_CLIENT/","title":"Function Module TABLEPROC_Z_LLM_CLIENT","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Haiku/FUGR/Z_LLM_CLIENT/TABLEPROC_Z_LLM_CLIENT/#overview","title":"Overview","text":"<p>The function module <code>TABLEPROC_Z_LLM_CLIENT</code> appears to be a generic table processing function generated on 02.01.2025. Its primary purpose seems to be executing a standard table procedure through the <code>TABLEPROC</code> perform, which suggests it is likely part of a generated view maintenance or table management framework.</p>"},{"location":"Claude%203.5%20Haiku/FUGR/Z_LLM_CLIENT/TABLEPROC_Z_LLM_CLIENT/#dependencies","title":"Dependencies","text":"<p>No explicit dependencies are visible from the provided source code snippet. The function relies on a perform routine <code>TABLEPROC</code>, which is likely defined in a common include or standard SAP library.</p>"},{"location":"Claude%203.5%20Haiku/FUGR/Z_LLM_CLIENT/TABLEPROC_Z_LLM_CLIENT/#details","title":"Details","text":"<p>The function module is extremely minimal, containing only a single perform call to <code>TABLEPROC</code>. This suggests it is:</p> <ul> <li>Likely part of an automated code generation process</li> <li>Probably a wrapper or standardized entry point for table-related operations</li> <li>Potentially used in view maintenance or data management scenarios for a client-related table (Z_LLM_CLIENT)</li> </ul> <p>The generation timestamp and version number (#001407#) indicate this is a systematically created function module, possibly generated by a view maintenance tool or custom development framework in SAP.</p> <pre><code>flowchart TD\n    A[TABLEPROC_Z_LLM_CLIENT Function Module] --&gt; B[TABLEPROC Perform]\n    B --&gt; C{Table Processing Logic}</code></pre> <p>Without additional context from the common includes, the exact nature of the table processing cannot be definitively determined, but it appears to be a standardized approach to handling table-related operations.</p>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_ANTHROPIC/","title":"Package ZLLM_CLIENT_ANTHROPIC","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_ANTHROPIC/#overview","title":"Overview","text":"<p>The development package focuses on creating a comprehensive AI integration framework within SAP ABAP, specifically targeting language model interactions. The solution provides a modular and extensible approach to connecting with advanced AI services, with an initial implementation centered on Anthropic's Claude AI platform.</p>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_ANTHROPIC/#technical-architecture","title":"Technical Architecture","text":"<p>The package implements a robust client-side architecture for AI API interactions, featuring specialized classes that handle authentication, request management, response processing, and error handling. The design emphasizes configurability, allowing seamless integration of AI capabilities into SAP business processes while maintaining enterprise-grade security and performance standards.</p>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_ANTHROPIC/#key-capabilities","title":"Key Capabilities","text":"<ul> <li>Secure API communication with language model providers</li> <li>Configurable request and response handling</li> <li>Support for complex chat interactions</li> <li>Error management and logging mechanisms</li> <li>Flexible implementation allowing future AI service expansions</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_ANTHROPIC/#design-principles","title":"Design Principles","text":"<p>The package is engineered with a focus on:</p> <ul> <li>Modularity</li> <li>Extensibility</li> <li>Enterprise-level integration</li> <li>Abstraction of complex AI communication protocols</li> <li>Minimal performance overhead</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_ANTHROPIC/#potential-use-cases","title":"Potential Use Cases","text":"<ul> <li>Intelligent document processing</li> <li>Automated customer support</li> <li>Business process augmentation</li> <li>Data interpretation and summarization</li> <li>Contextual decision support systems</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_ANTHROPIC/ZCL_LLM_CLIENT_ANTHROPIC_CLAS/","title":"Class ZCL_LLM_CLIENT_ANTHROPIC","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_ANTHROPIC/ZCL_LLM_CLIENT_ANTHROPIC_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_client_anthropic</code> class is a specialized ABAP implementation for interacting with Anthropic's Language Model (LLM) API. It inherits from a base LLM client class and provides specific implementation for Anthropic's chat message handling, authentication, and request/response processing. The class supports:</p> <ul> <li>Creating LLM client instances</li> <li>Constructing chat requests</li> <li>Handling authentication</li> <li>Processing API responses</li> <li>Supporting tool calls and message parsing</li> </ul> <p>Key public methods:</p> <ul> <li><code>get_client()</code>: Static method to create a new Anthropic LLM client instance</li> <li><code>constructor()</code>: Initializes the client with configuration</li> <li><code>new_request()</code>: Overrides base method to set Anthropic-specific request parameters</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_ANTHROPIC/ZCL_LLM_CLIENT_ANTHROPIC_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li><code>zcl_llm_client_base</code>: Base LLM client class</li> <li><code>zcl_llm_http_client_wrapper</code>: HTTP client wrapper</li> <li><code>zcl_llm_common</code>: Utility class for JSON processing</li> <li>BADI implementation for authentication encryption</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_ANTHROPIC/ZCL_LLM_CLIENT_ANTHROPIC_CLAS/#details","title":"Details","text":"<p>The class implements several key methods to adapt to Anthropic's specific API requirements:</p> <pre><code>graph TD\n    A[Client Configuration] --&gt; B[HTTP Client Setup]\n    B --&gt; C[Authentication]\n    C --&gt; D[Request JSON Construction]\n    D --&gt; E[API Request]\n    E --&gt; F[Response Parsing]\n    F --&gt; G[Tool Call Handling]</code></pre> <p>Key implementation details:</p> <ul> <li>Handles system and non-system messages differently</li> <li>Supports tool calls with dynamic tool definition</li> <li>Manages Anthropic-specific message and response structures</li> <li>Implements custom JSON request building</li> <li>Handles authentication via API key</li> <li>Provides error handling and token usage tracking</li> </ul> <p>Notable technical aspects:</p> <ul> <li>Uses custom types for Anthropic-specific message and response structures</li> <li>Supports max tokens configuration (8192 for current models)</li> <li>Handles tool calls and results mapping</li> <li>Provides flexible authentication mechanism with optional encryption</li> </ul> <p>The implementation demonstrates a robust, extensible approach to integrating with the Anthropic LLM API, allowing for flexible chat interactions and tool usage within the SAP ABAP environment.</p>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_AZUREOAI/","title":"Package ZLLM_CLIENT_AZUREOAI","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_AZUREOAI/#overview","title":"Overview","text":"<p>The ABAP development package focuses on providing a robust, enterprise-grade implementation for interacting with Azure OpenAI's Large Language Model (LLM) services. The package enables SAP developers to seamlessly integrate advanced AI-driven language processing capabilities directly within their ABAP applications, with a strong emphasis on structured communication, authentication, and response handling.</p>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_AZUREOAI/#technical-architecture","title":"Technical Architecture","text":"<p>The package is designed with a modular approach, featuring specialized classes that handle different aspects of Azure OpenAI integration:</p> <ul> <li>Client connection management</li> <li>Authentication handling</li> <li>JSON schema generation</li> <li>Structured response processing</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_AZUREOAI/#key-capabilities","title":"Key Capabilities","text":"<ul> <li>Secure connection to Azure OpenAI endpoints</li> <li>Dynamic JSON schema generation for AI responses</li> <li>Flexible configuration for different AI interaction scenarios</li> <li>Enterprise-grade error handling and authentication mechanisms</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_AZUREOAI/#use-cases","title":"Use Cases","text":"<p>Typical applications include:</p> <ul> <li>Intelligent text generation</li> <li>Automated response parsing</li> <li>AI-assisted business process automation</li> <li>Natural language processing within SAP systems</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_AZUREOAI/#design-principles","title":"Design Principles","text":"<ul> <li>Modular and extensible class design</li> <li>Strong type safety</li> <li>Separation of concerns</li> <li>Adherence to SAP ABAP best practices for enterprise software development</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_CLIENT_AZUREOAI_CLAS/","title":"Class ZCL_LLM_CLIENT_AZUREOAI","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_CLIENT_AZUREOAI_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_client_azureoai</code> is a specialized ABAP class for interacting with Azure OpenAI services. It is a concrete implementation of an LLM (Large Language Model) client, inheriting from a base client class and implementing specific Azure OpenAI authentication and communication methods.</p> <p>Key public methods:</p> <ul> <li><code>get_client()</code>: A factory method to create a new Azure OpenAI client instance</li> <li><code>constructor()</code>: Initializes the client with configuration parameters</li> </ul> <p>The class is designed with a private constructor, enforcing controlled instantiation through the <code>get_client()</code> method.</p>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_CLIENT_AZUREOAI_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li><code>zcl_llm_http_client_wrapper</code>: For HTTP client creation</li> <li><code>zcl_llm_common</code>: For accessing LLM Business Add-In (BADI)</li> <li><code>zcx_llm_validation</code> and <code>zcx_llm_authorization</code>: Custom exception classes</li> <li>Encryption implementation for handling encrypted authentication</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_CLIENT_AZUREOAI_CLAS/#details","title":"Details","text":"<p>The class implements several key methods to customize Azure OpenAI interaction:</p> <pre><code>classDiagram\n    class zcl_llm_client_azureoai {\n        +get_client()\n        -get_http_client()\n        -set_auth()\n        -create_structured_output()\n        -get_chat_endpoint()\n    }\n    note \"Inherits from base LLM client\\nImplements Azure-specific methods\" as NoteA</code></pre> <p>Authentication mechanism highlights:</p> <ul> <li>Supports encrypted and non-encrypted authentication</li> <li>Uses BADI for decryption of sensitive credentials</li> <li>Sets API key in HTTP headers for authentication</li> </ul> <p>Endpoint configuration:</p> <ul> <li>Dynamic endpoint generation based on provider model</li> <li>Fixed API version (currently '2024-10-21')</li> <li>Constructs chat completion endpoint dynamically</li> </ul> <p>The class follows a strategy of dependency injection and configuration, allowing flexible setup of Azure OpenAI client instances with different configurations and authentication methods.</p>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_SO_JS_AZUREOAI_CLAS/","title":"Class ZCL_LLM_SO_JS_AZUREOAI","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_SO_JS_AZUREOAI_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_so_js_azureoai</code> is a specialized ABAP class for implementing JSON schema generation specific to Azure OpenAI. It inherits from a base JSON schema class (<code>zcl_llm_so_js</code>) and provides custom schema construction through method overrides. The class is designed as a final, public class with a focused implementation for Azure OpenAI response schema generation.</p>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_SO_JS_AZUREOAI_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li>Base class: <code>zcl_llm_so_js</code></li> </ul>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_SO_JS_AZUREOAI_CLAS/#details","title":"Details","text":"<p>The class modifies the JSON schema generation process through two key protected methods:</p> <ol> <li> <p><code>pre_schema()</code>:</p> </li> <li> <p>Initiates the schema construction</p> </li> <li>Adds a predefined JSON structure with a \"Response\" name and strict validation setting</li> <li> <p>Uses <code>append_to_schema()</code> method inherited from the base class</p> </li> <li> <p><code>post_schema()</code>:</p> </li> <li> <p>Closes the JSON schema structure by appending a closing curly brace</p> </li> </ol> <pre><code>classDiagram\n    zcl_llm_so_js &lt;|-- zcl_llm_so_js_azureoai\n    class zcl_llm_so_js_azureoai {\n        +pre_schema()\n        +post_schema()\n    }\n    note for zcl_llm_so_js_azureoai \"Specializes JSON schema \n    generation for Azure OpenAI\"</code></pre> <p>The implementation suggests a template method pattern where the base class provides the core schema generation logic, and this subclass customizes specific aspects of schema construction for Azure OpenAI's specific requirements.</p>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_OLLAMA/","title":"Package ZLLM_CLIENT_OLLAMA","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_OLLAMA/#overview","title":"Overview","text":"<p>The ABAP development package centered around the Ollama Large Language Model (LLM) client provides a comprehensive solution for integrating advanced AI-powered language processing capabilities directly into SAP systems. The package enables seamless communication with the Ollama API, allowing developers to leverage generative AI functionalities within ABAP applications.</p>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_OLLAMA/#key-features","title":"Key Features","text":"<p>The package offers a robust implementation for interacting with Ollama's LLM services, featuring:</p> <ul> <li>Flexible API communication and authentication</li> <li>Generative text processing capabilities</li> <li>Error handling and response management</li> <li>Configurable LLM interactions across different SAP contexts</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_OLLAMA/#technical-architecture","title":"Technical Architecture","text":"<pre><code>graph TD\n    A[ZCL_LLM_CLIENT_OLLAMA] --&gt; B[HTTP Communication]\n    A --&gt; C[Request/Response Handling]\n    A --&gt; D[Configuration Management]\n    B --&gt; E[Ollama API Endpoint]</code></pre> <p>The architecture is designed to provide a clean, abstracted interface for consuming LLM services while maintaining SAP ABAP best practices for enterprise software integration.</p>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_OLLAMA/#use-cases","title":"Use Cases","text":"<ul> <li>Intelligent text generation</li> <li>Automated content creation</li> <li>Natural language processing tasks</li> <li>AI-assisted business logic enhancement</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_OLLAMA/#technical-considerations","title":"Technical Considerations","text":"<p>The implementation focuses on secure, performant integration with external AI services, ensuring enterprise-grade reliability and maintainability within the SAP ecosystem.</p>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_OLLAMA/ZCL_LLM_CLIENT_OLLAMA_CLAS/","title":"Class ZCL_LLM_CLIENT_OLLAMA","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_OLLAMA/ZCL_LLM_CLIENT_OLLAMA_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_client_ollama</code> is a specialized ABAP class for interacting with the Ollama Large Language Model (LLM) provider. It inherits from a base LLM client class and implements provider-specific methods for communication with the Ollama API. The class supports:</p> <ul> <li>Creating an Ollama client instance</li> <li>Handling authentication</li> <li>Building JSON requests</li> <li>Processing HTTP responses</li> <li>Supporting structured output and tool calls</li> </ul> <p>Key public methods:</p> <ul> <li><code>get_client()</code>: Static method to create a new Ollama client instance</li> <li><code>constructor()</code>: Initializes the client with configuration</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_OLLAMA/ZCL_LLM_CLIENT_OLLAMA_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li><code>zcl_llm_http_client_wrapper</code>: HTTP client creation</li> <li><code>zcl_llm_common</code>: Utility methods for JSON handling</li> <li><code>zif_llm_client</code>: Client interface</li> <li><code>zif_llm_chat_request</code>: Chat request interface</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_OLLAMA/ZCL_LLM_CLIENT_OLLAMA_CLAS/#details","title":"Details","text":"<p>The class implements several specialized methods to adapt the generic LLM client to Ollama's specific API requirements:</p> <pre><code>graph TD\n    A[Client Configuration] --&gt; B[Constructor]\n    B --&gt; C{Authentication}\n    C --&gt; |Optional API Key| D[Set Custom Headers]\n    B --&gt; E[HTTP Client Creation]\n    E --&gt; F[Chat Endpoint Setup]\n    F --&gt; G[Request JSON Building]\n    G --&gt; H[HTTP Request Sending]\n    H --&gt; I[Response Handling]\n    I --&gt; J{Structured Output?}\n    J --&gt; |Yes| K[Parse Structured Response]\n    I --&gt; L{Tool Calls?}\n    L --&gt; |Yes| M[Parse Tool Calls]</code></pre> <p>Key implementation details:</p> <ul> <li>Supports optional API key authentication via custom headers</li> <li>Handles Ollama-specific JSON request formatting</li> <li>Manages structured output requests</li> <li>Processes tool calls with dynamic parsing</li> <li>Provides error handling for HTTP responses and tool call parsing</li> </ul> <p>The class is designed to be flexible, supporting various Ollama API configurations while maintaining a consistent interface with the base LLM client class.</p>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_OPENAI/","title":"Package ZLLM_CLIENT_OPENAI","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_OPENAI/#overview","title":"Overview","text":"<p>The ABAP development package focuses on creating a robust, standardized framework for integrating Large Language Model (LLM) capabilities, specifically targeting OpenAI's API, within SAP systems. The package provides specialized classes that abstract complex API interactions, authentication, and JSON schema generation, enabling developers to seamlessly incorporate advanced AI-driven language processing functionalities into their SAP applications.</p>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_OPENAI/#key-features","title":"Key Features","text":"<ul> <li>Standardized OpenAI client configuration and authentication</li> <li>Flexible JSON schema generation for structured AI responses</li> <li>Modular design supporting extensible AI integration</li> <li>Encapsulation of complex API interaction logic</li> <li>Support for custom pre and post-processing of AI-generated content</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_OPENAI/#technical-architecture","title":"Technical Architecture","text":"<p>The package leverages object-oriented ABAP principles to create a clean, maintainable interface for AI service integration. By separating concerns between client configuration, JSON schema management, and API interaction, the solution provides a scalable approach to implementing AI-powered features in enterprise SAP environments.</p>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_OPENAI/#use-cases","title":"Use Cases","text":"<ul> <li>Intelligent document processing</li> <li>Automated text generation and transformation</li> <li>Natural language query processing</li> <li>AI-assisted business workflow enhancement</li> <li>Intelligent data interpretation and summarization</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_OPENAI/#implementation-strategy","title":"Implementation Strategy","text":"<p>Utilizes a layered approach with specialized classes that can be easily extended or customized to meet specific organizational AI integration requirements, ensuring flexibility and adaptability in enterprise AI implementations.</p>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_OPENAI/ZCL_LLM_CLIENT_OPENAI_CLAS/","title":"Class ZCL_LLM_CLIENT_OPENAI","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_OPENAI/ZCL_LLM_CLIENT_OPENAI_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_client_openai</code> class is a specialized implementation for interacting with OpenAI's language model API. It is a concrete implementation of a language model client, designed to handle authentication, endpoint configuration, and client creation for OpenAI's chat completion services. The class follows a singleton-like pattern with a private constructor and a class method <code>get_client()</code> for obtaining instances.</p> <p>Public methods include:</p> <ul> <li><code>get_client()</code>: Static method to create and return a new client instance</li> <li><code>constructor()</code>: Initializes the client with configuration parameters</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_OPENAI/ZCL_LLM_CLIENT_OPENAI_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li><code>zcl_llm_client_base</code>: Base class for language model clients</li> <li><code>zcl_llm_common</code>: Utility class for retrieving BADIs</li> <li><code>zcl_llm_http_client_wrapper</code>: HTTP client creation utility</li> <li><code>zcl_llm_so_js_oa</code>: Structured output handler for OpenAI responses</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_OPENAI/ZCL_LLM_CLIENT_OPENAI_CLAS/#details","title":"Details","text":"<p>The class implements several key protected methods to customize the OpenAI client behavior:</p> <pre><code>classDiagram\n    class zcl_llm_client_openai {\n        +get_client()\n        -get_chat_endpoint()\n        -set_auth()\n        -create_structured_output()\n        -get_http_client()\n    }\n    note \"Overrides base class methods\\nto provide OpenAI-specific implementation\" as NoteOverride</code></pre> <p>Key implementation details:</p> <ul> <li>Authentication is handled by decrypting an encrypted token if provided</li> <li>Uses a Bearer token authentication method</li> <li>Hardcoded chat completion endpoint <code>/chat/completions</code></li> <li>Utilizes a factory method pattern for client creation</li> <li>Supports configuration through <code>client_config</code> and <code>provider_config</code> parameters</li> </ul> <p>The class is designed to be extensible and configurable, allowing different authentication and client setup scenarios while maintaining a consistent interface for language model interactions.</p>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_OPENAI/ZCL_LLM_SO_JS_OA_CLAS/","title":"Class ZCL_LLM_SO_JS_OA","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_OPENAI/ZCL_LLM_SO_JS_OA_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_so_js_oa</code> class is a specialized implementation for OpenAI JSON Schema generation. It inherits from the base class <code>zcl_llm_so_js</code> and provides custom schema construction logic through two protected methods: <code>pre_schema</code> and <code>post_schema</code>. The class is final and publicly creatable, indicating it's a specific implementation for OpenAI-related JSON schema generation.</p>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_OPENAI/ZCL_LLM_SO_JS_OA_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li>Base class: <code>zcl_llm_so_js</code></li> </ul>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_OPENAI/ZCL_LLM_SO_JS_OA_CLAS/#details","title":"Details","text":"<p>The class extends the base JSON schema generation class with two key method overrides:</p>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_OPENAI/ZCL_LLM_SO_JS_OA_CLAS/#pre_schema-method","title":"pre_schema Method","text":"<ul> <li>Adds the initial JSON schema structure</li> <li> <p>Appends a predefined JSON fragment with:</p> </li> <li> <p>Name set to \"Response\"</p> </li> <li>Strict mode enabled</li> <li>Starts the schema definition</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_OPENAI/ZCL_LLM_SO_JS_OA_CLAS/#post_schema-method","title":"post_schema Method","text":"<ul> <li>Closes the JSON schema structure</li> <li>Appends a closing curly brace to complete the schema</li> </ul> <pre><code>stateDiagram-v2\n    [*] --&gt; pre_schema: Starts schema generation\n    pre_schema --&gt; append_initial_structure\n    append_initial_structure --&gt; post_schema\n    post_schema --&gt; close_schema\n    close_schema --&gt; [*]</code></pre> <p>The implementation suggests a template method pattern where the base class provides the overall schema generation framework, and this specific implementation adds OpenAI-specific schema construction logic.</p>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_OPENROUTER/","title":"Package ZLLM_CLIENT_OPENROUTER","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_OPENROUTER/#overview","title":"Overview","text":"<p>The ABAP development package focuses on creating robust, specialized clients for interacting with AI language model services, specifically targeting OpenRouter's AI platform. The package provides sophisticated mechanisms for managing API interactions, including secure authentication, flexible request handling, and structured JSON response generation.</p>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_OPENROUTER/#key-features","title":"Key Features","text":"<p>The package delivers advanced capabilities for AI service integration, emphasizing:</p> <ul> <li>Secure and configurable API client implementation</li> <li>Custom authentication and header management</li> <li>Structured JSON response schema generation</li> <li>Extensible design for AI service interactions</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_OPENROUTER/#technical-architecture","title":"Technical Architecture","text":"<p>Leveraging object-oriented ABAP principles, the package implements specialized classes that abstract complex API communication patterns. The design focuses on modularity, allowing easy configuration and extension of AI service integrations.</p>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_OPENROUTER/#use-cases","title":"Use Cases","text":"<p>Primarily designed for enterprise scenarios requiring:</p> <ul> <li>Controlled AI service interactions</li> <li>Standardized JSON response handling</li> <li>Flexible AI model communication</li> <li>Secure and configurable API client implementations</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_OPENROUTER/#design-principles","title":"Design Principles","text":"<ul> <li>Separation of concerns</li> <li>Secure authentication mechanisms</li> <li>Flexible configuration</li> <li>Extensible class hierarchies</li> <li>Precise JSON schema management</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_OPENROUTER/#potential-integration-scenarios","title":"Potential Integration Scenarios","text":"<ul> <li>Enterprise AI service consumption</li> <li>Controlled language model interactions</li> <li>Standardized AI response processing</li> <li>Custom AI model integration frameworks</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_CLIENT_OPENROUTER_CLAS/","title":"Class ZCL_LLM_CLIENT_OPENROUTER","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_CLIENT_OPENROUTER_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_client_openrouter</code> is a specialized ABAP class for interacting with the OpenRouter AI service. It inherits from a base LLM client class and provides implementation-specific methods for authentication, HTTP client configuration, and chat endpoint management. The class is designed to be created privately and accessed through the <code>get_client</code> class method, ensuring controlled instantiation.</p> <p>Public methods include:</p> <ul> <li><code>get_client()</code>: Static method to create and return an instance of the OpenRouter LLM client</li> <li><code>constructor()</code>: Initializes the client with configuration parameters</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_CLIENT_OPENROUTER_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li><code>zcl_llm_client_base</code>: Base class for LLM clients</li> <li><code>zcl_llm_http_client_wrapper</code>: HTTP client wrapper for network communication</li> <li><code>zcl_llm_common</code>: Utility class for common LLM operations</li> <li>BADI implementation for encryption</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_CLIENT_OPENROUTER_CLAS/#details","title":"Details","text":"<p>The class implements several key methods to customize OpenRouter-specific interactions:</p> <pre><code>classDiagram\n    zcl_llm_client_base &lt;|-- zcl_llm_client_openrouter\n    class zcl_llm_client_openrouter {\n        +get_client()\n        -get_http_client()\n        -get_chat_endpoint()\n        -set_auth()\n        -create_structured_output()\n    }</code></pre> <p>Key implementation details:</p> <ul> <li>Adds custom HTTP headers for OpenRouter tracking (<code>HTTP-Referer</code> and <code>X-Title</code>)</li> <li>Supports encrypted authentication through a BADI encryption implementation</li> <li>Uses a Bearer token for authorization</li> <li>Creates a custom structured output object specific to OpenRouter responses</li> </ul> <p>Authentication flow:</p> <ol> <li>Decrypt authentication token if encrypted</li> <li>Set Authorization header with Bearer token</li> <li>Configure HTTP client with specific OpenRouter headers</li> </ol> <p>The class follows a strategy of encapsulating provider-specific logic while maintaining a consistent interface through the base LLM client class.</p>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_SO_JS_OR_CLAS/","title":"Class ZCL_LLM_SO_JS_OR","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_SO_JS_OR_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_so_js_or</code> is a specialized ABAP class that extends the base class <code>zcl_llm_so_js</code>. It is designed to handle JSON schema generation with a specific focus on creating a strict \"Response\" schema. The class is final and publicly creatable, indicating it's intended for direct use without further inheritance.</p> <p>The class provides two key method overrides:</p> <ul> <li><code>pre_schema()</code>: Initiates the schema generation by appending the \"Response\" schema definition</li> <li><code>post_schema()</code>: Closes the schema definition by appending a closing bracket</li> </ul>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_SO_JS_OR_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li>Parent Class: <code>zcl_llm_so_js</code></li> </ul>"},{"location":"Claude%203.5%20Haiku/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_SO_JS_OR_CLAS/#details","title":"Details","text":"<p>The class appears to be part of a JSON schema generation framework, with specific customization for response schema creation.</p> <pre><code>graph LR\n    A[pre_schema] --&gt; B{Append Response Schema Start}\n    B --&gt; |Adds| C[\"name\":\"Response\",\"strict\":true,\"schema\":{]\n    D[post_schema] --&gt; E{Close Schema}\n    E --&gt; |Adds| F[}]</code></pre> <p>Key characteristics:</p> <ul> <li>Uses method chaining via <code>append_to_schema()</code> (inherited from parent class)</li> <li>Creates a strict JSON schema for responses</li> <li>Provides a template for response schema generation with minimal configuration</li> </ul> <p>The implementation suggests a flexible, extensible approach to generating JSON schemas with predefined structural elements.</p>"},{"location":"Claude%203.5%20Sonnet/","title":"Package ZLLM_CLIENT","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Sonnet/#overview","title":"Overview","text":"<p>This ABAP package provides a comprehensive framework for integrating Large Language Models (LLMs) into SAP systems. It follows a modular design pattern with a provider-agnostic core that supports multiple LLM services through specialized client implementations.</p> <p>The framework offers:</p> <ul> <li>Standardized client interfaces for LLM communication with built-in support for chat completions and tool execution</li> <li>Secure provider configuration management with encrypted credentials</li> <li>Flexible authentication and authorization controls</li> <li>Comprehensive logging and statistics collection</li> <li>Template processing capabilities for dynamic text generation</li> <li>Structured output handling with JSON schema support</li> <li>Built-in tool implementations for common operations</li> <li>Error handling through specialized exception classes</li> </ul> <p>The architecture enables easy extension through client packages for different LLM providers (OpenAI, Azure OpenAI, Anthropic, Ollama, OpenRouter) while maintaining consistent interfaces and security standards. The implementation emphasizes maintainability, security, and enterprise-grade features like logging and monitoring.</p> <p>The framework is designed to be configuration-driven, allowing administrators to manage provider settings through a dedicated maintenance interface while developers can utilize a clean API for LLM interactions in their applications.</p>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_AUTH_DISABLED_CLAS/","title":"Class ZCL_LLM_AUTH_DISABLED","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_AUTH_DISABLED_CLAS/#overview","title":"Overview","text":"<p>The <code>ZCL_LLM_AUTH_DISABLED</code> class implements the <code>ZIF_LLM_AUTH</code> interface and provides a disabled authorization checker implementation. It contains four public methods that perform no authorization checks:</p> <ul> <li><code>CHECK_DECRYPT</code>: Allows decryption operations without restrictions</li> <li><code>CHECK_ENCRYPT</code>: Allows encryption operations without restrictions  </li> <li><code>CHECK_GET_CLIENT</code>: Allows client access without restrictions</li> <li><code>CHECK_PROVIDER_MAINTENANCE</code>: Allows provider maintenance operations without restrictions</li> </ul> <p>This implementation acts as a \"no-op\" authorization checker that permits all operations by default. It can be used in scenarios where authorization checks need to be bypassed or disabled.</p>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_AUTH_DISABLED_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li>Interface: <code>ZIF_LLM_AUTH</code></li> <li>Exception Class: <code>ZCX_LLM_AUTHORIZATION</code> (referenced but not raised)</li> <li>BAdI: <code>ZLLM_DEFAULTS</code> (referenced in comments for custom implementations)</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_AUTH_DISABLED_CLAS/#details","title":"Details","text":"<p>The class follows a simple implementation pattern where all authorization check methods are empty and do not perform any actual validation. This creates a permissive authorization environment.</p> <pre><code>classDiagram\n    class ZCL_LLM_AUTH_DISABLED {\n        +check_decrypt()\n        +check_encrypt()\n        +check_get_client()\n        +check_provider_maintenance()\n    }\n    class ZIF_LLM_AUTH {\n        &lt;&lt;interface&gt;&gt;\n        +check_decrypt()\n        +check_encrypt()\n        +check_get_client()\n        +check_provider_maintenance()\n    }\n    ZCL_LLM_AUTH_DISABLED ..|&gt; ZIF_LLM_AUTH : implements</code></pre> <p>The class is designed to be extensible through the ZLLM_DEFAULTS BAdI, where custom implementations can be registered to add actual authorization checks if needed. Each method contains a comment indicating that custom implementations should raise the ZCX_LLM_AUTHORIZATION exception when access is not allowed.</p>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_CALL_LOGGER_CLAS/","title":"Class ZCL_LLM_CALL_LOGGER","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_CALL_LOGGER_CLAS/#overview","title":"Overview","text":"<p>The <code>ZCL_LLM_CALL_LOGGER</code> class implements the <code>ZIF_LLM_CALL_LOGGER</code> interface and provides logging functionality for LLM (Large Language Model) calls. The class offers:</p> <ul> <li>Constructor that initializes the logging state based on system configuration</li> <li>Add method (via interface) to log LLM call entries</li> <li>Configurable logging activation based on system settings and user filters</li> </ul> <p>Public methods:</p> <ul> <li><code>CONSTRUCTOR</code>: Initializes the logger</li> <li><code>ZIF_LLM_CALL_LOGGER~ADD</code>: Adds a log entry if logging is active</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_CALL_LOGGER_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li>Database table <code>ZLLM_CALL_LOG</code>: Stores the actual log entries</li> <li>Database table <code>ZLLM_SYSTEM</code>: Contains system configuration for logging</li> <li>Interface <code>ZIF_LLM_CALL_LOGGER</code>: Defines the logging contract</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_CALL_LOGGER_CLAS/#details","title":"Details","text":"<p>The class implements a conditional logging mechanism with two main decision points:</p> <pre><code>flowchart TD\n    A[Constructor] --&gt; B{Check System Settings}\n    B --&gt;|save_calls = true| C{Check User Filter}\n    B --&gt;|save_calls = false| D[Set Inactive]\n    C --&gt;|Filter matches| E[Set Active]\n    C --&gt;|Filter fails| D\n\n    F[Add Entry] --&gt; G{Logger Active?}\n    G --&gt;|Yes| H[Insert Log Entry]\n    G --&gt;|No| I[Return]</code></pre> <p>Key implementation aspects:</p> <ul> <li>The logger's active state is determined once during instantiation</li> <li>User filtering supports wildcard (*) for all users or specific username matching</li> <li>Log entries are only written if the logger is active, providing performance optimization</li> <li>The implementation uses database tables for both configuration and storage</li> <li>The design follows a fail-fast pattern in the add method to minimize overhead when logging is disabled</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_CHAT_REQUEST_CLAS/","title":"Class ZCL_LLM_CHAT_REQUEST","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_CHAT_REQUEST_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_chat_request</code> class implements the <code>zif_llm_chat_request</code> interface and manages chat requests for a language learning model (LLM) system. It provides functionality to:</p> <ul> <li>Manage messages (add, clear, retrieve)</li> <li>Handle tools and tool results</li> <li>Configure structured output settings</li> <li>Manage tool choices</li> </ul> <p>Key public methods:</p> <ul> <li><code>add_message/add_messages</code>: Add single or multiple messages to the request</li> <li><code>add_tool/add_tools</code>: Add single or multiple tools with optional tool choice settings</li> <li><code>add_tool_result</code>: Convert tool results to messages</li> <li><code>set_structured_output</code>: Configure structured output schema and settings</li> <li><code>get_internal_request</code>: Retrieve the internal request state</li> <li><code>clear_messages/clear_tools</code>: Reset message or tool collections</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_CHAT_REQUEST_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li><code>zif_llm_chat_request</code>: Interface implemented by this class</li> <li><code>zif_llm_client</code>: Interface providing role definitions</li> <li><code>zcl_llm_common</code>: Utility class for JSON conversion</li> <li><code>zllm_request</code>: Structure type for internal request state</li> <li><code>zllm_msg</code>: Structure type for messages</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_CHAT_REQUEST_CLAS/#details","title":"Details","text":"<p>The class follows a stateful design pattern where the internal request state is maintained throughout the object's lifecycle. The interaction flow can be visualized as follows:</p> <pre><code>graph TD\n    A[Client] --&gt;|Constructor| B[Initialize Request]\n    B --&gt; C[Message Management]\n    B --&gt; D[Tool Management]\n    B --&gt; E[Structured Output]\n\n    C --&gt;|add_message/add_messages| F[Message Collection]\n    C --&gt;|clear_messages| F\n\n    D --&gt;|add_tool/add_tools| G[Tool Collection]\n    D --&gt;|add_tool_result| F\n    D --&gt;|clear_tools| G\n\n    E --&gt;|set_structured_output| H[Output Configuration]\n    E --&gt;|set_structured_output_active| H\n\n    F --&gt; I[Internal Request State]\n    G --&gt; I\n    H --&gt; I</code></pre> <p>The class maintains separation of concerns between:</p> <ol> <li>Message handling (chat history, tool results)</li> <li>Tool management (available tools, tool choices)</li> <li>Structured output configuration</li> </ol> <p>All operations modify the internal <code>request</code> instance variable, which can be accessed via <code>get_internal_request</code>. The class acts as a facade, providing a simplified interface for managing complex chat request configurations.</p>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_CLIENT_BASE_CLAS/","title":"Class ZCL_LLM_CLIENT_BASE","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_CLIENT_BASE_CLAS/#overview","title":"Overview","text":"<p>The <code>ZCL_LLM_CLIENT_BASE</code> is an abstract base class for implementing Large Language Model (LLM) clients. It provides core functionality for:</p> <ul> <li>Managing LLM client configurations and provider settings</li> <li>Handling HTTP communication with LLM providers</li> <li>Processing chat requests and responses</li> <li>Supporting structured outputs and tool calls</li> <li>Collecting usage statistics</li> </ul> <p>Public methods:</p> <ul> <li><code>CONSTRUCTOR</code>: Initializes client with configuration and provider settings</li> <li><code>CHAT</code>: Executes chat requests to the LLM provider</li> <li><code>NEW_REQUEST</code>: Creates a new chat request with default parameters</li> <li><code>GET_CLIENT</code>: Factory method to instantiate specific provider clients</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_CLIENT_BASE_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li><code>ZIF_LLM_CLIENT</code>: Interface defining LLM client contract</li> <li><code>ZIF_LLM_HTTP_CLIENT_WRAPPER</code>: Interface for HTTP communication</li> <li><code>ZIF_LLM_TOOL_PARSER</code>: Interface for parsing tool definitions</li> <li><code>ZIF_LLM_STATISTICS</code>: Interface for usage statistics collection</li> <li><code>ZCL_LLM_TOOL_PARSER</code>: Implementation of tool parsing</li> <li><code>ZCL_LLM_COMMON</code>: Utility class for JSON handling</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_CLIENT_BASE_CLAS/#details","title":"Details","text":"<p>The class implements a template pattern where provider-specific implementations must implement abstract methods:</p> <ul> <li><code>GET_HTTP_CLIENT</code></li> <li><code>SET_AUTH</code></li> <li><code>GET_CHAT_ENDPOINT</code></li> </ul> <p>The chat request flow:</p> <pre><code>sequenceDiagram\n    participant Client as LLM Client\n    participant Base as LLM Client Base\n    participant HTTP as HTTP Client\n    participant Provider as LLM Provider\n\n    Client-&gt;&gt;Base: CHAT\n    Base-&gt;&gt;Base: build_request_json\n    Base-&gt;&gt;HTTP: communicate\n    HTTP-&gt;&gt;Provider: HTTP POST\n    Provider--&gt;&gt;HTTP: Response\n    Base-&gt;&gt;Base: handle_http_response\n    Base-&gt;&gt;Base: parse_structured_output\n    Base-&gt;&gt;Base: handle_tool_calls\n    Base--&gt;&gt;Client: Response</code></pre> <p>Key features:</p> <ul> <li>Supports structured JSON output schemas</li> <li>Handles tool definitions and calls</li> <li>Provides error handling and retry logic</li> <li>Collects usage statistics per request</li> <li>Manages authentication and endpoints</li> <li>Supports custom provider configurations</li> </ul> <p>The class uses a modular design allowing different providers to be implemented while reusing common functionality for request/response handling, tool management and statistics collection.</p>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_COMMON_CLAS/","title":"Class ZCL_LLM_COMMON","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_COMMON_CLAS/#overview","title":"Overview","text":"<p>The <code>ZCL_LLM_COMMON</code> class provides utility methods for JSON serialization/deserialization and LLM (Language Learning Model) BADI handling. The class offers three main public methods:</p> <ul> <li><code>TO_JSON</code>: Converts ABAP data structures to JSON strings with optional compression</li> <li><code>FROM_JSON</code>: Deserializes JSON strings back into ABAP data structures</li> <li><code>GET_LLM_BADI</code>: Returns a reference to the LLM implementation BADI</li> </ul> <p>The class uses class constructor initialization to set up the JSON implementation class and BADI handling.</p>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_COMMON_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li>BADI: <code>ZLLM_IMPLEMENTATION</code> - Used for LLM implementation handling</li> <li>Dynamic JSON class (determined via BADI) - Used for JSON serialization/deserialization</li> <li><code>/UI2/CL_JSON</code> - Used for JSON pretty printing configuration</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_COMMON_CLAS/#details","title":"Details","text":"<p>The class implements a flexible architecture that allows switching JSON implementations through a BADI mechanism. The initialization flow and runtime interactions can be visualized as follows:</p> <pre><code>sequenceDiagram\n    participant App as Application\n    participant ZCL as ZCL_LLM_COMMON\n    participant BADI as LLM_BADI\n    participant JSON as Dynamic JSON Class\n\n    Note over ZCL: class_constructor\n    ZCL-&gt;&gt;BADI: GET BADI llm_badi\n    ZCL-&gt;&gt;BADI: get_json_impl()\n    BADI--&gt;&gt;ZCL: json_class name\n\n    Note over ZCL: Runtime\n    App-&gt;&gt;ZCL: to_json(data)\n    ZCL-&gt;&gt;JSON: serialize(data)\n    JSON--&gt;&gt;ZCL: JSON string\n    ZCL--&gt;&gt;App: result\n\n    App-&gt;&gt;ZCL: from_json(json)\n    ZCL-&gt;&gt;JSON: deserialize(json)\n    JSON--&gt;&gt;ZCL: ABAP data\n    ZCL--&gt;&gt;App: modified data structure</code></pre> <p>The class uses late binding to call the JSON implementation methods, allowing for flexibility in the actual JSON processing implementation. The JSON class name is stored in the private <code>json_class</code> attribute and is used for dynamic method calls. All JSON operations use lowercase property names (pretty_mode-low_case) for consistency.</p>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_DEFAULT_IMPL_CLAS/","title":"Class ZCL_LLM_DEFAULT_IMPL","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_DEFAULT_IMPL_CLAS/#overview","title":"Overview","text":"<p>The class <code>ZCL_LLM_DEFAULT_IMPL</code> serves as a default implementation provider for various LLM (Large Language Model) related functionalities. It implements the interfaces <code>IF_BADI_INTERFACE</code> and <code>ZIF_LLM_DEFAULT_IMPL</code>.</p> <p>Public methods:</p> <ul> <li><code>GET_ENCRYPTION_IMPL</code> - Returns encryption implementation</li> <li><code>GET_JSON_IMPL</code> - Returns JSON handling class name</li> <li><code>GET_CALL_LOGGER_IMPL</code> - Returns call logging implementation  </li> <li><code>GET_STATISTICS_IMPL</code> - Returns statistics implementation</li> <li><code>GET_AUTHORIZATION_IMPL</code> - Returns authorization implementation</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_DEFAULT_IMPL_CLAS/#dependencies","title":"Dependencies","text":"<p>The class depends on the following implementations:</p> <ul> <li><code>ZCL_LLM_ENCRYPTION</code></li> <li><code>ZCL_LLM_CALL_LOGGER</code></li> <li><code>ZCL_LLM_STATISTICS</code></li> <li><code>ZCL_LLM_AUTH_DISABLED</code></li> <li><code>/UI2/CL_JSON</code></li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_DEFAULT_IMPL_CLAS/#details","title":"Details","text":"<p>The class follows a singleton pattern for its dependencies, storing instances as static references. Each getter method checks if the corresponding instance exists and creates it if needed.</p> <pre><code>classDiagram\n    class ZCL_LLM_DEFAULT_IMPL {\n        +get_encryption_impl()\n        +get_json_impl()\n        +get_call_logger_impl() \n        +get_statistics_impl()\n        +get_authorization_impl()\n    }\n    ZCL_LLM_DEFAULT_IMPL ..&gt; ZCL_LLM_ENCRYPTION\n    ZCL_LLM_DEFAULT_IMPL ..&gt; ZCL_LLM_CALL_LOGGER\n    ZCL_LLM_DEFAULT_IMPL ..&gt; ZCL_LLM_STATISTICS  \n    ZCL_LLM_DEFAULT_IMPL ..&gt; ZCL_LLM_AUTH_DISABLED\n    ZCL_LLM_DEFAULT_IMPL ..&gt; /UI2/CL_JSON</code></pre> <p>The class acts as a central factory for LLM-related functionality implementations. All getter methods except <code>GET_JSON_IMPL</code> follow the same pattern of lazy initialization, creating instances only when first requested.</p>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_ENCRYPTION_CLAS/","title":"Class ZCL_LLM_ENCRYPTION","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_ENCRYPTION_CLAS/#overview","title":"Overview","text":"<p>The <code>ZCL_LLM_ENCRYPTION</code> class provides encryption and decryption functionality using SAP's Secure Store and Forward (SSF) infrastructure. It implements the <code>ZIF_LLM_ENCRYPTION</code> interface and offers two main public methods:</p> <ul> <li><code>ENCRYPT</code>: Encrypts a string input using SSF envelope encryption</li> <li><code>DECRYPT</code>: Decrypts previously encrypted data back to its original string form</li> </ul> <p>The class handles initialization of encryption certificates and profiles during class construction and supports processing of both small and large data volumes through chunked processing.</p>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_ENCRYPTION_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li><code>ZIF_LLM_ENCRYPTION</code>: Interface implemented by this class</li> <li><code>ZIF_LLM_AUTH</code>: Authorization interface for encryption/decryption checks</li> <li>SAP SSF Function Modules:</li> <li><code>SSF_KRN_ENVELOPE</code></li> <li><code>SSF_KRN_DEVELOPE</code></li> <li><code>SSFPSE_FILENAME</code></li> <li><code>SSFC_GET_CERTIFICATE</code></li> <li><code>SSFC_PARSE_CERTIFICATE</code></li> <li><code>ZCL_LLM_COMMON</code>: Factory class for BADI implementation</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_ENCRYPTION_CLAS/#details","title":"Details","text":"<p>The class implements a sophisticated encryption workflow using SAP's SSF infrastructure with several key aspects:</p> <pre><code>graph TD\n    A[Class Constructor] --&gt;|Initialize| B[Get Authorization Implementation]\n    A --&gt;|Setup| C[Get PSE Profile]\n    A --&gt;|Setup| D[Get Certificate]\n    A --&gt;|Setup| E[Parse Certificate]\n    F[Encrypt Method] --&gt;|Check| G[Authorization]\n    F --&gt;|Process| H[Convert to Binary]\n    H --&gt;|Chunk| I[255-byte chunks]\n    I --&gt;|Encrypt| J[SSF_KRN_ENVELOPE]\n    K[Decrypt Method] --&gt;|Check| L[Authorization]\n    K --&gt;|Process| M[Split encrypted data]\n    M --&gt;|Chunk| N[255-byte chunks]\n    N --&gt;|Decrypt| O[SSF_KRN_DEVELOPE]</code></pre> <p>Key implementation details:</p> <ul> <li>Uses chunked processing with 255-byte segments for handling large data volumes</li> <li>Implements error handling for various SSF infrastructure scenarios</li> <li>Maintains certificate and profile information in class-level variables</li> <li>Performs UTF-8 conversion for string handling</li> <li>Uses dependency injection for authorization checks through BADI pattern</li> <li>Implements symmetric encryption/decryption process ensuring data integrity</li> </ul> <p>The encryption process is secured through proper certificate handling and authorization checks before any operation. The class is designed to handle both small and large volumes of data efficiently through chunked processing, preventing memory issues with large strings.</p>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_FACTORY_CLAS/","title":"Class ZCL_LLM_FACTORY","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_FACTORY_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_factory</code> class serves as a factory for creating LLM (Large Language Model) clients. It implements the <code>zif_llm_factory</code> interface and provides a single public method <code>get_client</code> to instantiate LLM clients based on specified models. The class follows the factory pattern and handles validation of model and provider configurations while enforcing authorization checks.</p> <p>Key features:</p> <ul> <li>Singleton pattern implementation (private constructor)</li> <li>Model-based client instantiation</li> <li>Configuration validation</li> <li>Authorization checks</li> <li>Dynamic provider class instantiation</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_FACTORY_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li>Database Tables:</li> <li>ZLLM_CLNT_CONFIG: Stores client configurations</li> <li>ZLLM_PROVIDERS: Stores provider configurations</li> <li>Interfaces:</li> <li>zif_llm_factory: Factory interface</li> <li>zif_llm_auth: Authorization interface</li> <li>Classes:</li> <li>zcl_llm_common: Utility class for BADI handling</li> <li>zcx_llm_validation: Validation exception class</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_FACTORY_CLAS/#details","title":"Details","text":"<p>The class implements a sophisticated factory pattern with multiple validation and configuration layers.</p> <pre><code>flowchart TD\n    A[get_client] --&gt; B{Auth Check}\n    B --&gt;|Failed| C[Auth Exception]\n    B --&gt;|Passed| D{Check Model Config}\n    D --&gt;|Not Found| E[Model Validation Exception]\n    D --&gt;|Found| F{Check Provider Config}\n    F --&gt;|Not Found| G[Provider Validation Exception]\n    F --&gt;|Found| H[Dynamic Provider Instantiation]\n    H --&gt; I[Return Client Instance]</code></pre> <p>Key implementation aspects:</p> <ol> <li>Authorization Layer:</li> <li>Initialized during class construction via BADI</li> <li> <p>Performs pre-validation checks before client creation</p> </li> <li> <p>Configuration Validation:</p> </li> <li>Two-step validation process checking both model and provider</li> <li>Uses database tables for configuration storage</li> <li> <p>Throws specific validation exceptions for different error cases</p> </li> <li> <p>Dynamic Provider Instantiation:</p> </li> <li>Uses dynamic method calls to create provider-specific clients</li> <li>Passes both client and provider configurations to the instantiated class</li> <li>Allows for flexible provider implementation without factory modifications</li> </ol> <p>The class is designed to be extensible, allowing new providers to be added through configuration rather than code changes.</p>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_HTTP_CLIENT_WRAPPER_CLAS/","title":"Class ZCL_LLM_HTTP_CLIENT_WRAPPER","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_HTTP_CLIENT_WRAPPER_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_http_client_wrapper</code> class provides a wrapper for HTTP client functionality, specifically designed for LLM (Large Language Model) service communications. It encapsulates HTTP client handling, header management, and communication logging.</p> <p>Public methods:</p> <ul> <li><code>constructor</code>: Creates a new instance with client and provider configurations</li> <li><code>get_client</code>: Creates and returns a new HTTP client wrapper instance</li> <li><code>set_header</code>: Sets HTTP request headers</li> <li><code>set_url</code>: Sets the target URL for the request</li> <li><code>communicate</code>: Handles HTTP POST communication including request/response handling</li> <li><code>close_client</code>: Closes the HTTP client connection</li> </ul> <p>The class implements the <code>zif_llm_http_client_wrapper</code> interface and provides a standardized way to handle HTTP communications with LLM providers.</p>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_HTTP_CLIENT_WRAPPER_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li><code>if_http_client</code>: SAP standard HTTP client interface</li> <li><code>zcx_llm_validation</code>: Custom exception class for validation errors</li> <li><code>zcx_llm_http_error</code>: Custom exception class for HTTP errors</li> <li><code>zif_llm_call_logger</code>: Interface for logging LLM calls</li> <li><code>zllm_clnt_config</code>: Configuration structure for client settings</li> <li><code>zllm_providers</code>: Configuration structure for provider settings</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_HTTP_CLIENT_WRAPPER_CLAS/#details","title":"Details","text":"<p>The class implements a robust HTTP client wrapper with several key features:</p> <ol> <li>Session Management:</li> </ol> <pre><code>flowchart LR\n    A[Constructor] --&gt; B[Create HTTP Client]\n    B --&gt; C[Configure Client]\n    C --&gt; D[Set Headers]\n    D --&gt; E[Ready for Communication]\n    E --&gt; F[Close Client]</code></pre> <ol> <li>Communication Flow:</li> </ol> <pre><code>flowchart TD\n    A[communicate method] --&gt; B[Set POST Method]\n    B --&gt; C[Set Content-Type]\n    C --&gt; D{URL Set?}\n    D --&gt;|Yes| E[Set Request URI]\n    D --&gt;|No| F[Use Default URI]\n    E --&gt; G[Send Request]\n    F --&gt; G\n    G --&gt; H[Receive Response]\n    H --&gt; I[Log Call]\n    I --&gt; J[Reset Request if needed]</code></pre> <p>The class includes sophisticated error handling and logging mechanisms:</p> <ul> <li>HTTP communication failures are caught and transformed into specific exceptions</li> <li>All communications are logged through the call logger implementation</li> <li>Request headers are preserved between calls while maintaining security</li> <li>Response codes &gt;= 300 are handled with detailed error messages</li> <li>The class supports RFC destination-based communication configuration</li> </ul> <p>Special attention is given to maintaining state between requests by preserving non-SAP headers while cleaning up internal ones, making it suitable for stateful communications with LLM providers.</p>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_OPTIONS_CLAS/","title":"Class ZCL_LLM_OPTIONS","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_OPTIONS_CLAS/#overview","title":"Overview","text":"<p>The <code>ZCL_LLM_OPTIONS</code> class manages configuration parameters for Large Language Model interactions. It provides methods to set and validate various LLM parameters such as temperature, top-p sampling, penalties, and custom parameters. The class implements the <code>ZIF_LLM_OPTIONS</code> interface.</p> <p>Key public methods:</p> <ul> <li><code>SET_TEMPERATURE</code>: Controls randomness (0.0-2.0)</li> <li><code>SET_TOP_P</code>: Sets nucleus sampling parameter (0.0-1.0)</li> <li><code>SET_TOP_K</code>: Sets top-k sampling parameter (min 1)</li> <li><code>SET_SEED</code>: Sets random seed (min 0)</li> <li><code>SET_FREQUENCY_PENALTY</code>/<code>SET_PRESENCE_PENALTY</code>: Control repetition (-2.0 to 2.0)</li> <li><code>SET_MIN_P</code>: Sets minimum probability threshold (0.0-1.0)</li> <li><code>SET_TOP_A</code>: Sets top-a sampling parameter (0.0-1.0)</li> <li><code>SET_MAX_TOKENS</code>: Sets maximum output tokens (min 0)</li> <li><code>SET_CUSTOM_PARAMETERS</code>: Allows setting arbitrary key-value parameters</li> <li><code>GET_PARAMTERS</code>: Retrieves all stored parameters</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_OPTIONS_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li><code>ZCX_LLM_VALIDATION</code>: Exception class for parameter validation</li> <li><code>ZLLM_KEYVALUES</code>: Table type for storing key-value parameters</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_OPTIONS_CLAS/#details","title":"Details","text":"<p>The class follows a parameter validation and storage pattern:</p> <ol> <li>Each parameter setting method first validates the input</li> <li>If valid, the parameter is stored in the internal parameter table</li> <li>Custom parameters can override standard parameters</li> </ol> <pre><code>flowchart TD\n    A[Parameter Input] --&gt; B{Validate Range}\n    B --&gt;|Valid| C[Store Parameter]\n    B --&gt;|Invalid| D[Raise Exception]\n    C --&gt; E[Internal Parameter Table]\n    F[Custom Parameters] --&gt; G{Exists?}\n    G --&gt;|Yes| H[Update Value]\n    G --&gt;|No| I[Insert New]\n    H --&gt; E\n    I --&gt; E</code></pre> <p>The class uses two validation helper methods:</p> <ul> <li><code>VALIDATE_RANGE_FLOAT</code>: For decimal parameters with min/max bounds</li> <li><code>VALIDATE_RANGE_INT</code>: For integer parameters with min/optional max bounds</li> </ul> <p>All parameters are stored as strings in the internal table, with numeric values being converted during storage. This allows for a unified storage mechanism while maintaining type safety through the public interface.</p>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_SO_JS_CLAS/","title":"Class ZCL_LLM_SO_JS","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_SO_JS_CLAS/#overview","title":"Overview","text":"<p>The <code>ZCL_LLM_SO_JS</code> class implements a JSON Schema generator for ABAP data structures. It implements the <code>ZIF_LLM_SO</code> interface and provides functionality to:</p> <ol> <li>Convert ABAP data structures to JSON Schema format (<code>SET_SCHEMA</code>)</li> <li>Retrieve the generated JSON Schema (<code>GET_SCHEMA</code>)</li> <li>Access the data type descriptor (<code>GET_DATATYPE</code>)</li> </ol> <p>The class handles:</p> <ul> <li>Structure to JSON Schema conversion</li> <li>Table type conversion to array definitions</li> <li>Elementary type mapping (integers, floats, strings, booleans)</li> <li>Field descriptions and enumeration values</li> <li>Nested structure hierarchies</li> <li>Required field specifications</li> <li>Property naming and title generation</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_SO_JS_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li><code>ZIF_LLM_SO</code> interface</li> <li><code>ZCX_LLM_VALIDATION</code> exception class</li> <li>ABAP Type Description classes (<code>CL_ABAP_TYPEDESCR</code> and its subclasses)</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_SO_JS_CLAS/#details","title":"Details","text":"<p>The class follows a recursive processing pattern to handle nested ABAP structures. The main processing flow can be visualized as:</p> <pre><code>flowchart TD\n    A[SET_SCHEMA] --&gt; B{Check Type}\n    B --&gt;|Structure| C[Process Structure]\n    B --&gt;|Table| D[Process Table]\n    B --&gt;|Elementary| E[Process Element]\n    B --&gt;|Other| F[Raise Exception]\n\n    C --&gt; G[Process Components]\n    G --&gt; H{More Components?}\n    H --&gt;|Yes| G\n    H --&gt;|No| I[Generate Required Fields]\n\n    D --&gt; J[Process Table Line Type]\n    E --&gt; K[Map ABAP Type to JSON Type]\n\n    K --&gt; L[Add Descriptions]\n    L --&gt; M[Add Enumerations]</code></pre> <p>The class uses a protected field info structure to track:</p> <ul> <li>Field names</li> <li>Field paths for nested structures</li> <li>Field descriptions</li> </ul> <p>Key implementation aspects:</p> <ul> <li>Maintains case sensitivity handling through lowercase conversion</li> <li>Implements JSON Schema validation constraints</li> <li>Handles special cases for boolean fields</li> <li>Provides extension points through pre/post processing methods</li> <li>Generates proper JSON Schema syntax including commas and brackets</li> <li>Supports description escaping for JSON compatibility</li> <li>Implements strict schema validation with <code>additionalProperties: false</code></li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_STATISTICS_CLAS/","title":"Class ZCL_LLM_STATISTICS","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_STATISTICS_CLAS/#overview","title":"Overview","text":"<p>The <code>ZCL_LLM_STATISTICS</code> class provides functionality for collecting statistics data. It implements the <code>ZIF_LLM_STATISTICS</code> interface and offers:</p> <ul> <li><code>ADD</code>: Method to insert statistics records into table ZLLM_STATISTICS</li> <li>Statistics collection can be globally enabled/disabled via system settings</li> </ul> <p>The class automatically checks the active state during instantiation and prevents data collection when disabled.</p>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_STATISTICS_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li>Database Tables:</li> <li>ZLLM_STATISTICS: Statistics records storage</li> <li>ZLLM_SYSTEM: System configuration table</li> <li>Interface ZIF_LLM_STATISTICS</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_STATISTICS_CLAS/#details","title":"Details","text":"<p>The class follows a simple control flow for statistics collection:</p> <pre><code>flowchart TD\n    A[Constructor] --&gt; B[Read ZLLM_SYSTEM]\n    B --&gt; C[Set active flag]\n    D[ADD method] --&gt; E{Statistics active?}\n    E --&gt;|Yes| F[Insert record]\n    E --&gt;|No| G[Return]</code></pre> <p>The active flag serves as a global switch to prevent unnecessary database operations when statistics collection is disabled. This design allows for runtime control of statistics gathering without code changes.</p> <p>The class uses database table buffering and single record operations to optimize performance:</p> <ul> <li>Single read during instantiation</li> <li>Individual record inserts for statistics</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_TEMPLATE_PARSER_CLAS/","title":"Class ZCL_LLM_TEMPLATE_PARSER","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_TEMPLATE_PARSER_CLAS/#overview","title":"Overview","text":"<p>The <code>ZCL_LLM_TEMPLATE_PARSER</code> class implements a template engine based on a limited subset of Jinja2 syntax. It provides functionality to parse and render templates with variable substitution, conditional logic, and loops.</p> <p>Public Methods:</p> <ul> <li><code>CONSTRUCTOR</code>: Initializes an empty template collection</li> <li><code>ADD_TEMPLATE</code>: Adds or replaces a template with given name and content</li> <li><code>RENDER</code>: Renders a template using provided data context and returns the result</li> </ul> <p>Key Features:</p> <ul> <li>Variable substitution with nested path support (<code>{{variable.path}}</code>)</li> <li>Conditional logic (<code>{% if %}</code>, <code>{% elif %}</code>, <code>{% else %}</code>)</li> <li>Loop constructs (<code>{% for item in collection %}</code>)</li> <li>Filter functions (upper, lower, capitalize, default)</li> <li>Table formatting and access</li> <li>Escape character handling</li> <li>Comment support (<code>{# comment #}</code>)</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_TEMPLATE_PARSER_CLAS/#dependencies","title":"Dependencies","text":"<p>None - the class is self-contained and uses only standard ABAP functionality.</p>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_TEMPLATE_PARSER_CLAS/#details","title":"Details","text":"<p>The template parser works in three main phases:</p> <pre><code>flowchart LR\n    A[Template String] --&gt; B[Tokenization]\n    B --&gt; C[Token Processing]\n    C --&gt; D[Variable Resolution]\n    D --&gt; E[Rendered Output]</code></pre> <p>Internal Processing:</p> <ol> <li>Tokenization splits template into:</li> <li>TEXT tokens (plain text)</li> <li>VARIABLE tokens ({{...}})</li> <li>CONTROL tokens ({%...%})</li> <li> <p>COMMENT tokens ({#...#})</p> </li> <li> <p>Control Structure Handling:</p> </li> </ol> <pre><code>flowchart TD\n    A[Parse Token] --&gt; B{Token Type}\n    B --&gt;|Control| C[Process Control Structure]\n    C --&gt; D{Control Type}\n    D --&gt;|If| E[Handle Conditional]\n    D --&gt;|For| F[Handle Loop]\n    D --&gt;|End| G[Close Structure]\n    B --&gt;|Variable| H[Resolve Variable]\n    B --&gt;|Text| I[Add to Output]</code></pre> <ol> <li> <p>Variable Resolution:</p> </li> <li> <p>Supports nested path navigation (e.g., user.address.street)</p> </li> <li>Handles different data types (elementary, structure, table)</li> <li>Provides loop metadata (index, first, last)</li> <li>Supports filters for value transformation</li> </ol> <p>The parser maintains a control stack to track nested conditions and loops, ensuring proper scope handling and variable resolution context. Error handling is implemented throughout the processing chain with specific exception classes for different error scenarios.</p>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_TOOL_CALCULATOR_CLAS/","title":"Class ZCL_LLM_TOOL_CALCULATOR","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_TOOL_CALCULATOR_CLAS/#overview","title":"Overview","text":"<p>The <code>ZCL_LLM_TOOL_CALCULATOR</code> class implements a mathematical expression evaluator as a tool for LLM interactions. It implements the <code>ZIF_LLM_TOOL</code> interface and provides functionality to evaluate mathematical expressions with support for:</p> <p>Public Methods:</p> <ul> <li><code>ZIF_LLM_TOOL~GET_TOOL_DETAILS</code>: Returns tool configuration including name, description, and parameters</li> <li><code>ZIF_LLM_TOOL~EXECUTE</code>: Processes the mathematical expression and returns the calculated result</li> <li><code>ZIF_LLM_TOOL~GET_RESULT</code>: Returns the last calculated result</li> </ul> <p>Supported Operations:</p> <ul> <li>Basic arithmetic (+, -, *, /)</li> <li>Power operations (**)</li> <li>Modulo operations (MOD)</li> <li>Parentheses for expression grouping</li> <li>Negative numbers</li> <li>Decimal numbers</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_TOOL_CALCULATOR_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li>Implements interface <code>ZIF_LLM_TOOL</code></li> <li>Uses standard ABAP exceptions:</li> <li>CX_SY_ZERODIVIDE</li> <li>CX_SY_ARITHMETIC_ERROR</li> <li>CX_SY_CONVERSION_NO_NUMBER</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_TOOL_CALCULATOR_CLAS/#details","title":"Details","text":"<p>The calculator uses a two-step evaluation process based on the Shunting Yard algorithm:</p> <pre><code>flowchart TD\n    A[Input Expression] --&gt; B[Tokenization]\n    B --&gt; C[Convert to RPN]\n    C --&gt; D[Evaluate RPN]\n    D --&gt; E[Final Result]\n\n    subgraph Tokenization\n    B --&gt; F[Split into numbers]\n    B --&gt; G[Split into operators]\n    B --&gt; H[Handle negative numbers]\n    end\n\n    subgraph RPN Conversion\n    C --&gt; I[Process operators]\n    C --&gt; J[Handle parentheses]\n    C --&gt; K[Build output queue]\n    end\n\n    subgraph Evaluation\n    D --&gt; L[Process tokens]\n    D --&gt; M[Apply operators]\n    D --&gt; N[Handle errors]\n    end</code></pre> <p>Key Implementation Features:</p> <ul> <li>Uses DECFLOAT34 for high-precision calculations</li> <li>Implements operator precedence handling</li> <li>Comprehensive error handling for invalid expressions and mathematical errors</li> <li>Supports whitespace in expressions</li> <li>Maintains internal state for result retrieval</li> <li>Uses stack-based evaluation for complex expressions</li> </ul> <p>The class processes expressions through tokenization, converts to Reverse Polish Notation (RPN), and then evaluates the RPN expression to produce the final result. This approach ensures proper handling of operator precedence and nested expressions.</p>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_TOOL_ECHO_CLAS/","title":"Class ZCL_LLM_TOOL_ECHO","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_TOOL_ECHO_CLAS/#overview","title":"Overview","text":"<p>The <code>ZCL_LLM_TOOL_ECHO</code> class implements the <code>ZIF_LLM_TOOL</code> interface and serves as an echo tool that returns provided data without modification. It provides the following public methods:</p> <ul> <li><code>CONSTRUCTOR</code>: Initializes the tool with provided tool details</li> <li><code>GET_TOOL_DETAILS</code>: Returns the tool configuration details</li> <li><code>EXECUTE</code>: Processes the input data and returns it unchanged along with tool metadata</li> <li><code>GET_RESULT</code>: Retrieves the stored response data with tool metadata</li> </ul> <p>The class acts as a simple pass-through tool, maintaining tool details and response data between calls.</p>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_TOOL_ECHO_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li><code>ZIF_LLM_TOOL</code> interface - Main interface implemented by the class</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_TOOL_ECHO_CLAS/#details","title":"Details","text":"<p>The class follows a straightforward data flow pattern:</p> <pre><code>flowchart LR\n    A[Input Data] --&gt; B[EXECUTE]\n    B --&gt; C[Store Data]\n    C --&gt; D[GET_RESULT]\n    D --&gt; E[Output Data]\n\n    subgraph Internal Storage\n    F[tool_details]\n    G[response_data]\n    H[tool_call_id]\n    end</code></pre> <p>The class maintains internal state through instance attributes:</p> <ul> <li><code>tool_details</code>: Stores configuration for the tool</li> <li><code>response_data</code>: Holds the data passed through the tool</li> <li><code>tool_call_id</code>: Maintains the tool call identifier</li> <li><code>name</code>: Stores the tool name</li> </ul> <p>The implementation is designed for scenarios where data needs to be passed through a tool interface while maintaining its original form, useful for testing or validation purposes.</p>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_TOOL_PARSER_CLAS/","title":"Class ZCL_LLM_TOOL_PARSER","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_TOOL_PARSER_CLAS/#overview","title":"Overview","text":"<p>The <code>ZCL_LLM_TOOL_PARSER</code> class is responsible for parsing ABAP data structures into JSON schema format. It implements the <code>ZIF_LLM_TOOL_PARSER</code> interface and provides functionality to convert various ABAP data types (structures, tables, elementary types) into their JSON schema representation.</p> <p>Public methods:</p> <ul> <li><code>PARSE</code>: The main entry point that converts an ABAP data structure into a JSON schema string. It handles field descriptions and supports various data types including:</li> <li>Elementary types (INTEGER, DECIMAL, STRING, BOOLEAN)</li> <li>Structures (including nested)</li> <li>Tables</li> <li>Enumerations</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_TOOL_PARSER_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li><code>ZIF_LLM_TOOL_PARSER</code>: Interface defining the parsing contract</li> <li><code>ZCX_LLM_VALIDATION</code>: Exception class for validation errors</li> <li><code>CL_ABAP_TYPEDESCR</code> and its subclasses for ABAP type inspection</li> <li><code>CL_ABAP_FORMAT</code>: For JSON string escaping</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZCL_LLM_TOOL_PARSER_CLAS/#details","title":"Details","text":"<p>The parser uses a recursive approach to process ABAP data structures. The processing flow can be visualized as follows:</p> <pre><code>flowchart TD\n    A[Parse Method] --&gt; B{Check Type}\n    B --&gt;|Structure| C[Process Structure]\n    B --&gt;|Table| D[Process Table]\n    B --&gt;|Elementary| E[Process Element]\n    B --&gt;|Other| F[Raise Exception]\n\n    C --&gt; G[Process Components]\n    G --&gt; H[Process Each Field]\n    H --&gt; B\n\n    D --&gt; I[Process Table Line Type]\n    I --&gt; B\n\n    E --&gt; J{Determine Type}\n    J --&gt;|Integer| K[Add Integer Schema]\n    J --&gt;|Decimal| L[Add Number Schema]\n    J --&gt;|String| M[Add String Schema]\n    J --&gt;|Boolean| N[Add Boolean Schema]\n    J --&gt;|Other| O[Raise Exception]</code></pre> <p>Key implementation aspects:</p> <ul> <li>Uses a field_info structure to track field names, paths, and descriptions</li> <li>Maintains schema state through string concatenation</li> <li>Supports field descriptions and enumerations</li> <li>Implements pre/post hooks for objects, arrays, and schema processing</li> <li>Handles nested path construction for complex structures</li> <li>Enforces required fields and prevents additional properties</li> <li>Provides proper JSON schema formatting with titles and descriptions</li> </ul> <p>The class uses a builder pattern to construct the JSON schema, with specialized processing for each ABAP type category while maintaining proper JSON structure and nesting.</p>"},{"location":"Claude%203.5%20Sonnet/ZCX_LLM_AUTHORIZATION_CLAS/","title":"Class ZCX_LLM_AUTHORIZATION","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Sonnet/ZCX_LLM_AUTHORIZATION_CLAS/#overview","title":"Overview","text":"<p><code>ZCX_LLM_AUTHORIZATION</code> is an exception class for handling authorization-related errors in an LLM (Large Language Model) integration context. The class inherits from <code>CX_STATIC_CHECK</code> and implements message interfaces <code>IF_T100_MESSAGE</code> and <code>IF_T100_DYN_MSG</code>.</p> <p>The class defines four main error scenarios through constants:</p> <ul> <li><code>PROVIDER_MAINTENANCE</code>: Provider maintenance related errors (message 018)</li> <li><code>GET_CLIENT</code>: Client retrieval errors (message 019)</li> <li><code>DECRYPT</code>: Decryption errors (message 020)</li> <li><code>ENCRYPT</code>: Encryption errors (message 021)</li> </ul> <p>Public methods:</p> <ul> <li><code>CONSTRUCTOR</code>: Creates new exception instance with optional text ID and previous exception</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZCX_LLM_AUTHORIZATION_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li>Inherits from <code>CX_STATIC_CHECK</code></li> <li>Implements <code>IF_T100_MESSAGE</code></li> <li>Implements <code>IF_T100_DYN_MSG</code></li> <li>Uses message class <code>ZLLM_CLIENT</code></li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZCX_LLM_AUTHORIZATION_CLAS/#details","title":"Details","text":"<p>The class is designed to handle authorization errors in a structured way using SAP's message handling framework. All messages are defined in message class <code>ZLLM_CLIENT</code>.</p> <p>The exception handling flow can be visualized as:</p> <pre><code>flowchart LR\n    A[Error occurs] --&gt; B[Create exception]\n    B --&gt; C{Error type?}\n    C --&gt;|Provider| D[PROVIDER_MAINTENANCE]\n    C --&gt;|Client| E[GET_CLIENT]\n    C --&gt;|Decrypt| F[DECRYPT]\n    C --&gt;|Encrypt| G[ENCRYPT]\n    D --&gt; H[Raise exception]\n    E --&gt; H\n    F --&gt; H\n    G --&gt; H</code></pre> <p>The class supports message variable substitution through <code>MSGV1</code> and <code>MSGV2</code> attributes, though only <code>GET_CLIENT</code> is configured to use <code>MSGV1</code> for dynamic message text.</p>"},{"location":"Claude%203.5%20Sonnet/ZCX_LLM_HTTP_ERROR_CLAS/","title":"Class ZCX_LLM_HTTP_ERROR","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Sonnet/ZCX_LLM_HTTP_ERROR_CLAS/#overview","title":"Overview","text":"<p><code>ZCX_LLM_HTTP_ERROR</code> is a custom exception class for handling HTTP-related errors. It inherits from <code>CX_STATIC_CHECK</code> and implements the <code>IF_T100_MESSAGE</code> interface for message handling.</p> <p>The class defines four main error scenarios through constants:</p> <ul> <li><code>HTTP_CLIENT_NOT_INITIALIZED</code>: When HTTP client initialization fails</li> <li><code>HTTP_COMMUNICATION_FAILURE</code>: For communication errors</li> <li><code>HTTP_PROCESSING_FAILED</code>: When HTTP request processing fails</li> <li><code>HTTP_OTHERS</code>: For handling other HTTP-related errors</li> </ul> <p>Each error can store up to 4 string attributes (<code>MV_ATTR1</code> to <code>MV_ATTR4</code>) for additional error context.</p> <p>Public methods:</p> <ul> <li><code>CONSTRUCTOR</code>: Creates exception instance with optional text ID, attributes, and previous exception</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZCX_LLM_HTTP_ERROR_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li>Inherits from <code>CX_STATIC_CHECK</code></li> <li>Implements <code>IF_T100_MESSAGE</code></li> <li>Uses message class <code>ZLLM_CLIENT</code></li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZCX_LLM_HTTP_ERROR_CLAS/#details","title":"Details","text":"<p>The class follows SAP's standard exception handling pattern with T100 messages. Each error constant defines:</p> <ul> <li>Message ID (<code>ZLLM_CLIENT</code>)</li> <li>Message number</li> <li>Attribute mappings</li> </ul> <pre><code>classDiagram\n    CX_STATIC_CHECK &lt;|-- ZCX_LLM_HTTP_ERROR\n    ZCX_LLM_HTTP_ERROR ..|&gt; IF_T100_MESSAGE\n\n    class ZCX_LLM_HTTP_ERROR {\n        +MV_ATTR1: STRING\n        +MV_ATTR2: STRING\n        +MV_ATTR3: STRING\n        +MV_ATTR4: STRING\n        +CONSTRUCTOR(TEXTID, ATTR1, ATTR2, ATTR3, ATTR4, PREVIOUS)\n    }</code></pre> <p>The constructor implementation ensures proper message handling by:</p> <ol> <li>Calling the parent constructor with previous exception</li> <li>Setting attribute values</li> <li>Setting the text ID (using default if none provided)</li> </ol>"},{"location":"Claude%203.5%20Sonnet/ZCX_LLM_TEMPLATE_PARSER_CLAS/","title":"Class ZCX_LLM_TEMPLATE_PARSER","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Sonnet/ZCX_LLM_TEMPLATE_PARSER_CLAS/#overview","title":"Overview","text":"<p>The <code>ZCX_LLM_TEMPLATE_PARSER</code> class is a custom exception class for handling template parsing errors. It inherits from <code>CX_STATIC_CHECK</code> and implements the message interfaces <code>IF_T100_DYN_MSG</code> and <code>IF_T100_MESSAGE</code>.</p> <p>The class defines a comprehensive set of exception constants for various parsing scenarios:</p> <ul> <li>Template structure errors (unclosed tokens, control structures)</li> <li>Variable handling errors (invalid paths, types, resolution)</li> <li>Loop processing errors (syntax, collection handling)</li> <li>Conditional statement errors (evaluation, invalid operators)</li> <li>Token matching and escape sequence errors</li> </ul> <p>Public methods:</p> <ul> <li><code>CONSTRUCTOR</code>: Creates exception instance with optional text ID, previous exception and message variables</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZCX_LLM_TEMPLATE_PARSER_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li>Inherits from <code>CX_STATIC_CHECK</code></li> <li>Implements <code>IF_T100_DYN_MSG</code></li> <li>Implements <code>IF_T100_MESSAGE</code></li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZCX_LLM_TEMPLATE_PARSER_CLAS/#details","title":"Details","text":"<p>The class uses message catalog <code>ZLLM_CLIENT</code> with message numbers ranging from 022-042 to provide detailed error information. The error handling is structured into main categories:</p> <pre><code>graph TD\n    A[Template Parser Exceptions] --&gt; B[Structure Errors]\n    A --&gt; C[Variable Errors]\n    A --&gt; D[Control Flow Errors]\n    A --&gt; E[Syntax Errors]\n\n    B --&gt; B1[Unclosed Tokens]\n    B --&gt; B2[Control Structures]\n\n    C --&gt; C1[Invalid Paths]\n    C --&gt; C2[Type Errors]\n    C --&gt; C3[Resolution Errors]\n\n    D --&gt; D1[Loop Errors]\n    D --&gt; D2[Condition Errors]\n\n    E --&gt; E1[Token Mismatches]\n    E --&gt; E2[Escape Sequences]</code></pre> <p>The exception handling supports message variable substitution through the <code>MSGV1-MSGV4</code> attributes, allowing for context-specific error messages. Most error constants are designed to use <code>MSGV1</code> for detailed error information, while some complex errors like <code>MISMATCHED_TOKEN</code> utilize multiple message variables.</p>"},{"location":"Claude%203.5%20Sonnet/ZCX_LLM_VALIDATION_CLAS/","title":"Class ZCX_LLM_VALIDATION","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Sonnet/ZCX_LLM_VALIDATION_CLAS/#overview","title":"Overview","text":"<p><code>ZCX_LLM_VALIDATION</code> is an exception class inheriting from <code>CX_DYNAMIC_CHECK</code> that handles various validation and error scenarios in an LLM (Large Language Model) client implementation. The class provides structured exception handling with predefined message types for:</p> <ul> <li>Type validation (<code>UNSUPPORTED_TYPE</code>)</li> <li>Value range validation (<code>VALUE_OUT_OF_RANGE</code>)</li> <li>Model existence checks (<code>MODEL_DOES_NOT_EXIST</code>, <code>CLIENT_MODEL_NOT_FOUND</code>)</li> <li>HTTP communication issues (<code>HTTP_DESTINATION_ERROR</code>)</li> <li>Encryption/Decryption handling (<code>ENCRYPTION_SETUP</code>, <code>ENCRYPTION_FAILED</code>, <code>DECRYPTION_FAILED</code>)</li> <li>Provider validation (<code>PROVIDER_DOES_NOT_EXIST</code>)</li> </ul> <p>Each exception type can carry up to 4 attributes (<code>MV_ATTR1</code> to <code>MV_ATTR4</code>) for detailed error information.</p> <p>Public methods:</p> <ul> <li><code>CONSTRUCTOR</code>: Creates exception instance with message ID and optional attributes</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZCX_LLM_VALIDATION_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li>Inherits from <code>CX_DYNAMIC_CHECK</code></li> <li>Implements <code>IF_T100_MESSAGE</code></li> <li>Uses message class <code>ZLLM_CLIENT</code></li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZCX_LLM_VALIDATION_CLAS/#details","title":"Details","text":"<p>The class follows the SAP standard exception handling pattern with T100 messages. All message definitions are bound to the custom message class <code>ZLLM_CLIENT</code>.</p> <p>Exception flow:</p> <pre><code>graph TD\n    A[Application Code] --&gt;|Raises| B[ZCX_LLM_VALIDATION]\n    B --&gt;|Contains| C[Message Key]\n    B --&gt;|Contains| D[Attributes 1-4]\n    C --&gt;|References| E[ZLLM_CLIENT Messages]</code></pre> <p>The exception handling is designed to provide detailed error information through a combination of:</p> <ul> <li>Predefined message IDs (msgid: ZLLM_CLIENT)</li> <li>Message numbers (msgno)</li> <li>Up to 4 dynamic attributes that can be referenced in the message text</li> <li>Previous exception handling for error chaining</li> </ul> <p>The class is marked as <code>FINAL</code> to prevent inheritance, ensuring consistent error handling across the LLM client implementation.</p>"},{"location":"Claude%203.5%20Sonnet/ZIF_LLM_AUTH_INTF/","title":"Interface ZIF_LLM_AUTH","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Sonnet/ZIF_LLM_AUTH_INTF/#overview","title":"Overview","text":"<p>Interface <code>ZIF_LLM_AUTH</code> provides authorization check methods for LLM (Large Language Model) operations. It exposes four methods:</p> <ul> <li><code>CHECK_PROVIDER_MAINTENANCE</code>: Validates authorization for provider maintenance access</li> <li><code>CHECK_GET_CLIENT</code>: Checks if user is authorized to obtain a model client for a specific LLM model</li> <li><code>CHECK_DECRYPT</code>: Verifies authorization for secret decryption operations  </li> <li><code>CHECK_ENCRYPT</code>: Validates authorization for secret encryption operations</li> </ul> <p>All methods raise the <code>ZCX_LLM_AUTHORIZATION</code> exception if authorization checks fail.</p> <pre><code>classDiagram\n    class ZIF_LLM_AUTH {\n        +check_provider_maintenance()\n        +check_get_client(model: ZLLM_MODEL)\n        +check_decrypt()\n        +check_encrypt()\n    }</code></pre>"},{"location":"Claude%203.5%20Sonnet/ZIF_LLM_AUTH_INTF/#dependencies","title":"Dependencies","text":"<ul> <li>Exception class: <code>ZCX_LLM_AUTHORIZATION</code></li> <li>Data type: <code>ZLLM_MODEL</code></li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZIF_LLM_CALL_LOGGER_INTF/","title":"Interface ZIF_LLM_CALL_LOGGER","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Sonnet/ZIF_LLM_CALL_LOGGER_INTF/#overview","title":"Overview","text":"<p>Interface <code>ZIF_LLM_CALL_LOGGER</code> provides logging functionality for LLM (Large Language Model) calls. It exposes a single method:</p> <ul> <li><code>ADD</code>: Adds a new entry to the call log, accepting a parameter of type <code>ZLLM_CALL_LOG</code></li> </ul> <pre><code>classDiagram\n    class ZIF_LLM_CALL_LOGGER {\n        +add(entry: ZLLM_CALL_LOG)\n    }</code></pre>"},{"location":"Claude%203.5%20Sonnet/ZIF_LLM_CALL_LOGGER_INTF/#dependencies","title":"Dependencies","text":"<ul> <li>Data type <code>ZLLM_CALL_LOG</code> for log entry structure</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZIF_LLM_CHAT_REQUEST_INTF/","title":"Interface ZIF_LLM_CHAT_REQUEST","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Sonnet/ZIF_LLM_CHAT_REQUEST_INTF/#overview","title":"Overview","text":"<p>The <code>ZIF_LLM_CHAT_REQUEST</code> interface provides functionality to manage chat interactions with a Language Learning Model (LLM). The interface handles:</p> <ol> <li> <p>Message Management</p> </li> <li> <p><code>add_message()</code> - Adds a single message</p> </li> <li><code>add_messages()</code> - Adds multiple messages</li> <li><code>get_messages()</code> - Retrieves all messages</li> <li> <p><code>clear_messages()</code> - Removes all messages</p> </li> <li> <p>Tool Management</p> </li> <li> <p><code>add_tool()</code> - Adds a single tool with optional tool choice</p> </li> <li><code>add_tools()</code> - Adds multiple tools with optional tool choice</li> <li><code>get_tools()</code> - Retrieves all tools</li> <li><code>clear_tools()</code> - Removes all tools</li> <li><code>set_tool_choice()</code> - Sets tool choice mode (none/auto/required)</li> <li><code>add_tool_result()</code> - Adds tool execution results</li> <li> <p><code>add_tool_choices()</code> - Adds tool call information</p> </li> <li> <p>Structured Output Handling</p> </li> <li> <p><code>set_structured_output()</code> - Configures structured output settings</p> </li> <li><code>set_structured_output_active()</code> - Enables/disables structured output</li> <li> <p><code>add_choice()</code> - Appends LLM choice to message list</p> </li> <li> <p>Internal Methods</p> </li> <li> <p><code>get_internal_request()</code> - Retrieves complete request details</p> </li> <li><code>options()</code> - Provides access to options implementation</li> </ol>"},{"location":"Claude%203.5%20Sonnet/ZIF_LLM_CHAT_REQUEST_INTF/#dependencies","title":"Dependencies","text":"<p>The interface has the following key dependencies:</p> <ul> <li><code>ZIF_LLM_TOOL</code> - Tool interface</li> <li><code>ZIF_LLM_OPTIONS</code> - Options interface</li> <li><code>ZIF_LLM_SO</code> - Structured output interface</li> <li>Custom data types: <code>ZLLM_MSG</code>, <code>ZLLM_MSGS</code>, <code>ZLLM_TOOLS</code>, <code>ZLLM_TOOL_CALLS</code>, <code>ZLLM_CHOICE</code>, <code>ZLLM_REQUEST</code></li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZIF_LLM_CLIENT_INTF/","title":"Interface ZIF_LLM_CLIENT","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Sonnet/ZIF_LLM_CLIENT_INTF/#overview","title":"Overview","text":"<p>The <code>ZIF_LLM_CLIENT</code> interface provides functionality to interact with Large Language Models (LLM). It offers the following key methods:</p> <ul> <li><code>GET_CLIENT</code> (static): Creates a new LLM client based on provided configuration</li> <li><code>CHAT</code>: Executes chat requests with the LLM</li> <li><code>NEW_REQUEST</code>: Creates a new chat request object</li> </ul> <p>The interface defines standard role constants for LLM interactions:</p> <ul> <li><code>ROLE_USER</code></li> <li><code>ROLE_SYSTEM</code></li> <li><code>ROLE_ASSISTANT</code></li> <li><code>ROLE_TOOL</code></li> </ul> <pre><code>classDiagram\n    class ZIF_LLM_CLIENT {\n        +GET_CLIENT(client_config: ZLLM_CLNT_CONFIG, provider_config: ZLLM_PROVIDERS) ZIF_LLM_CLIENT\n        +CHAT(request: ZIF_LLM_CHAT_REQUEST) ZLLM_RESPONSE\n        +NEW_REQUEST() ZIF_LLM_CHAT_REQUEST\n    }</code></pre>"},{"location":"Claude%203.5%20Sonnet/ZIF_LLM_CLIENT_INTF/#dependencies","title":"Dependencies","text":"<ul> <li><code>ZIF_LLM_CHAT_REQUEST</code> - Interface for chat requests</li> <li><code>ZCX_LLM_VALIDATION</code> - Exception class for validation errors</li> <li><code>ZCX_LLM_AUTHORIZATION</code> - Exception class for authorization errors</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZIF_LLM_CLIENT_JSON_SCHEMA_INTF/","title":"Interface ZIF_LLM_CLIENT_JSON_SCHEMA","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Sonnet/ZIF_LLM_CLIENT_JSON_SCHEMA_INTF/#overview","title":"Overview","text":"<p>The <code>ZIF_LLM_CLIENT_JSON_SCHEMA</code> interface provides functionality to build JSON schema definitions programmatically. It supports creating schemas with properties, arrays and objects with single-level nesting.</p> <p>Key methods:</p> <ul> <li><code>NEW_FORMAT</code>: Creates a new schema instance with a given title</li> <li><code>ADD_PROPERTY</code>: Adds a single property to the schema</li> <li><code>ADD_ARRAY</code>: Adds an array definition</li> <li><code>ADD_OBJECT</code>: Adds an object definition</li> <li><code>GENERATE_SCHEMA</code>: Generates the final JSON schema string</li> </ul> <p>The interface defines several data types:</p> <pre><code>classDiagram\n    class value_type {\n        &lt;&lt;enumeration&gt;&gt;\n        string\n        number\n        boolean\n        integer\n    }\n    class property_def {\n        name: string\n        type: value_type  \n        description: string\n        allow_null: abap_bool\n    }\n    class object_def {\n        name: string\n        description: string\n        properties: properties_def\n    }\n    class array_def {\n        name: string\n        description: string\n        properties: properties_def\n    }</code></pre>"},{"location":"Claude%203.5%20Sonnet/ZIF_LLM_CLIENT_JSON_SCHEMA_INTF/#dependencies","title":"Dependencies","text":"<ul> <li><code>ZCX_LLM_VALIDATION</code>: Exception class for validation errors</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZIF_LLM_DEFAULT_IMPL_INTF/","title":"Interface ZIF_LLM_DEFAULT_IMPL","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Sonnet/ZIF_LLM_DEFAULT_IMPL_INTF/#overview","title":"Overview","text":"<p>The interface <code>ZIF_LLM_DEFAULT_IMPL</code> provides methods to retrieve various implementation classes for an LLM (Large Language Model) system. It implements the BAdI interface <code>IF_BADI_INTERFACE</code> and defines the following key methods:</p> <ul> <li><code>get_json_impl()</code> - Returns the name of the JSON handling class</li> <li><code>get_encryption_impl()</code> - Returns the encryption provider implementation</li> <li><code>get_call_logger_impl()</code> - Returns the call logging implementation</li> <li><code>get_statistics_impl()</code> - Returns the statistics handling implementation  </li> <li><code>get_authorization_impl()</code> - Returns the authorization implementation (raises <code>ZCX_LLM_AUTHORIZATION</code> for auth errors)</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZIF_LLM_DEFAULT_IMPL_INTF/#dependencies","title":"Dependencies","text":"<p>The interface has dependencies on the following components:</p> <ul> <li><code>IF_BADI_INTERFACE</code> - Standard SAP BAdI interface</li> <li><code>ZIF_LLM_ENCRYPTION</code> - Encryption provider interface</li> <li><code>ZIF_LLM_CALL_LOGGER</code> - Call logging interface</li> <li><code>ZIF_LLM_STATISTICS</code> - Statistics interface</li> <li><code>ZIF_LLM_AUTH</code> - Authorization interface</li> <li><code>ZCX_LLM_AUTHORIZATION</code> - Authorization exception class</li> </ul> <pre><code>classDiagram\n    class ZIF_LLM_DEFAULT_IMPL {\n        +get_json_impl()\n        +get_encryption_impl()\n        +get_call_logger_impl() \n        +get_statistics_impl()\n        +get_authorization_impl()\n    }\n    ZIF_LLM_DEFAULT_IMPL --|&gt; IF_BADI_INTERFACE\n    ZIF_LLM_DEFAULT_IMPL ..&gt; ZIF_LLM_ENCRYPTION\n    ZIF_LLM_DEFAULT_IMPL ..&gt; ZIF_LLM_CALL_LOGGER\n    ZIF_LLM_DEFAULT_IMPL ..&gt; ZIF_LLM_STATISTICS\n    ZIF_LLM_DEFAULT_IMPL ..&gt; ZIF_LLM_AUTH</code></pre>"},{"location":"Claude%203.5%20Sonnet/ZIF_LLM_ENCRYPTION_INTF/","title":"Interface ZIF_LLM_ENCRYPTION","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Sonnet/ZIF_LLM_ENCRYPTION_INTF/#overview","title":"Overview","text":"<p>The <code>ZIF_LLM_ENCRYPTION</code> interface provides encryption and decryption capabilities through two public methods:</p> <ul> <li><code>DECRYPT</code>: Converts encrypted data (XSTRING) into a decrypted string</li> <li><code>ENCRYPT</code>: Converts an unencrypted string into encrypted data (XSTRING)</li> </ul> <p>Both methods can raise the following exceptions:</p> <ul> <li><code>ZCX_LLM_VALIDATION</code></li> <li><code>ZCX_LLM_AUTHORIZATION</code></li> </ul> <pre><code>classDiagram\n    class ZIF_LLM_ENCRYPTION {\n        +decrypt(encrypted: XSTRING) string\n        +encrypt(unencrypted: string) XSTRING\n    }</code></pre>"},{"location":"Claude%203.5%20Sonnet/ZIF_LLM_ENCRYPTION_INTF/#dependencies","title":"Dependencies","text":"<ul> <li><code>ZCX_LLM_VALIDATION</code> exception class</li> <li><code>ZCX_LLM_AUTHORIZATION</code> exception class</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZIF_LLM_FACTORY_INTF/","title":"Interface ZIF_LLM_FACTORY","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Sonnet/ZIF_LLM_FACTORY_INTF/#overview","title":"Overview","text":"<p>The <code>ZIF_LLM_FACTORY</code> interface provides factory functionality for LLM (Large Language Model) clients with one public class method:</p> <ul> <li><code>GET_CLIENT</code>: Creates and returns a model-specific LLM client instance</li> <li>Input: Model identifier (<code>ZLLM_MODEL</code>)</li> <li>Output: Reference to client interface (<code>ZIF_LLM_CLIENT</code>)</li> <li>Can raise validation and authorization exceptions</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZIF_LLM_FACTORY_INTF/#dependencies","title":"Dependencies","text":"<ul> <li><code>ZIF_LLM_CLIENT</code>: Interface that client implementations must implement</li> <li><code>ZLLM_MODEL</code>: Data type for model identification</li> <li><code>ZCX_LLM_VALIDATION</code>: Exception class for validation errors</li> <li><code>ZCX_LLM_AUTHORIZATION</code>: Exception class for authorization errors</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZIF_LLM_HTTP_CLIENT_WRAPPER_INTF/","title":"Interface ZIF_LLM_HTTP_CLIENT_WRAPPER","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Sonnet/ZIF_LLM_HTTP_CLIENT_WRAPPER_INTF/#overview","title":"Overview","text":"<p>The <code>ZIF_LLM_HTTP_CLIENT_WRAPPER</code> interface provides a wrapper for HTTP client functionality with the following key methods:</p> <ul> <li><code>GET_CLIENT</code> (static) - Creates a new HTTP client instance based on client and provider configuration</li> <li><code>SET_HEADER</code> - Sets or updates HTTP header values</li> <li><code>SET_URL</code> - Sets the target URL, automatically prepending the SM59 destination path</li> <li><code>COMMUNICATE</code> - Executes the HTTP request with given payload and session information</li> <li><code>CLOSE_CLIENT</code> - Closes the HTTP client connection</li> </ul> <p>The interface defines a <code>RESPONSE</code> type structure containing:</p> <pre><code>TYPES: BEGIN OF response,\n  code          TYPE sysubrc,        \"Return code\n  message       TYPE string,         \"Response message\n  response      TYPE string,         \"Response body\n  http_response TYPE REF TO if_http_response,\nEND OF response.\n</code></pre>"},{"location":"Claude%203.5%20Sonnet/ZIF_LLM_HTTP_CLIENT_WRAPPER_INTF/#dependencies","title":"Dependencies","text":"<ul> <li><code>IF_HTTP_RESPONSE</code> - SAP standard HTTP response interface</li> <li><code>ZCX_LLM_VALIDATION</code> - Custom validation exception class</li> <li><code>ZCX_LLM_HTTP_ERROR</code> - Custom HTTP error exception class</li> <li><code>ZLLM_CLNT_CONFIG</code> - Client configuration type</li> <li><code>ZLLM_PROVIDERS</code> - Provider configuration type</li> <li><code>ZLLM_SESSION_ID</code> - Session ID type</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZIF_LLM_OPTIONS_INTF/","title":"Interface ZIF_LLM_OPTIONS","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Sonnet/ZIF_LLM_OPTIONS_INTF/#overview","title":"Overview","text":"<p>The interface <code>ZIF_LLM_OPTIONS</code> provides methods to configure parameters for Large Language Model (LLM) calls. It offers setters for common LLM parameters with validation:</p> <pre><code>classDiagram\n    class ZIF_LLM_OPTIONS {\n        +set_temperature(temperature: decfloat16)\n        +set_max_tokens(tokens: i)\n        +set_top_p(top_p: decfloat16)\n        +set_top_k(top_k: i)\n        +set_seed(seed: i)\n        +set_frequency_penalty(frequency_penalty: decfloat16)\n        +set_presence_penalty(presence_penalty: decfloat16)\n        +set_min_p(min_p: decfloat16)\n        +set_top_a(top_a: decfloat16)\n        +set_custom_parameters(parameters: zllm_keyvalues)\n        +get_paramters() zllm_keyvalues\n    }</code></pre> <p>Key methods:</p> <ul> <li>Temperature control (range 0-2)</li> <li>Token limit setting (positive integers)</li> <li>Various sampling parameters (top_p, top_k, min_p, top_a)</li> <li>Penalty controls for frequency and presence (range -2 to 2)</li> <li>Seed setting for reproducible results</li> <li>Custom parameter handling</li> </ul> <p>All setter methods include validation and can raise <code>ZCX_LLM_VALIDATION</code> exceptions.</p>"},{"location":"Claude%203.5%20Sonnet/ZIF_LLM_OPTIONS_INTF/#dependencies","title":"Dependencies","text":"<ul> <li><code>ZCX_LLM_VALIDATION</code> - Exception class for parameter validation</li> <li><code>ZLLM_KEYVALUES</code> - Type for key-value parameter storage</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZIF_LLM_SO_INTF/","title":"Interface ZIF_LLM_SO","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Sonnet/ZIF_LLM_SO_INTF/#overview","title":"Overview","text":"<p>The <code>ZIF_LLM_SO</code> interface provides functionality for handling structured output schemas. It offers three main methods:</p> <ul> <li><code>SET_SCHEMA</code>: Configures the schema based on an ABAP data descriptor and optional field descriptions</li> <li><code>GET_SCHEMA</code>: Retrieves the converted schema as a string</li> <li><code>GET_DATATYPE</code>: Returns the internal data type definition</li> </ul> <p>The interface defines a structured type <code>DEF_DESCRIPTION</code> and corresponding table type <code>DEF_DESCRIPTIONS</code> for providing field metadata like descriptions and enumeration values.</p> <pre><code>classDiagram\n    class ZIF_LLM_SO {\n        +set_schema(data_desc: REF TO cl_abap_datadescr, description: def_descriptions)\n        +get_schema() string\n        +get_datatype() REF TO cl_abap_datadescr\n    }</code></pre>"},{"location":"Claude%203.5%20Sonnet/ZIF_LLM_SO_INTF/#dependencies","title":"Dependencies","text":"<ul> <li><code>CL_ABAP_DATADESCR</code>: Core ABAP runtime type description class</li> <li><code>ZCX_LLM_VALIDATION</code>: Custom exception class for validation errors</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZIF_LLM_STATISTICS_INTF/","title":"Interface ZIF_LLM_STATISTICS","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Sonnet/ZIF_LLM_STATISTICS_INTF/#overview","title":"Overview","text":"<p>The <code>ZIF_LLM_STATISTICS</code> interface provides functionality to record LLM (Large Language Model) statistics. It exposes one public method:</p> <ul> <li><code>ADD</code>: Adds a single statistic record of type <code>ZLLM_STATISTICS</code></li> </ul> <pre><code>classDiagram\n    class ZIF_LLM_STATISTICS {\n        +add(record: ZLLM_STATISTICS)\n    }</code></pre>"},{"location":"Claude%203.5%20Sonnet/ZIF_LLM_STATISTICS_INTF/#dependencies","title":"Dependencies","text":"<ul> <li>Data type <code>ZLLM_STATISTICS</code> (statistics record structure)</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZIF_LLM_TOOL_INTF/","title":"Interface ZIF_LLM_TOOL","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Sonnet/ZIF_LLM_TOOL_INTF/#overview","title":"Overview","text":"<p>The <code>ZIF_LLM_TOOL</code> interface defines a contract for implementing tool calls in an SAP ABAP LLM (Large Language Model) context. It provides three main methods:</p> <ul> <li><code>GET_RESULT</code>: Retrieves the result of a tool call</li> <li><code>GET_TOOL_DETAILS</code>: Returns metadata about the tool including name, description, and parameters</li> <li><code>EXECUTE</code>: Executes the tool with given input data and returns the result</li> </ul> <p>The interface uses structured types to handle tool parameters and results:</p> <pre><code>classDiagram\n    class TOOL_DETAILS {\n        +STRING name\n        +STRING description\n        +STRING type\n        +TOOL_PARAMETERS parameters\n    }\n    class TOOL_PARAMETERS {\n        +CL_ABAP_DATADESCR data_desc\n        +DEF_DESCRIPTIONS descriptions\n    }\n    class TOOL_RESULT {\n        +DATA data\n        +STRING tool_call_id\n        +STRING name\n    }</code></pre>"},{"location":"Claude%203.5%20Sonnet/ZIF_LLM_TOOL_INTF/#dependencies","title":"Dependencies","text":"<ul> <li><code>CL_ABAP_DATADESCR</code>: ABAP Runtime Type Services</li> <li><code>ZIF_LLM_TOOL_PARSER</code>: Interface for tool parameter parsing</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZIF_LLM_TOOL_PARSER_INTF/","title":"Interface ZIF_LLM_TOOL_PARSER","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Sonnet/ZIF_LLM_TOOL_PARSER_INTF/#overview","title":"Overview","text":"<p>The <code>ZIF_LLM_TOOL_PARSER</code> interface provides functionality to parse tool definitions. It contains:</p> <p>Methods:</p> <ul> <li><code>PARSE</code>: Parses a tool definition based on a data descriptor and optional descriptions, returning a string result</li> </ul> <p>Types:</p> <ul> <li><code>DEF_DESCRIPTION</code>: Structure containing:</li> <li><code>fieldname</code>: String field name</li> <li><code>description</code>: String description</li> <li><code>enum_values</code>: Table of string values for enumerations</li> <li><code>DEF_DESCRIPTIONS</code>: Standard table of DEF_DESCRIPTION entries with fieldname as key</li> </ul> <pre><code>classDiagram\n    class ZIF_LLM_TOOL_PARSER {\n        +parse(data_desc: REF TO cl_abap_datadescr, descriptions: def_descriptions) string\n    }</code></pre>"},{"location":"Claude%203.5%20Sonnet/ZIF_LLM_TOOL_PARSER_INTF/#dependencies","title":"Dependencies","text":"<ul> <li><code>CL_ABAP_DATADESCR</code>: ABAP Runtime Type Services</li> <li><code>ZCX_LLM_VALIDATION</code>: Custom exception class for validation errors</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZLLM_PROVIDER_MAINTENANCE_PROG/","title":"Report ZLLM_PROVIDER_MAINTENANCE","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Sonnet/ZLLM_PROVIDER_MAINTENANCE_PROG/#overview","title":"Overview","text":"<p>This ABAP report implements a maintenance application for LLM (Large Language Model) providers. It allows users to manage provider configurations through a GUI that offers the following main functions:</p> <ul> <li>Display providers in an ALV grid</li> <li>Add new provider configurations</li> <li>Change existing provider configurations</li> <li>Delete provider configurations</li> </ul> <p>The code is structured into two main classes:</p> <ul> <li><code>LCL_APP</code>: Core application logic handling provider data and encryption</li> <li><code>LCL_SCREEN</code>: Screen management and user interaction handling</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZLLM_PROVIDER_MAINTENANCE_PROG/#dependencies","title":"Dependencies","text":"<ul> <li>Table <code>ZLLM_PROVIDERS</code>: Stores provider configurations</li> <li>Interface <code>ZIF_LLM_ENCRYPTION</code>: Encryption functionality</li> <li>Class <code>ZCL_LLM_COMMON</code>: Provides access to LLM BADI</li> <li>ALV Grid (<code>CL_GUI_ALV_GRID</code>): Display framework</li> <li>Standard function modules for popups and field catalog creation</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZLLM_PROVIDER_MAINTENANCE_PROG/#details","title":"Details","text":"<p>The application follows a typical ABAP object-oriented design pattern with clear separation between UI and business logic.</p> <pre><code>flowchart TD\n    A[Screen 100] --&gt; B[LCL_SCREEN]\n    B --&gt; C[LCL_APP]\n    C --&gt; D[ZLLM_PROVIDERS]\n    C --&gt; E[Encryption Interface]\n    C --&gt; F[ALV Grid]\n\n    subgraph \"User Actions\"\n    G[Add] --&gt; C\n    H[Change] --&gt; C\n    I[Delete] --&gt; C\n    end</code></pre> <p>Key implementation aspects:</p> <ul> <li>Provider configurations include name, implementation class, RFC destination, and encrypted authentication</li> <li>Authentication values can exceed 132 characters and are handled by splitting them</li> <li>The application uses encrypted storage for authentication values</li> <li>ALV display is configured with custom field catalog excluding sensitive data</li> <li>User interaction is handled through standard SAP popups for data entry and confirmations</li> <li>Error handling is implemented for encryption/decryption operations</li> </ul> <p>The data flow follows this pattern:</p> <ol> <li>Load provider data from database</li> <li>Display in ALV with masked sensitive information</li> <li>User actions trigger corresponding handler methods</li> <li>Changes are encrypted if necessary and persisted</li> <li>Display is refreshed automatically</li> </ol>"},{"location":"Claude%203.5%20Sonnet/Z_LLM_CLIENT_FUGR/","title":"Function Group Z_LLM_CLIENT","text":""},{"location":"Claude%203.5%20Sonnet/FUGR/Z_LLM_CLIENT/TABLEFRAME_Z_LLM_CLIENT/","title":"Function Module TABLEFRAME_Z_LLM_CLIENT","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Sonnet/FUGR/Z_LLM_CLIENT/TABLEFRAME_Z_LLM_CLIENT/#overview","title":"Overview","text":"<p>This function module <code>TABLEFRAME_Z_LLM_CLIENT</code> is a standard SAP table maintenance framework component. It serves as the main entry point for table maintenance operations on the <code>Z_LLM_CLIENT</code> table. The module executes a single PERFORM statement calling the <code>TABLEFRAME</code> subroutine with parameters for header information, name tables, selection lists, and excluded functions.</p>"},{"location":"Claude%203.5%20Sonnet/FUGR/Z_LLM_CLIENT/TABLEFRAME_Z_LLM_CLIENT/#dependencies","title":"Dependencies","text":"<ul> <li>Table maintenance framework components (implicit)</li> <li>Form routine <code>TABLEFRAME</code></li> <li>Global variables:</li> <li>X_HEADER</li> <li>X_NAMTAB</li> <li>DBA_SELLIST</li> <li>DPL_SELLIST</li> <li>EXCL_CUA_FUNCT</li> <li>CORR_NUMBER</li> <li>VIEW_ACTION</li> <li>VIEW_NAME</li> </ul>"},{"location":"Claude%203.5%20Sonnet/FUGR/Z_LLM_CLIENT/TABLEFRAME_Z_LLM_CLIENT/#details","title":"Details","text":"<p>The function module follows SAP's standard table maintenance generator pattern. It was generated on January 2nd, 2025 using generator version #001407#.</p> <pre><code>flowchart LR\n    A[Function Module Call] --&gt; B[TABLEFRAME Form]\n    B --&gt; C{Processing}\n    C --&gt; D[Header Processing]\n    C --&gt; E[Name Table Processing]\n    C --&gt; F[Selection List Processing]\n    C --&gt; G[CUA Function Exclusion]</code></pre> <p>The function module acts as a wrapper, delegating the actual table maintenance functionality to the TABLEFRAME form routine. This architecture is typical for SAP table maintenance frameworks, providing a standardized interface for table operations while encapsulating the implementation details in the form routine.</p>"},{"location":"Claude%203.5%20Sonnet/FUGR/Z_LLM_CLIENT/TABLEPROC_Z_LLM_CLIENT/","title":"Function Module TABLEPROC_Z_LLM_CLIENT","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Sonnet/FUGR/Z_LLM_CLIENT/TABLEPROC_Z_LLM_CLIENT/#overview","title":"Overview","text":"<p>This is a table maintenance function module <code>TABLEPROC_Z_LLM_CLIENT</code> that appears to be automatically generated for view maintenance. It serves as a standard SAP table maintenance processor, typically used to maintain data in the corresponding database table or view <code>Z_LLM_CLIENT</code>. The function module consists of a single PERFORM statement calling the standard <code>TABLEPROC</code> subroutine.</p>"},{"location":"Claude%203.5%20Sonnet/FUGR/Z_LLM_CLIENT/TABLEPROC_Z_LLM_CLIENT/#dependencies","title":"Dependencies","text":"<ul> <li>Standard SAP table maintenance framework</li> <li>Database table/view <code>Z_LLM_CLIENT</code></li> <li>TABLEPROC standard subroutine</li> </ul>"},{"location":"Claude%203.5%20Sonnet/FUGR/Z_LLM_CLIENT/TABLEPROC_Z_LLM_CLIENT/#details","title":"Details","text":"<p>The function module follows SAP's standard pattern for table maintenance generators. Based on the generation date (02.01.2025) and version information (#001407#), it's a relatively recent implementation.</p> <p>The process flow can be visualized as follows:</p> <pre><code>graph LR\n    A[Table Maintenance Call] --&gt; B[TABLEPROC_Z_LLM_CLIENT]\n    B --&gt; C[TABLEPROC Subroutine]\n    C --&gt; D[Database Operations]\n    D --&gt; E[Z_LLM_CLIENT Table/View]</code></pre> <p>The function module acts as a wrapper for the standard table maintenance functionality, providing a standardized interface for:</p> <ul> <li>Display and modification of table entries</li> <li>Input validation</li> <li>Authorization checks</li> <li>Database operations (Create, Read, Update, Delete)</li> </ul> <p>The naming convention suggests this is related to a client-specific implementation within a larger LLM (likely Logical License Management or similar) system.</p>"},{"location":"Claude%203.5%20Sonnet/ZLLM_CLIENT_ANTHROPIC/","title":"Package ZLLM_CLIENT_ANTHROPIC","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Sonnet/ZLLM_CLIENT_ANTHROPIC/#overview","title":"Overview","text":"<p>This ABAP package provides a comprehensive framework for integrating Large Language Model (LLM) capabilities into SAP systems. It implements a modular architecture for connecting to various LLM providers, with initial support for Anthropic's Claude model.</p> <p>The package follows a clean separation of concerns, offering:</p> <ul> <li>Abstract base components for LLM interactions</li> <li>Provider-specific implementations (currently Anthropic)</li> <li>Standardized message handling and response processing</li> <li>Configuration management for API settings</li> <li>Error handling and logging capabilities</li> </ul> <p>The design allows for easy extension to support additional LLM providers while maintaining a consistent interface for SAP applications to leverage AI capabilities through standardized chat completion methods.</p>"},{"location":"Claude%203.5%20Sonnet/ZLLM_CLIENT_ANTHROPIC/ZCL_LLM_CLIENT_ANTHROPIC_CLAS/","title":"Class ZCL_LLM_CLIENT_ANTHROPIC","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Sonnet/ZLLM_CLIENT_ANTHROPIC/ZCL_LLM_CLIENT_ANTHROPIC_CLAS/#overview","title":"Overview","text":"<p>The <code>ZCL_LLM_CLIENT_ANTHROPIC</code> class implements a client for the Anthropic LLM API, inheriting from <code>ZCL_LLM_CLIENT_BASE</code>. It handles communication with Anthropic's API endpoints for chat completions.</p> <p>Public methods:</p> <ul> <li><code>GET_CLIENT</code>: Factory method returning a new client instance</li> <li><code>CONSTRUCTOR</code>: Initializes a new client instance with given configuration</li> <li><code>NEW_REQUEST</code>: Creates a new chat request with Anthropic-specific defaults (max tokens 8192)</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZLLM_CLIENT_ANTHROPIC/ZCL_LLM_CLIENT_ANTHROPIC_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li>Parent class: <code>ZCL_LLM_CLIENT_BASE</code></li> <li>HTTP client wrapper: <code>ZCL_LLM_HTTP_CLIENT_WRAPPER</code></li> <li>Configuration structures: <code>ZLLM_CLNT_CONFIG</code>, <code>ZLLM_PROVIDERS</code></li> <li>JSON parser: <code>/UI2/CL_JSON</code></li> <li>Encryption BADI: <code>ZCL_LLM_COMMON=&gt;GET_LLM_BADI</code></li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZLLM_CLIENT_ANTHROPIC/ZCL_LLM_CLIENT_ANTHROPIC_CLAS/#details","title":"Details","text":"<p>The class handles specific requirements of the Anthropic API:</p> <ol> <li>Message Processing</li> </ol> <pre><code>flowchart LR\n    A[Input Messages] --&gt; B{Message Type}\n    B --&gt;|System| C[System Messages Array]\n    B --&gt;|Other| D[Messages Array]\n    C --&gt; E[Build JSON]\n    D --&gt; E\n    E --&gt; F[HTTP Request]</code></pre> <ol> <li>Authentication Flow</li> </ol> <pre><code>flowchart TD\n    A[Start] --&gt; B{Encrypted Auth?}\n    B --&gt;|Yes| C[Get BADI Implementation]\n    C --&gt; D[Decrypt Value]\n    B --&gt;|No| E[Use Direct Value]\n    D --&gt; F[Set x-api-key Header]\n    E --&gt; F</code></pre> <p>Key implementation details:</p> <ul> <li>Handles system messages separately from other message types</li> <li>Supports tool definitions and tool calls</li> <li>Parses Anthropic-specific response format including usage metrics</li> <li>Implements structured error handling with retriable status detection</li> <li>Sets required API version header (2023-06-01)</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZLLM_CLIENT_AZUREOAI/","title":"Package ZLLM_CLIENT_AZUREOAI","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Sonnet/ZLLM_CLIENT_AZUREOAI/#overview","title":"Overview","text":"<p>This ABAP package implements a comprehensive integration layer for Azure OpenAI services, enabling SAP systems to interact with Azure's AI capabilities. It provides a structured framework for handling AI requests and responses through Azure's API endpoints, with specialized components for authentication, JSON schema management, and communication protocols. The package is designed with a modular architecture that separates client communication from data structure handling, making it maintainable and extensible for different Azure OpenAI service interactions.</p> <p>The implementation follows SAP's object-oriented patterns and encapsulates all Azure-specific logic while providing a clean interface for consuming applications. It handles the technical complexities of Azure OpenAI integration, allowing SAP developers to focus on business logic rather than API implementation details.</p>"},{"location":"Claude%203.5%20Sonnet/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_CLIENT_AZUREOAI_CLAS/","title":"Class ZCL_LLM_CLIENT_AZUREOAI","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Sonnet/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_CLIENT_AZUREOAI_CLAS/#overview","title":"Overview","text":"<p>The <code>ZCL_LLM_CLIENT_AZUREOAI</code> class implements a client for Azure OpenAI services, inheriting from <code>ZCL_LLM_CLIENT_BASE</code>. It provides functionality to interact with Azure's AI services through their API.</p> <p>Public methods:</p> <ul> <li><code>GET_CLIENT</code>: Factory method that creates and returns a new Azure OpenAI client instance</li> <li><code>CONSTRUCTOR</code>: Initializes a new client instance with provided client and provider configurations</li> </ul> <p>The class handles authentication and endpoint management for Azure OpenAI API calls with API version 2024-10-21.</p>"},{"location":"Claude%203.5%20Sonnet/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_CLIENT_AZUREOAI_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li>Parent class: <code>ZCL_LLM_CLIENT_BASE</code></li> <li><code>ZCL_LLM_HTTP_CLIENT_WRAPPER</code>: For HTTP client handling</li> <li><code>ZCL_LLM_COMMON</code>: For BADI implementation access</li> <li><code>ZCL_LLM_SO_JS_AZUREOAI</code>: For structured output handling</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_CLIENT_AZUREOAI_CLAS/#details","title":"Details","text":"<p>The class implements a specific client for Azure OpenAI services with the following key aspects:</p> <ol> <li>Authentication handling through encrypted credentials</li> <li>HTTP client management</li> <li>Endpoint construction for chat completions</li> </ol> <pre><code>flowchart TD\n    A[Client Request] --&gt; B[GET_CLIENT]\n    B --&gt; C[CONSTRUCTOR]\n    C --&gt; D[Initialize]\n    D --&gt; E[Get HTTP Client]\n    E --&gt; F[Set Authentication]\n    F --&gt; G[Ready for API Calls]\n\n    subgraph Authentication\n    F --&gt; H[Check Encrypted Auth]\n    H --&gt; I[Get BADI Implementation]\n    I --&gt; J[Decrypt Credentials]\n    J --&gt; K[Set API Key Header]\n    end</code></pre> <p>The authentication process uses a BADI implementation for credential decryption, supporting API key authentication type ('A'). The chat endpoint is constructed dynamically using the provider model and a fixed API version, following the pattern: <code>/{model}/chat/completions?api-version={version}</code>.</p>"},{"location":"Claude%203.5%20Sonnet/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_SO_JS_AZUREOAI_CLAS/","title":"Class ZCL_LLM_SO_JS_AZUREOAI","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Sonnet/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_SO_JS_AZUREOAI_CLAS/#overview","title":"Overview","text":"<p>This class implements JSON schema handling for Azure OpenAI responses. It inherits from <code>zcl_llm_so_js</code> and provides specialized schema wrapping functionality. The class has no public methods as it only redefines protected methods from its parent class.</p>"},{"location":"Claude%203.5%20Sonnet/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_SO_JS_AZUREOAI_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li>Inherits from <code>zcl_llm_so_js</code></li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_SO_JS_AZUREOAI_CLAS/#details","title":"Details","text":"<p>The class provides a specific JSON schema implementation for Azure OpenAI responses by wrapping the schema content with required Azure OpenAI specific elements:</p> <ul> <li><code>pre_schema</code>: Adds the opening wrapper including name, strict mode flag and schema opening</li> <li><code>post_schema</code>: Closes the schema structure</li> </ul> <pre><code>classDiagram\n    zcl_llm_so_js &lt;|-- zcl_llm_so_js_azureoai\n    class zcl_llm_so_js_azureoai {\n        #pre_schema()\n        #post_schema()\n    }\n    class zcl_llm_so_js {\n        #pre_schema()*\n        #post_schema()*\n    }</code></pre> <p>The schema generation follows this sequence:</p> <pre><code>sequenceDiagram\n    participant Parent as zcl_llm_so_js\n    participant Child as zcl_llm_so_js_azureoai\n\n    Parent-&gt;&gt;Child: pre_schema()\n    Note over Child: Adds Azure OpenAI header\n    Parent-&gt;&gt;Parent: Schema generation\n    Parent-&gt;&gt;Child: post_schema()\n    Note over Child: Closes schema structure</code></pre>"},{"location":"Claude%203.5%20Sonnet/ZLLM_CLIENT_OLLAMA/","title":"Package ZLLM_CLIENT_OLLAMA","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Sonnet/ZLLM_CLIENT_OLLAMA/#overview","title":"Overview","text":"<p>This ABAP package provides a comprehensive framework for integrating Large Language Models (LLMs) into SAP systems, with a primary focus on Ollama LLM services. It implements a modular client architecture that handles the complete communication lifecycle between SAP and LLM services.</p> <p>The package abstracts the complexity of LLM interactions through a clean interface design, managing HTTP communication, request/response formatting, and specialized message processing. It includes robust error handling and supports both synchronous and asynchronous processing modes.</p> <p>Key capabilities include:</p> <ul> <li>Flexible client implementation for different LLM providers</li> <li>Standardized message handling and formatting</li> <li>Built-in support for tool calls and function execution</li> <li>Configurable authentication mechanisms</li> <li>Structured response parsing and processing</li> </ul> <p>The architecture follows SOLID principles and allows for easy extension to support additional LLM providers while maintaining a consistent interface for SAP applications consuming LLM services.</p>"},{"location":"Claude%203.5%20Sonnet/ZLLM_CLIENT_OLLAMA/ZCL_LLM_CLIENT_OLLAMA_CLAS/","title":"Class ZCL_LLM_CLIENT_OLLAMA","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Sonnet/ZLLM_CLIENT_OLLAMA/ZCL_LLM_CLIENT_OLLAMA_CLAS/#overview","title":"Overview","text":"<p>The <code>ZCL_LLM_CLIENT_OLLAMA</code> class implements a client for interacting with Ollama LLM services. It inherits from <code>ZCL_LLM_CLIENT_BASE</code> and provides specialized handling for Ollama-specific features.</p> <p>Public methods:</p> <ul> <li><code>get_client</code>: Factory method that creates and returns a new Ollama client instance</li> <li><code>constructor</code>: Initializes the Ollama client with client and provider configurations</li> </ul> <p>The class handles:</p> <ul> <li>Authentication via optional API keys</li> <li>Request/response formatting specific to Ollama</li> <li>Structured output processing</li> <li>Tool calls management</li> <li>Message parsing and formatting</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZLLM_CLIENT_OLLAMA/ZCL_LLM_CLIENT_OLLAMA_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li>Parent class: <code>ZCL_LLM_CLIENT_BASE</code></li> <li><code>ZCL_LLM_HTTP_CLIENT_WRAPPER</code>: For HTTP communication</li> <li><code>ZCL_LLM_COMMON</code>: Utility class for JSON handling</li> <li>BAdI implementation for encryption handling</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZLLM_CLIENT_OLLAMA/ZCL_LLM_CLIENT_OLLAMA_CLAS/#details","title":"Details","text":"<p>The class implements a specialized HTTP client for Ollama with focus on proper request/response handling:</p> <pre><code>flowchart TD\n    A[Client Request] --&gt; B[Build Request JSON]\n    B --&gt; C[HTTP Request]\n    C --&gt; D[Handle Response]\n    D --&gt; E{Check Status}\n    E --&gt;|Success| F[Parse Response]\n    E --&gt;|Error| G[Handle Error]\n    F --&gt; H[Process Tool Calls]\n    F --&gt; I[Handle Structured Output]\n    H --&gt; J[Return Response]\n    I --&gt; J\n    G --&gt; J</code></pre> <p>Key implementation aspects:</p> <ul> <li>Supports streaming control via <code>stream</code> parameter</li> <li>Handles Ollama-specific format parameters for structured output</li> <li>Implements custom options handling in Ollama format</li> <li>Provides detailed error handling with retry capabilities for rate limits and timeouts</li> <li>Processes tool calls with argument parsing and validation</li> <li>Supports encrypted authentication via custom headers</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZLLM_CLIENT_OPENAI/","title":"Package ZLLM_CLIENT_OPENAI","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Sonnet/ZLLM_CLIENT_OPENAI/#overview","title":"Overview","text":"<p>This ABAP package implements a modular integration framework for OpenAI's Large Language Model (LLM) services. It provides a structured approach to handle API communication with OpenAI's endpoints through specialized client handling and JSON schema management. The package follows object-oriented design principles with inheritance to separate generic LLM functionality from OpenAI-specific implementations, making it extensible for other LLM providers while maintaining consistent interfaces.</p> <p>The architecture ensures clean separation between communication layers, data transformation, and business logic, with dedicated components handling authentication, request formatting, and response processing specifically tailored for OpenAI's API requirements.</p>"},{"location":"Claude%203.5%20Sonnet/ZLLM_CLIENT_OPENAI/ZCL_LLM_CLIENT_OPENAI_CLAS/","title":"Class ZCL_LLM_CLIENT_OPENAI","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Sonnet/ZLLM_CLIENT_OPENAI/ZCL_LLM_CLIENT_OPENAI_CLAS/#overview","title":"Overview","text":"<p>The <code>ZCL_LLM_CLIENT_OPENAI</code> class implements a client for OpenAI's API services. It inherits from <code>ZCL_LLM_CLIENT_BASE</code> and provides functionality to:</p> <ul> <li>Create OpenAI client instances via the factory method <code>GET_CLIENT</code></li> <li>Handle authentication with OpenAI's API</li> <li>Configure HTTP endpoints and client settings</li> </ul> <p>Public methods:</p> <ul> <li><code>GET_CLIENT</code>: Factory method returning a configured OpenAI client instance</li> <li><code>CONSTRUCTOR</code>: Initializes a new client instance with provided configurations</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZLLM_CLIENT_OPENAI/ZCL_LLM_CLIENT_OPENAI_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li>Parent class: <code>ZCL_LLM_CLIENT_BASE</code></li> <li>Interface: <code>ZIF_LLM_CLIENT</code></li> <li>Helper class: <code>ZCL_LLM_HTTP_CLIENT_WRAPPER</code></li> <li>BAdI: <code>ZCL_LLM_COMMON=&gt;GET_LLM_BADI</code></li> <li>Structured output class: <code>ZCL_LLM_SO_JS_OA</code></li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZLLM_CLIENT_OPENAI/ZCL_LLM_CLIENT_OPENAI_CLAS/#details","title":"Details","text":"<p>The class implements OpenAI-specific handling of:</p> <ul> <li>Authentication using Bearer tokens</li> <li>Endpoint configuration pointing to '/chat/completions'</li> <li>Encrypted authentication data processing</li> </ul> <p>Authentication flow:</p> <pre><code>flowchart LR\n    A[Start] --&gt; B{Auth Encrypted?}\n    B --&gt;|Yes| C[Get BAdI Implementation]\n    C --&gt; D[Decrypt Auth Value]\n    D --&gt; E{Auth Type = 'A'?}\n    B --&gt;|No| E\n    E --&gt;|Yes| F[Set Bearer Token]\n    E --&gt;|No| G[End]\n    F --&gt; G</code></pre> <p>The class follows a factory pattern for instantiation, ensuring proper configuration and initialization of OpenAI clients. It handles the specifics of OpenAI's API requirements while abstracting the implementation details from the consuming code.</p>"},{"location":"Claude%203.5%20Sonnet/ZLLM_CLIENT_OPENAI/ZCL_LLM_SO_JS_OA_CLAS/","title":"Class ZCL_LLM_SO_JS_OA","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Sonnet/ZLLM_CLIENT_OPENAI/ZCL_LLM_SO_JS_OA_CLAS/#overview","title":"Overview","text":"<p>This class implements OpenAI-specific JSON schema handling by inheriting from <code>zcl_llm_so_js</code>. It provides a specialized framework for constructing JSON schemas specifically formatted for OpenAI interactions. The class has no public methods but overrides protected methods from its parent class to add OpenAI-specific schema wrapping.</p>"},{"location":"Claude%203.5%20Sonnet/ZLLM_CLIENT_OPENAI/ZCL_LLM_SO_JS_OA_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li>Inherits from base class <code>zcl_llm_so_js</code></li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZLLM_CLIENT_OPENAI/ZCL_LLM_SO_JS_OA_CLAS/#details","title":"Details","text":"<p>The class implements a specific JSON schema structure required for OpenAI by wrapping the schema content with required OpenAI-specific elements:</p> <ul> <li><code>pre_schema</code>: Adds the opening structure including name, strict mode flag, and schema opening</li> <li><code>post_schema</code>: Closes the schema structure</li> </ul> <p>The schema construction follows this pattern:</p> <pre><code>sequenceDiagram\n    participant Parent as zcl_llm_so_js\n    participant Child as zcl_llm_so_js_oa\n\n    Parent-&gt;&gt;Child: Schema construction starts\n    Child-&gt;&gt;Parent: pre_schema adds header\n    Note over Parent: Schema content construction&lt;br&gt;(handled by parent)\n    Child-&gt;&gt;Parent: post_schema closes structure</code></pre> <p>The resulting schema follows this structure:</p> <pre><code>{\n  \"name\": \"Response\",\n  \"strict\": true,\n  \"schema\": {\n    // schema content from parent class\n  }\n}\n</code></pre>"},{"location":"Claude%203.5%20Sonnet/ZLLM_CLIENT_OPENROUTER/","title":"Package ZLLM_CLIENT_OPENROUTER","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Sonnet/ZLLM_CLIENT_OPENROUTER/#overview","title":"Overview","text":"<p>This ABAP package implements a specialized Large Language Model (LLM) client integration for the OpenRouter service. It provides a structured way to communicate with OpenRouter's API through HTTP, handling authentication, request formatting, and response processing. The package follows a layered architecture with base functionality inheritance and includes strict JSON schema validation for reliable data exchange. The implementation enables SAP systems to leverage various LLM models through OpenRouter's unified API interface while maintaining proper data structures and communication protocols.</p> <p>The solution is designed to be maintainable and extensible, separating concerns between client communication, data structure handling, and schema validation. It integrates with SAP's standard HTTP client infrastructure while adding LLM-specific functionality for OpenRouter's requirements.</p>"},{"location":"Claude%203.5%20Sonnet/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_CLIENT_OPENROUTER_CLAS/","title":"Class ZCL_LLM_CLIENT_OPENROUTER","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Sonnet/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_CLIENT_OPENROUTER_CLAS/#overview","title":"Overview","text":"<p>The <code>ZCL_LLM_CLIENT_OPENROUTER</code> class implements a client for the OpenRouter LLM service, inheriting from <code>ZCL_LLM_CLIENT_BASE</code>. It provides functionality to:</p> <ul> <li>Create client instances via the factory method <code>GET_CLIENT</code></li> <li>Handle authentication with OpenRouter API</li> <li>Set specific HTTP headers required by OpenRouter</li> <li>Configure chat completion endpoints</li> </ul> <p>Public methods:</p> <ul> <li><code>GET_CLIENT</code>: Factory method returning a configured OpenRouter client instance</li> <li><code>CONSTRUCTOR</code>: Initializes a new client instance with given configurations</li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_CLIENT_OPENROUTER_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li>Parent class: <code>ZCL_LLM_CLIENT_BASE</code></li> <li>Interface: <code>ZIF_LLM_CLIENT</code></li> <li>Helper class: <code>ZCL_LLM_HTTP_CLIENT_WRAPPER</code></li> <li>BAdI: <code>ZCL_LLM_COMMON=&gt;GET_LLM_BADI</code></li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_CLIENT_OPENROUTER_CLAS/#details","title":"Details","text":"<p>The class implements specific OpenRouter requirements:</p> <pre><code>flowchart LR\n    A[Client Creation] --&gt; B[HTTP Setup]\n    B --&gt; C[Header Setup]\n    C --&gt; D[Authentication]\n    D --&gt; E[Ready for Use]\n\n    subgraph Header Setup\n    C1[Set Referer] \n    C2[Set Title]\n    end\n\n    subgraph Authentication\n    D1[Check Encrypted Auth]\n    D2[Decrypt if needed]\n    D3[Set Bearer Token]\n    end</code></pre> <p>Key implementation aspects:</p> <ul> <li>Uses '/chat/completions' as endpoint</li> <li>Sets OpenRouter-specific headers:</li> <li>HTTP-Referer: 'https://abap-ai.com'</li> <li>X-Title: 'ABAP LLM Client'</li> <li>Supports encrypted authentication through a BAdI implementation</li> <li>Creates structured output using <code>ZCL_LLM_SO_JS_OR</code> class</li> </ul> <p>The authentication process handles encrypted credentials through a pluggable encryption implementation, making the security approach flexible and extensible.</p>"},{"location":"Claude%203.5%20Sonnet/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_SO_JS_OR_CLAS/","title":"Class ZCL_LLM_SO_JS_OR","text":"<p>AI Generated documentation.</p>"},{"location":"Claude%203.5%20Sonnet/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_SO_JS_OR_CLAS/#overview","title":"Overview","text":"<p>This class extends <code>ZCL_LLM_SO_JS</code> and provides JSON schema handling functionality. It specifically handles the outer structure of a JSON schema by adding opening and closing elements for a strict response schema. The class has no public methods, only redefined protected methods from its parent class.</p>"},{"location":"Claude%203.5%20Sonnet/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_SO_JS_OR_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li>Inherits from <code>ZCL_LLM_SO_JS</code></li> </ul>"},{"location":"Claude%203.5%20Sonnet/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_SO_JS_OR_CLAS/#details","title":"Details","text":"<p>The class implements a specific JSON schema structure by redefining two methods from its parent class:</p> <pre><code>classDiagram\n    ZCL_LLM_SO_JS &lt;|-- ZCL_LLM_SO_JS_OR\n    class ZCL_LLM_SO_JS_OR{\n        #pre_schema()\n        #post_schema()\n    }</code></pre> <p>The schema generation follows this pattern:</p> <ol> <li><code>pre_schema</code>: Adds the opening structure defining a strict response schema with <code>\"name\":\"Response\",\"strict\":true,\"schema\":{</code></li> <li>Parent class likely handles the schema content</li> <li><code>post_schema</code>: Closes the schema structure with <code>}</code></li> </ol> <p>This creates a complete JSON schema envelope around the actual schema content that is handled by the parent class.</p>"},{"location":"Deepseek%20R1/","title":"Package ZLLM_CLIENT","text":"<p>AI Generated documentation.</p>"},{"location":"Deepseek%20R1/#overview","title":"Overview","text":"<p>This ABAP package provides a secure, extensible framework for integrating Large Language Models (LLMs) into SAP systems. It enables standardized interaction with multiple AI providers (OpenAI, Azure, Anthropic, etc.) through encrypted communication, structured request/response handling, and centralized configuration management.</p>"},{"location":"Deepseek%20R1/#core-capabilities","title":"Core Capabilities","text":"<ul> <li>Multi-Provider Support: Implements dedicated clients for major LLM APIs (OpenAI, Azure, Anthropic, OpenRouter) with provider-specific authentication and payload formatting  </li> <li>Security Framework: Integrates certificate-based encryption, authorization checks, and secure credential storage using SAP SSF/STRUST  </li> <li>Structured AI Interactions: Manages complex chat workflows with tool integration (calculator, echo), JSON schema validation, and template-based content generation  </li> <li>Operational Control: Configurable logging, usage statistics, and system-wide activation controls via central configuration tables  </li> <li>Extensible Architecture: Uses BAdIs and factory patterns for dynamic implementation swapping, enabling custom tools, encryption, and authorization scenarios  </li> </ul>"},{"location":"Deepseek%20R1/#technical-foundation","title":"Technical Foundation","text":"<ul> <li>Abstract base classes for HTTP communication, response parsing, and client lifecycle management  </li> <li>JSON schema generation from ABAP structures with type validation  </li> <li>Lightweight template engine supporting conditional logic and loops  </li> <li>Pluggable components for encryption, logging, and statistics via standardized interfaces  </li> <li>Central exception handling with domain-specific error classes (HTTP, auth, validation)  </li> </ul>"},{"location":"Deepseek%20R1/#integration-features","title":"Integration Features","text":"<ul> <li>CRUD operations for provider configurations with ALV-based maintenance  </li> <li>Support for streaming responses and asynchronous processing  </li> <li>Tool execution framework enabling LLMs to trigger ABAP logic  </li> <li>Dynamic client instantiation with model/provider relationship validation</li> </ul>"},{"location":"Deepseek%20R1/ZCL_LLM_AUTH_DISABLED_CLAS/","title":"Class ZCL_LLM_AUTH_DISABLED","text":"<p>AI Generated documentation.</p>"},{"location":"Deepseek%20R1/ZCL_LLM_AUTH_DISABLED_CLAS/#overview","title":"Overview","text":"<p>The class <code>zcl_llm_auth_disabled</code> provides a no-operation implementation of authorization checks for cryptographic and provider management operations. It explicitly bypasses all authorization validations, allowing unrestricted access to sensitive functionalities.  </p> <p>Public Methods:  </p> <ul> <li><code>zif_llm_auth~check_decrypt</code>: No-op for decryption authorization checks.  </li> <li><code>zif_llm_auth~check_encrypt</code>: No-op for encryption authorization checks.  </li> <li><code>zif_llm_auth~check_get_client</code>: Skips authorization for client retrieval.  </li> <li><code>zif_llm_auth~check_provider_maintenance</code>: Allows provider maintenance without restrictions.  </li> </ul> <p>Designed for scenarios where authorization enforcement is delegated to external systems or explicitly disabled.  </p>"},{"location":"Deepseek%20R1/ZCL_LLM_AUTH_DISABLED_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li>Interface: Implements <code>zif_llm_auth</code> to adhere to authorization contracts.  </li> <li>BADI: Intended for registration via <code>ZLLM_DEFAULTS</code> to override default auth behavior.  </li> <li>Exception: References <code>zcx_llm_authorization</code> (not raised in this implementation).  </li> </ul>"},{"location":"Deepseek%20R1/ZCL_LLM_AUTH_DISABLED_CLAS/#details","title":"Details","text":"<pre><code>flowchart LR  \n    BADI_ZLLM_DEFAULTS[[BADI ZLLM_DEFAULTS]] --&gt;|Registers| zcl_llm_auth_disabled  \n    zcl_llm_auth_disabled -.-&gt;|Implements| zif_llm_auth  \n    zif_llm_auth --&gt;|Defines contracts| check_methods[check_decrypt, check_encrypt, etc.]  \n    classDef badi fill:#d4eafc,stroke:#2a6ebb;  \n    classDef interface fill:#f0f8ff,stroke:#4682b4;  \n    class BADI_ZLLM_DEFAULTS badi  \n    class zif_llm_auth interface  </code></pre> <p>Design Intent:  </p> <ul> <li>Empty method implementations ensure no authorization exceptions are raised, as validated by test cases (e.g., <code>ltcl_llm_auth_disabled</code>).  </li> <li>Acts as a fallback or testing stub when authorization is managed externally or disabled.  </li> <li>Comments in methods (<code>#EC EMPTY_PROCEDURE</code>) suppress static check warnings, signaling intentional empty implementations.  </li> </ul> <p>Integration:  </p> <ul> <li>Part of a pluggable authorization framework via BADI, enabling runtime substitution of auth strategies.  </li> <li>Critical for environments requiring unconditional access (e.g., automated systems, emergency maintenance).</li> </ul>"},{"location":"Deepseek%20R1/ZCL_LLM_CALL_LOGGER_CLAS/","title":"Class ZCL_LLM_CALL_LOGGER","text":"<p>AI Generated documentation.</p>"},{"location":"Deepseek%20R1/ZCL_LLM_CALL_LOGGER_CLAS/#overview","title":"Overview","text":"<p>The class <code>ZCL_LLM_CALL_LOGGER</code> implements logging functionality for LLM (Large Language Model) interactions. It provides conditional logging controlled by system configuration and user-based filtering.</p> <p>Public Methods:</p> <ul> <li><code>ZIF_LLM_CALL_LOGGER~ADD</code>:   Inserts a log entry into <code>ZLLM_CALL_LOG</code> only if logging is enabled for the current context</li> <li><code>CONSTRUCTOR</code>:   Initializes activation state by checking configuration from <code>ZLLM_SYSTEM</code></li> </ul> <p>Key features:</p> <ul> <li>Activation controlled by <code>ZLLM_SYSTEM</code> configuration</li> <li>User-specific logging using wildcard/exact match filters</li> <li>Automatic population of technical fields (timestamp/user) via database defaults</li> </ul>"},{"location":"Deepseek%20R1/ZCL_LLM_CALL_LOGGER_CLAS/#dependencies","title":"Dependencies","text":"<p>Database Tables:</p> <ul> <li><code>ZLLM_SYSTEM</code>: Stores activation flag (<code>SAVE_CALLS</code>) and user filter (<code>CALL_FILTER_UNAME</code>)</li> <li><code>ZLLM_CALL_LOG</code>: Target table for log entries with technical fields <code>CREATED_AT</code>/<code>CREATED_BY</code></li> </ul>"},{"location":"Deepseek%20R1/ZCL_LLM_CALL_LOGGER_CLAS/#details","title":"Details","text":"<pre><code>flowchart TD\n  Constructor[CONSTRUCTOR] --&gt; A[Read ZLLM_SYSTEM]\n  A --&gt; Condition1{SAVE_CALLS = TRUE?}\n  Condition1 --&gt;|Yes| Condition2{User matches filter?}\n  Condition2 --&gt;|Yes| Activate[Set ACTIVE = TRUE]\n  Condition1 --&gt;|No| Skip[Remain inactive]\n  Condition2 --&gt;|No| Skip\n\n  AddMethod[ZIF_LLM_CALL_LOGGER~ADD] --&gt; CheckActive{ACTIVE?}\n  CheckActive --&gt;|Yes| Insert[Insert entry to ZLLM_CALL_LOG]\n  CheckActive --&gt;|No| Exit[No action]</code></pre> <p>Key Implementation Notes:</p> <ol> <li>Activation Logic:</li> <li>Combines system-level activation (<code>SAVE_CALLS</code>) with user filter (<code>CALL_FILTER_UNAME</code>)</li> <li> <p>Uses <code>SY-UNAME</code> for runtime user context comparison</p> </li> <li> <p>Database Integration:</p> </li> <li>Technical fields (<code>CREATED_AT</code>, <code>CREATED_BY</code>) are managed through database defaults</li> <li> <p>No explicit field mapping in INSERT operation - relies on table structure</p> </li> <li> <p>Test Strategy:</p> </li> <li>Uses <code>CL_OSQL_TEST_ENVIRONMENT</code> for in-memory test doubles</li> <li>Complete isolation between test cases via <code>CLEAR_DOUBLES()</code></li> <li>Verifies parameter handling through test-specific entry structures</li> </ol> <p>Performance Considerations:</p> <ul> <li>Single <code>SELECT SINGLE</code> during object instantiation</li> <li>No database operations when logging is inactive</li> <li>User filter evaluation occurs once per logger instance</li> </ul>"},{"location":"Deepseek%20R1/ZCL_LLM_CHAT_REQUEST_CLAS/","title":"Class ZCL_LLM_CHAT_REQUEST","text":"<p>AI Generated documentation.</p>"},{"location":"Deepseek%20R1/ZCL_LLM_CHAT_REQUEST_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_chat_request</code> class implements LLM chat request management through interface <code>zif_llm_chat_request</code>, providing structured message/tool handling and configuration for AI interactions.</p> <p>Core Functionality:</p> <ul> <li>Message management: Add/clear individual or bulk messages</li> <li>Tool integration: Register tools and handle tool execution results</li> <li>Request configuration: Control response formatting and tool selection behavior</li> </ul> <p>Public Methods:</p> Category Methods Message Handling <code>add_message</code>, <code>add_messages</code>, <code>clear_messages</code>, <code>add_tool_choice</code> Tool Management <code>add_tool</code>, <code>add_tools</code>, <code>add_tool_result</code>, <code>clear_tools</code> Configuration <code>set_tool_choice</code>, <code>set_structured_output_active</code> Data Access <code>get_internal_request</code>, <code>get_messages</code>, <code>get_tools</code>, <code>options</code>"},{"location":"Deepseek%20R1/ZCL_LLM_CHAT_REQUEST_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li>Interface: <code>zif_llm_client</code> (role constants)</li> <li>Utility Class: <code>zcl_llm_common</code> (JSON conversion)</li> <li>Data Structure: <code>zllm_request</code> (core container type)</li> <li>Interface: <code>zif_llm_chat_request</code> (implemented contract)</li> </ul>"},{"location":"Deepseek%20R1/ZCL_LLM_CHAT_REQUEST_CLAS/#details","title":"Details","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant zcl_llm_chat_request\n    participant zllm_request\n    participant Tool\n\n    Client-&gt;&gt;zcl_llm_chat_request: add_message()\n    zcl_llm_chat_request-&gt;&gt;zllm_request: Append to messages\n    Client-&gt;&gt;zcl_llm_chat_request: add_tool(Tool)\n    zcl_llm_chat_request-&gt;&gt;zllm_request: Store tool + set tool_choice\n    Client-&gt;&gt;zcl_llm_chat_request: add_tool_result(Tool)\n    zcl_llm_chat_request-&gt;&gt;Tool: get_result()\n    Tool--&gt;&gt;zcl_llm_chat_request: tool_result\n    zcl_llm_chat_request-&gt;&gt;zcl_llm_common: to_json()\n    zcl_llm_chat_request-&gt;&gt;zllm_request: Add tool message</code></pre> <p>Key Implementation Aspects:</p> <ol> <li>State Preservation: Maintains complete request context in <code>zllm_request</code> structure including:</li> <li>Message history with role metadata</li> <li>Registered tools with automatic tool_choice updates</li> <li> <p>Structured output configuration flags</p> </li> <li> <p>Tool Result Handling:</p> </li> </ol> <pre><code>METHOD add_tool_result.\n  DATA(tool_result) = tool-&gt;get_result().  // Dynamic interface binding\n  APPEND VALUE #(role = zif_llm_client=&gt;role_tool,\n                content = zcl_llm_common=&gt;to_json(...))  // Structured JSON conversion\nENDMETHOD.\n</code></pre> <ol> <li>Validation Patterns:</li> <li>Automatic role assignment for tool responses (<code>role_tool</code>)</li> <li>Tool call ID propagation through message chain</li> <li> <p>Immutable request export via <code>get_internal_request</code></p> </li> <li> <p>Configuration Cascade:</p> </li> </ol> <pre><code>set_tool_choice(AUTO) -&gt; Affects subsequent tool registrations\nset_structured_output_active -&gt; Forces JSON schema validation\nadd_tool_choice -&gt; Creates assistant role message with tool calls\n</code></pre>"},{"location":"Deepseek%20R1/ZCL_LLM_CLIENT_BASE_CLAS/","title":"Class ZCL_LLM_CLIENT_BASE","text":"<p>AI Generated documentation.</p>"},{"location":"Deepseek%20R1/ZCL_LLM_CLIENT_BASE_CLAS/#overview","title":"Overview","text":"<p>Base abstract class for LLM client implementations providing common functionality for:</p> <ul> <li>HTTP communication handling</li> <li>Structured JSON request/response processing</li> <li>Tool call integrations</li> <li>Statistics tracking</li> </ul> <p>Key Public Methods:  </p> Method Description <code>CONSTRUCTOR</code> Initializes client with provider/config data and UUID generation <code>ZIF_LLM_CLIENT~CHAT</code> Main method for executing LLM requests with full processing chain <code>ZIF_LLM_CLIENT~NEW_REQUEST</code> Creates preconfigured request object with default options <code>ZIF_LLM_CLIENT~GET_CLIENT</code> Factory method for provider-specific client instances"},{"location":"Deepseek%20R1/ZCL_LLM_CLIENT_BASE_CLAS/#dependencies","title":"Dependencies","text":"<p>Main external components:  </p> <ul> <li>Interfaces: <code>ZIF_LLM_HTTP_CLIENT_WRAPPER</code> (HTTP communication) <code>ZIF_LLM_TOOL_PARSER</code> (Tool schema processing) <code>ZIF_LLM_STATISTICS</code> (Usage metrics tracking)  </li> <li>Exceptions: <code>ZCX_LLM_VALIDATION</code> <code>ZCX_LLM_AUTHORIZATION</code> </li> </ul>"},{"location":"Deepseek%20R1/ZCL_LLM_CLIENT_BASE_CLAS/#details","title":"Details","text":""},{"location":"Deepseek%20R1/ZCL_LLM_CLIENT_BASE_CLAS/#main-processing-flow","title":"Main Processing Flow","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant BaseClient\n    participant HTTPClient\n    participant Statistics\n\n    Client-&gt;&gt;BaseClient: chat()\n    BaseClient-&gt;&gt;BaseClient: build_request_json()\n    BaseClient-&gt;&gt;HTTPClient: communicate()\n    HTTPClient--&gt;&gt;BaseClient: HTTP response\n    BaseClient-&gt;&gt;BaseClient: handle_http_response()\n    alt Error\n        BaseClient-&gt;&gt;Client: Error details\n    else Success\n        BaseClient-&gt;&gt;Statistics: add()\n        BaseClient-&gt;&gt;Client: Structured response\n    end</code></pre>"},{"location":"Deepseek%20R1/ZCL_LLM_CLIENT_BASE_CLAS/#key-features","title":"Key Features","text":"<ol> <li>Structured Output Handling    Uses <code>ZIF_LLM_SO</code> implementations for JSON schema validation:</li> </ol> <pre><code>classDiagram\n    class BaseClient {\n        +parse_structured_output()\n    }\n    class ZIF_LLM_SO {\n        &lt;&lt;interface&gt;&gt;\n        +get_schema()\n        +get_datatype()\n    }\n    BaseClient --&gt; ZIF_LLM_SO : creates/uses</code></pre> <ol> <li>Tool Call Processing    Implements recursive tool call resolution:</li> </ol> <pre><code>LOOP AT tool_calls\n  TRY.\n      PARSE arguments\n      VALIDATE against tool schema\n      APPEND to response\n    CATCH ERROR\n      HANDLE validation failures\n</code></pre> <ol> <li>Request Building    Combines multiple configuration sources:</li> <li>Client-specific model parameters</li> <li>Structured output requirements</li> <li>Tool definitions with schema validation</li> <li> <p>Custom options (temperature, top_p etc.)</p> </li> <li> <p>Statistics Tracking    Collects granular metrics through BAdI implementation:</p> </li> </ol> <pre><code>DATA(statistics) = BAdI-&gt;get_statistics_impl()\nstatistics-&gt;add(\n  call_date     = sy-datum\n  call_time     = sy-uzeit\n  duration      = measurement\n  tokens        = usage metrics\n)\n</code></pre>"},{"location":"Deepseek%20R1/ZCL_LLM_CLIENT_BASE_CLAS/#error-handling","title":"Error Handling","text":"<p>Implements retry logic for specific HTTP status codes:</p> <ul> <li>429 (Too Many Requests)</li> <li>408 (Timeout) Maintains error context with:</li> <li>HTTP status codes</li> <li>Provider-specific error messages</li> <li>Tool validation failures</li> </ul>"},{"location":"Deepseek%20R1/ZCL_LLM_COMMON_CLAS/","title":"Class ZCL_LLM_COMMON","text":"<p>AI Generated documentation.</p>"},{"location":"Deepseek%20R1/ZCL_LLM_COMMON_CLAS/#overview","title":"Overview","text":"<p>The class <code>zcl_llm_common</code> provides utilities for JSON serialization/deserialization and integration with a custom LLM (Large Language Model) BAdI implementation. Its primary functions include:  </p> <ul> <li><code>TO_JSON</code>: Converts ABAP data structures to JSON strings, supporting compression and lowercase key formatting.  </li> <li><code>FROM_JSON</code>: Deserializes JSON strings into ABAP structures with field mapping.  </li> <li><code>GET_LLM_BADI</code>: Returns a reference to the active LLM BAdI implementation.  </li> <li>Dynamic JSON handling via a BAdI-resolved implementation class.  </li> </ul>"},{"location":"Deepseek%20R1/ZCL_LLM_COMMON_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li>BAdI: <code>zllm_implementation</code> for runtime JSON implementation resolution.  </li> <li>JSON Library: Delegates serialization/deserialization to a class (<code>json_class</code>) provided by the BAdI.  </li> <li>Formatting Dependency: Uses <code>/ui2/cl_json</code> for lowercase JSON property naming.  </li> </ul>"},{"location":"Deepseek%20R1/ZCL_LLM_COMMON_CLAS/#details","title":"Details","text":""},{"location":"Deepseek%20R1/ZCL_LLM_COMMON_CLAS/#dynamic-json-implementation","title":"Dynamic JSON Implementation","text":"<p>The class defers JSON processing to an external implementation resolved during initialization:  </p> <pre><code>classDiagram  \n  class zcl_llm_common {  \n    +get_llm_badi()  \n  }  \n  class zllm_implementation {  \n    +get_json_impl()  \n  }  \n  class JSON_Impl[\"External JSON Class\"]  \n  zcl_llm_common --&gt; zllm_implementation : BAdI Dependency  \n  zllm_implementation --&gt; JSON_Impl : Runtime Resolution  \n  zcl_llm_common --&gt; JSON_Impl : Delegates serialize/deserialize  </code></pre> <ol> <li>Class Constructor: Fetches the BAdI instance and resolves the JSON handler.  </li> <li>Loose Coupling: Swapping JSON implementations (e.g., for performance or compliance) requires only BAdI reconfiguration.  </li> </ol>"},{"location":"Deepseek%20R1/ZCL_LLM_COMMON_CLAS/#key-design-aspects","title":"Key Design Aspects","text":"<ul> <li>Case Handling: Forces lowercase JSON keys via <code>/ui2/cl_json=&gt;pretty_mode-low_case</code> to ensure consistent property naming.  </li> <li>BAdI Control: The LLM BAdI acts as a central extension point for customizing JSON behavior or LLM integrations.  </li> <li>Error Transparency: Exceptions from the JSON implementation class propagate directly to callers.  </li> </ul>"},{"location":"Deepseek%20R1/ZCL_LLM_COMMON_CLAS/#serialization-logic-flow","title":"Serialization Logic Flow","text":"<pre><code>sequenceDiagram  \n  participant Caller  \n  participant zcl_llm_common  \n  participant JSON_Impl  \n  Caller-&gt;&gt;zcl_llm_common: to_json(data)  \n  zcl_llm_common-&gt;&gt;JSON_Impl: serialize(data, compress)  \n  JSON_Impl--&gt;&gt;zcl_llm_common: JSON string  \n  zcl_llm_common--&gt;&gt;Caller: Return result  </code></pre> <ul> <li>Compression: When enabled, removes whitespace from the output JSON.  </li> <li>Type Preservation: Relies on the JSON implementation to map ABAP types (e.g., <code>DATS</code>, <code>TIMS</code>) correctly.  </li> </ul>"},{"location":"Deepseek%20R1/ZCL_LLM_COMMON_CLAS/#testing-implications","title":"Testing Implications","text":"<ul> <li>BAdI Mocking: Tests require a stubbed BAdI providing a test-safe JSON implementation.  </li> <li>Roundtrip Stability: Successful tests implicitly validate that the resolved JSON implementation supports symmetric conversions.  </li> <li>Empty JSON Handling: Explicit checks ensure edge cases like <code>{}</code> are not treated as errors.</li> </ul>"},{"location":"Deepseek%20R1/ZCL_LLM_DEFAULT_IMPL_CLAS/","title":"Class ZCL_LLM_DEFAULT_IMPL","text":"<p>AI Generated documentation.</p>"},{"location":"Deepseek%20R1/ZCL_LLM_DEFAULT_IMPL_CLAS/#overview","title":"Overview","text":"<p>Provides default implementations for core LLM utility components through factory methods. Acts as central access point for encryption, statistics, logging, authorization and JSON handling services.</p> <p>Key Public Methods:</p> <ul> <li><code>GET_ENCRYPTION_IMPL</code>: Provides initialized encryption handler</li> <li><code>GET_JSON_IMPL</code>: Returns standard JSON processor class</li> <li><code>GET_CALL_LOGGER_IMPL</code>: Delivers configured API call logger</li> <li><code>GET_STATISTICS_IMPL</code>: Supplies statistics tracking instance</li> <li><code>GET_AUTHORIZATION_IMPL</code>: Offers authorization checker (disabled by default)</li> </ul>"},{"location":"Deepseek%20R1/ZCL_LLM_DEFAULT_IMPL_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li><code>zcl_llm_encryption</code>: Encryption implementation</li> <li><code>zcl_llm_call_logger</code>: Call logging facility</li> <li><code>zcl_llm_statistics</code>: Usage statistics tracker</li> <li><code>zcl_llm_auth_disabled</code>: No-op authorization implementation</li> <li><code>/UI2/CL_JSON</code>: Standard SAP JSON processor</li> </ul>"},{"location":"Deepseek%20R1/ZCL_LLM_DEFAULT_IMPL_CLAS/#details","title":"Details","text":"<pre><code>classDiagram\n    class zcl_llm_default_impl {\n        +get_encryption_impl()\n        +get_json_impl()\n        +get_call_logger_impl()\n        +get_statistics_impl()\n        +get_authorization_impl()\n        -enc_class\n        -stat_class\n        -log_class\n        -auth_class\n    }\n    zcl_llm_default_impl --&gt; zcl_llm_encryption : creates\n    zcl_llm_default_impl --&gt; zcl_llm_call_logger : creates\n    zcl_llm_default_impl --&gt; zcl_llm_statistics : creates\n    zcl_llm_default_impl --&gt; zcl_llm_auth_disabled : creates\n    zcl_llm_default_impl --&gt; /UI2/CL_JSON : returns class</code></pre> <p>Implementation Notes:</p> <ol> <li>Uses lazy initialization pattern for all service objects</li> <li>Singleton-like instance management through CLASS-DATA</li> <li>Authorization defaults to disabled implementation (<code>zcl_llm_auth_disabled</code>)</li> <li>JSON processor returns class reference instead of instance</li> <li>All getter methods follow identical null-check/binding pattern except JSON method</li> </ol> <p>Security Consideration: Default authorization implementation is intentionally</p>"},{"location":"Deepseek%20R1/ZCL_LLM_ENCRYPTION_CLAS/","title":"Class ZCL_LLM_ENCRYPTION","text":"<p>AI Generated documentation.</p>"},{"location":"Deepseek%20R1/ZCL_LLM_ENCRYPTION_CLAS/#overview","title":"Overview","text":"<p>The <code>ZCL_LLM_ENCRYPTION</code> class implements asymmetric cryptography using SAP's SSF framework (Secure Store &amp; Forward). It provides public encryption/decryption methods via interface <code>ZIF_LLM_ENCRYPTION</code> with PSE (Personal Security Environment) integration.</p> <p>Key Public Methods:  </p> <ul> <li> <p><code>ZIF_LLM_ENCRYPTION~ENCRYPT</code>:   Encrypts UTF-8 text using certificate-based envelope encryption via <code>SSF_KRN_ENVELOPE</code>. Handles chunking for large payloads (255-byte blocks).  </p> </li> <li> <p><code>ZIF_LLM_ENCRYPTION~DECRYPT</code>:   Decrypts data using private key operations via <code>SSF_KRN_DEVELOPE</code>. Includes input validation and chunk reassembly.  </p> </li> <li> <p><code>CLASS_CONSTRUCTOR</code>:   Initializes cryptographic environment: loads PSE profile, retrieves certificate, and configures SSF context.</p> </li> </ul>"},{"location":"Deepseek%20R1/ZCL_LLM_ENCRYPTION_CLAS/#dependencies","title":"Dependencies","text":"<ol> <li>SSF Framework: Critical dependency on function modules <code>SSF_KRN_ENVELOPE/DEVELOPE</code> and PSE management utilities (<code>SSFPSE_FILENAME</code>, <code>SSFC_*</code>)  </li> <li>Authorization: Requires <code>ZIF_LLM_AUTH</code> implementation via BADI for permission checks  </li> <li>Exception Handling: Uses <code>ZCX_LLM_VALIDATION</code> for error propagation  </li> <li>Configuration: Relies on PSE profile configured in transaction <code>STRUST</code> with application ID <code>ZLLMCT</code></li> </ol>"},{"location":"Deepseek%20R1/ZCL_LLM_ENCRYPTION_CLAS/#details","title":"Details","text":"<pre><code>flowchart TD\n    classDiagram\n        ZCL_LLM_ENCRYPTION --&gt; SSF_KRN_ENVELOPE\n        ZCL_LLM_ENCRYPTION --&gt; SSF_KRN_DEVELOPE\n        ZCL_LLM_ENCRYPTION --&gt; SSFC_GET_CERTIFICATE\n        ZCL_LLM_ENCRYPTION --&gt; ZIF_LLM_AUTH\n        ZCL_LLM_ENCRYPTION --&gt; ZCX_LLM_VALIDATION</code></pre>"},{"location":"Deepseek%20R1/ZCL_LLM_ENCRYPTION_CLAS/#encryption-process-flow","title":"Encryption Process Flow","text":"<ol> <li>Input validation &amp; authorization check via <code>ZIF_LLM_AUTH</code></li> <li>UTF-8 conversion with <code>CL_BINARY_CONVERT</code></li> <li>Chunking logic using fixed 255-byte blocks (<code>BIN_LINE</code> constant)</li> <li>Certificate-based encryption via <code>SSF_KRN_ENVELOPE</code></li> <li>Output concatenation in byte mode</li> </ol>"},{"location":"Deepseek%20R1/ZCL_LLM_ENCRYPTION_CLAS/#decryption-process-flow","title":"Decryption Process Flow","text":"<ol> <li>Input length calculation with <code>XSTRLEN</code></li> <li>Chunked processing for SSF compatibility</li> <li>Private key decryption via <code>SSF_KRN_DEVELOPE</code></li> <li>Buffer reconstruction using <code>REDUCE</code> operator</li> <li>UTF-8 back conversion with length trimming</li> </ol>"},{"location":"Deepseek%20R1/ZCL_LLM_ENCRYPTION_CLAS/#security-configuration","title":"Security Configuration","text":"<pre><code>sequenceDiagram\n    class_constructor-&gt;&gt;+STRUST: Get PSE profile (SSFPSE_FILENAME)\n    class_constructor-&gt;&gt;+SSFC_GET_CERTIFICATE: Retrieve X.509 cert\n    class_constructor-&gt;&gt;SSFC_PARSE_CERTIFICATE: Extract subject DN\n    class_constructor-&gt;&gt;ZCL_LLM_COMMON: Resolve auth implementation</code></pre> <p>Critical Implementation Notes:  </p> <ul> <li>Uses empty password for PSE access (<code>str_pab_password = ''</code>) - requires external key management  </li> <li>Strict error handling: 11 SSF exception cases mapped to validation errors  </li> <li>Memory optimization: Avoids full data copies through chunked processing  </li> <li>XSTRING handling: Bypasses code page issues with byte-mode concatenation  </li> <li>Test coverage aligns with SAP cryptographic guidelines (empty values, buffer limits, round-trip verification)  </li> </ul> <p>Performance Considerations:  </p> <ul> <li>Chunk size (<code>BIN_LINE=255</code>) matches SSF optimal payload recommendations  </li> <li>REDUCE operator in decryption minimizes temporary object creation  </li> <li>Authorization checks occur before resource-intensive crypto operations</li> </ul>"},{"location":"Deepseek%20R1/ZCL_LLM_FACTORY_CLAS/","title":"Class ZCL_LLM_FACTORY","text":"<p>AI Generated documentation.</p>"},{"location":"Deepseek%20R1/ZCL_LLM_FACTORY_CLAS/#overview","title":"Overview","text":"<p>The <code>ZCL_LLM_FACTORY</code> class is a singleton factory responsible for creating LLM (Large Language Model) client instances based on configured models and providers. Its core functionality is exposed via the interface <code>ZIF_LLM_FACTORY</code>, with the key public method:  </p> <ul> <li><code>ZIF_LLM_FACTORY~GET_CLIENT</code>:   Instantiates an LLM client for a specified model after validating:  </li> <li>Model configuration existence  </li> <li>Provider registration  </li> <li>Authorization (via injected <code>ZIF_LLM_AUTH</code> implementation)   Raises <code>ZCX_LLM_VALIDATION</code> exceptions for invalid configurations.  </li> </ul> <p>The class initializes its authorization component during <code>CLASS_CONSTRUCTOR</code> via a BAdI implementation.  </p>"},{"location":"Deepseek%20R1/ZCL_LLM_FACTORY_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li>Database tables:  </li> <li><code>ZLLM_CLNT_CONFIG</code>: Stores model-to-provider mappings  </li> <li><code>ZLLM_PROVIDERS</code>: Registry of available LLM provider implementations  </li> <li>Authorization: BAdI-driven implementation of <code>ZIF_LLM_AUTH</code> </li> <li>Exception class: <code>ZCX_LLM_VALIDATION</code> for error signaling  </li> </ul>"},{"location":"Deepseek%20R1/ZCL_LLM_FACTORY_CLAS/#details","title":"Details","text":"<pre><code>flowchart TD  \n    A[get_client] --&gt; B[Authorization Check]  \n    B --&gt; C{Model Exists?}  \n    C --&gt;|No| D[Raise model_does_not_exist]  \n    C --&gt;|Yes| E{Provider Registered?}  \n    E --&gt;|No| F[Raise provider_does_not_exist]  \n    E --&gt;|Yes| G[Dynamic Client Instantiation]  \n    G --&gt; H[Call provider_class~ZIF_LLM_CLIENT~GET_CLIENT]  </code></pre> <p>Key implementation characteristics:  </p> <ol> <li> <p>Dynamic Client Creation:    Uses runtime method call <code>(provider_class)=&gt;ZIF_LLM_CLIENT~GET_CLIENT</code> to decouple factory from concrete implementations.  </p> </li> <li> <p>Validation Sequence:  </p> </li> <li>Authorization precedes model validation, indicating potential security-first design  </li> <li> <p>Provider check uses model's configured provider name from <code>ZLLM_CLNT_CONFIG</code> </p> </li> <li> <p>Test Critical Points:  </p> </li> <li>Database table integrity (as shown in test double configuration)  </li> <li>Exception type differentiation through <code>ZCX_LLM_VALIDATION</code> subtypes  </li> <li>Provider implementation registry consistency  </li> </ol> <p>Security Integration: Authorization implementation is resolved via <code>ZCL_LLM_COMMON=&gt;GET_LLM_BADI( )</code>, allowing flexible authentication/authorization strategies without factory modification.</p>"},{"location":"Deepseek%20R1/ZCL_LLM_HTTP_CLIENT_WRAPPER_CLAS/","title":"Class ZCL_LLM_HTTP_CLIENT_WRAPPER","text":"<p>AI Generated documentation.</p>"},{"location":"Deepseek%20R1/ZCL_LLM_HTTP_CLIENT_WRAPPER_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_http_client_wrapper</code> class provides a configurable abstraction layer for HTTP communication, tailored for integration with Large Language Model (LLM) services. It encapsulates the lifecycle management of an HTTP client, header/URL configuration, request execution, and error handling.  </p> <p>Public Methods:  </p> <ul> <li><code>constructor</code>: Initializes the HTTP client using an RFC destination and validates its configuration. Raises <code>zcx_llm_validation</code> on errors.  </li> <li><code>get_client</code>: Factory method to create a new client wrapper instance.  </li> <li><code>set_header</code>: Assigns custom HTTP headers (e.g., API keys, authorization tokens).  </li> <li><code>set_url</code>: Configures the target endpoint URL.  </li> <li><code>communicate</code>: Executes the HTTP POST request, processes the response, logs the interaction, and handles errors.  </li> <li><code>close_client</code>: Safely terminates the HTTP client connection.  </li> </ul>"},{"location":"Deepseek%20R1/ZCL_LLM_HTTP_CLIENT_WRAPPER_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li><code>cl_http_client</code>: Core SAP HTTP client for communication.  </li> <li><code>zcx_llm_validation</code> / <code>zcx_llm_http_error</code>: Custom exceptions for configuration/communication errors.  </li> <li><code>zif_llm_call_logger</code>: Interface for logging API requests/responses.  </li> <li><code>zllm_clnt_config</code> / <code>zllm_providers</code>: Configuration structures for client/provider settings.  </li> </ul>"},{"location":"Deepseek%20R1/ZCL_LLM_HTTP_CLIENT_WRAPPER_CLAS/#details","title":"Details","text":""},{"location":"Deepseek%20R1/ZCL_LLM_HTTP_CLIENT_WRAPPER_CLAS/#key-logic-flow","title":"Key Logic Flow","text":"<pre><code>sequenceDiagram  \n    participant User  \n    participant Wrapper as zcl_llm_http_client_wrapper  \n    participant HTTP_Client as cl_http_client  \n    participant Logger as zif_llm_call_logger  \n\n    User-&gt;&gt;Wrapper: constructor()  \n    Wrapper-&gt;&gt;HTTP_Client: create_by_destination()  \n    alt Destination Invalid  \n        HTTP_Client--&gt;&gt;Wrapper: Error  \n        Wrapper-&gt;&gt;User: Raises zcx_llm_validation  \n    else Valid  \n        HTTP_Client--&gt;&gt;Wrapper: Client instance  \n    end  \n\n    User-&gt;&gt;Wrapper: set_header() / set_url()  \n    User-&gt;&gt;Wrapper: communicate()  \n    Wrapper-&gt;&gt;HTTP_Client: send() / receive()  \n    HTTP_Client--&gt;&gt;Wrapper: Response  \n    Wrapper-&gt;&gt;Logger: log(request, response)  \n    Wrapper-&gt;&gt;HTTP_Client: reset_request()  \n    alt HTTP Error  \n        Wrapper-&gt;&gt;User: Raises zcx_llm_http_error  \n    end  \n    User-&gt;&gt;Wrapper: close_client()  </code></pre>"},{"location":"Deepseek%20R1/ZCL_LLM_HTTP_CLIENT_WRAPPER_CLAS/#critical-implementation-aspects","title":"Critical Implementation Aspects","text":"<ol> <li>Header Management:  </li> <li>Non-SAP headers (e.g., <code>Authorization</code>) are preserved across requests via <code>get_header_fields</code> and <code>set_header_fields</code> to avoid losing context (e.g., API keys).  </li> <li> <p>SAP-internal headers (prefixed with <code>~</code>) are automatically excluded during reset.  </p> </li> <li> <p>Error Handling:  </p> </li> <li>Constructor: Maps <code>sy-subrc</code> from <code>cl_http_client</code> creation to human-readable error messages (e.g., <code>Destination Not Found</code>).  </li> <li> <p>Communicate: Converts HTTP status codes \u2265 300 or communication failures into structured exceptions (<code>zcx_llm_http_error</code>).  </p> </li> <li> <p>Logging:  </p> </li> <li> <p>Captures metadata (timestamp, user, session ID), raw request/response data, and error messages via <code>zif_llm_call_logger</code>.  </p> </li> <li> <p>Stateless Request Design:  </p> </li> <li> <p>The <code>communicate</code> method resets the client\u2019s request after execution to prevent URL/header conflicts in subsequent calls.  </p> </li> <li> <p>Configuration-Driven:  </p> </li> <li>Relies on <code>zllm_providers</code> (RFC destination) and <code>zllm_clnt_config</code> for client-specific settings, enabling multi-provider support.</li> </ol>"},{"location":"Deepseek%20R1/ZCL_LLM_OPTIONS_CLAS/","title":"Class ZCL_LLM_OPTIONS","text":"<p>AI Generated documentation.</p>"},{"location":"Deepseek%20R1/ZCL_LLM_OPTIONS_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_options</code> class implements configuration management for Large Language Model (LLM) parameters. It provides methods to set hyperparameters (e.g., temperature, top_p, seed) with validation, stores them as key-value pairs, and allows retrieval via <code>get_parameters()</code>.  </p> <p>Key Public Methods:  </p> <ul> <li>Setters:  </li> <li>Numerical parameters: <code>set_temperature</code>, <code>set_top_p</code>, <code>set_top_k</code>, <code>set_seed</code>, etc., with boundary validation (e.g., 0.0-2.0 for temperature).  </li> <li><code>set_custom_parameters</code>: Adds or updates arbitrary parameters.  </li> <li>Validation: All setters enforce valid ranges, raising <code>zcx_llm_validation</code> for invalid inputs.  </li> <li>Data Management: <code>get_parameters</code> returns the current configuration as a key-value table.  </li> </ul>"},{"location":"Deepseek%20R1/ZCL_LLM_OPTIONS_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li>Exceptions: Relies on <code>zcx_llm_validation</code> for error handling.  </li> <li>Data Structure: Uses internal table type <code>zllm_keyvalues</code> for parameter storage.  </li> </ul>"},{"location":"Deepseek%20R1/ZCL_LLM_OPTIONS_CLAS/#details","title":"Details","text":"<pre><code>flowchart LR  \n  A[Public Set Method] --&gt; B{Validate Input}  \n  B --&gt;|Valid| C[Update Parameter]  \n  B --&gt;|Invalid| D[Raise zcx_llm_validation]  \n  C --&gt; E[int_parameters Table]  </code></pre> <p>Key Implementation Aspects:  </p> <ol> <li>Validation Logic:  </li> <li><code>validate_range_float</code>/<code>validate_range_int</code> enforce min/max boundaries.  </li> <li> <p>Distinct error messages for out-of-range values (e.g., \"Value 3.0 is above maximum 2.0\").  </p> </li> <li> <p>Parameter Storage:  </p> </li> <li><code>int_parameters</code> table ensures unique keys via <code>DELETE</code> + <code>INSERT</code> in <code>set_parameter</code>.  </li> <li> <p>Values are stored as strings (e.g., <code>|{ temperature }|</code>), requiring parsing during retrieval.  </p> </li> <li> <p>Custom Parameters:  </p> </li> <li><code>set_custom_parameters</code> merges input parameters, overwriting existing keys.  </li> <li>Supports extensibility for non-standard LLM parameters.  </li> </ol> <p>Test-Critical Behaviors (from test summary):  </p> <ul> <li>Boundary checks (e.g., 0.0/2.0 for temperature).  </li> <li>Parameter overwrite integrity (last-set value persists).  </li> <li>Exception propagation for invalid inputs.</li> </ul>"},{"location":"Deepseek%20R1/ZCL_LLM_SO_JS_CLAS/","title":"Class ZCL_LLM_SO_JS","text":"<p>AI Generated documentation.</p>"},{"location":"Deepseek%20R1/ZCL_LLM_SO_JS_CLAS/#overview","title":"Overview","text":"<p>The class <code>ZCL_LLM_SO_JS</code> is a default implementation for generating JSON schemas from ABAP data structures. It implements the interface <code>ZIF_LLM_SO</code> to provide structured output definitions for LLM interactions.  </p> <p>Key Public Methods:  </p> <ul> <li><code>ZIF_LLM_SO~SET_SCHEMA</code>: Generates a JSON schema from an ABAP data descriptor. Validates and maps ABAP types (structures, tables, primitives) to JSON schema constructs.  </li> <li><code>ZIF_LLM_SO~GET_SCHEMA</code>: Returns the generated schema as a JSON string.  </li> <li><code>ZIF_LLM_SO~GET_DATATYPE</code>: Provides access to the ABAP data descriptor used for schema generation.  </li> </ul> <p>Supports nested structures, tables, primitive types, enums, custom descriptions, and validation for unsupported types (e.g., <code>DATS</code>).  </p>"},{"location":"Deepseek%20R1/ZCL_LLM_SO_JS_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li>ABAP Runtime Type Services (RTTS): Uses <code>CL_ABAP_*DESCR</code> classes for type introspection.  </li> <li>Exceptions: Raises <code>ZCX_LLM_VALIDATION</code> for unsupported types or invalid configurations.  </li> <li>Interface: Implements <code>ZIF_LLM_SO</code> for schema definition contracts.  </li> </ul>"},{"location":"Deepseek%20R1/ZCL_LLM_SO_JS_CLAS/#details","title":"Details","text":""},{"location":"Deepseek%20R1/ZCL_LLM_SO_JS_CLAS/#schema-generation-flow","title":"Schema Generation Flow","text":"<pre><code>flowchart TD  \n    A[set_schema] --&gt; B[Process Data Descriptor]  \n    B --&gt; C{Type?}  \n    C --&gt;|Structure| D[Process Structure]  \n    C --&gt;|Table| E[Process Table]  \n    C --&gt;|Element| F[Process Element]  \n    D --&gt; G[Recurse for Components]  \n    E --&gt; H[Process Line Type]  \n    F --&gt; I[Map ABAP Type to JSON]  \n    G --&gt; C  \n    H --&gt; C  </code></pre> <p>Key Logic:  </p> <ol> <li>Type Handling:  </li> <li>Structures: Converted to JSON <code>object</code> types. Fields are recursively processed, and <code>required</code> properties are auto-generated.  </li> <li>Tables: Mapped to JSON <code>array</code> types. Line types are processed to define <code>items</code>.  </li> <li> <p>Primitives: ABAP types (e.g., <code>INT</code>, <code>STRING</code>, <code>ABAP_BOOL</code>) are mapped to JSON equivalents. <code>CHAR1</code> fields are validated for boolean compliance.  </p> </li> <li> <p>Customization:  </p> </li> <li>Descriptions: Injected via <code>descriptions</code> parameter in <code>SET_SCHEMA</code>. Supports nested paths (e.g., <code>field-subfield</code>).  </li> <li> <p>Enums: Defined via <code>enum_values</code> in descriptions, generating JSON <code>enum</code> constraints.  </p> </li> <li> <p>Validation:  </p> </li> <li>Unsupported types (e.g., <code>DATS</code>, invalid <code>CHAR1</code>) trigger <code>ZCX_LLM_VALIDATION</code>.  </li> <li>Schema syntax integrity is enforced (e.g., <code>additionalProperties: false</code>, strict ordering for multiple tables).  </li> </ol>"},{"location":"Deepseek%20R1/ZCL_LLM_SO_JS_CLAS/#field-context-tracking","title":"Field Context Tracking","text":"<p>The <code>field_info</code> structure tracks nested paths (e.g., <code>root-field-subfield</code>) to align custom descriptions and enum values with the correct schema nodes. This enables:  </p> <ul> <li>Context-aware error messages.  </li> <li>Precise injection of metadata into deeply nested schemas.  </li> </ul>"},{"location":"Deepseek%20R1/ZCL_LLM_SO_JS_CLAS/#boolean-detection","title":"Boolean Detection","text":"<p>ABAP fields are mapped to JSON booleans only if:  </p> <ul> <li>Type is <code>CHAR1</code> (length 1).  </li> <li>Absolute name matches known boolean types (e.g., <code>ABAP_BOOL</code>). Other <code>CHAR1</code> fields raise <code>ZCX_LLM_VALIDATION</code> (tested in <code>test_char1_nonbool</code>).  </li> </ul>"},{"location":"Deepseek%20R1/ZCL_LLM_SO_JS_CLAS/#recursive-processing","title":"Recursive Processing","text":"<p>Methods like <code>PROCESS_STRUCTURE</code> and <code>PROCESS_TABLE</code> recursively resolve nested types, ensuring correct schema composition for complex hierarchies (e.g., tables of nested structures).</p>"},{"location":"Deepseek%20R1/ZCL_LLM_STATISTICS_CLAS/","title":"Class ZCL_LLM_STATISTICS","text":"<p>AI Generated documentation.</p>"},{"location":"Deepseek%20R1/ZCL_LLM_STATISTICS_CLAS/#overview","title":"Overview","text":"<p>Provides conditional statistics recording functionality with activation control. Main public elements:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 PUBLIC INTERFACE          \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 \u2795 add(IMPORTING record)  \u2502\n\u2502   (from zif_llm_statistics)\u2502\n\u2502                           \u2502\n\u2502 \ud83c\udfd7 constructor()          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Key characteristics:</p> <ul> <li>Activation state loaded once during instantiation</li> <li>Silent operation when inactive (no errors/exceptions)</li> <li>Direct database insertion when active</li> </ul>"},{"location":"Deepseek%20R1/ZCL_LLM_STATISTICS_CLAS/#dependencies","title":"Dependencies","text":"<pre><code>graph LR\n    A[zcl_llm_statistics] --&gt; B[zif_llm_statistics]\n    A --&gt; C[zllm_system]\n    A --&gt; D[zllm_statistics]</code></pre> <p>Key dependencies:</p> <ul> <li>zllm_system: System configuration table (single record read)</li> <li>zllm_statistics: Statistics storage table (direct inserts)</li> <li>zif_llm_statistics: Mandatory interface implementation</li> </ul>"},{"location":"Deepseek%20R1/ZCL_LLM_STATISTICS_CLAS/#details","title":"Details","text":"<pre><code>sequenceDiagram\n    participant C as Consumer\n    participant S as zcl_llm_statistics\n    participant DB as Database\n\n    C-&gt;&gt;+S: constructor()\n    S-&gt;&gt;DB: SELECT SINGLE stat_active FROM zllm_system\n    DB--&gt;&gt;S: active status\n    S--&gt;&gt;-C: Instance created\n\n    C-&gt;&gt;+S: add(record)\n    alt active = abap_true\n        S-&gt;&gt;DB: INSERT zllm_statistics\n    else inactive\n        S-&gt;&gt;S: Immediate return\n    end\n    S--&gt;&gt;-C: Operation complete</code></pre> <p>Implementation notes:</p> <ol> <li>Activation Check: Single database read during instantiation (performance optimized)</li> <li>Insert Logic: Uses direct <code>INSERT</code> without commit (implies external transaction control)</li> <li>State Handling: Protected attribute <code>active</code> allows extension in subclasses</li> <li>Error Handling: Silent failure modes (no exception for inactive state or DB errors)</li> </ol>"},{"location":"Deepseek%20R1/ZCL_LLM_TEMPLATE_PARSER_CLAS/","title":"Class ZCL_LLM_TEMPLATE_PARSER","text":"<p>AI Generated documentation.</p>"},{"location":"Deepseek%20R1/ZCL_LLM_TEMPLATE_PARSER_CLAS/#overview","title":"Overview","text":"<p>The <code>ZCL_LLM_TEMPLATE_PARSER</code> class implements a template engine inspired by limited Jinja2 syntax, supporting variable substitution, control structures (conditionals, loops), filters, and error handling. Key functionalities include:  </p> <ul> <li>Variable resolution for flat/nested structures and tables.  </li> <li>Control structures: <code>if</code>/<code>elif</code>/<code>else</code>, <code>for</code> loops with metadata (e.g., <code>loop.last</code>).  </li> <li>Filters for string transformations (<code>upper</code>, <code>lower</code>, <code>default</code>).  </li> <li>Error detection for invalid paths, unclosed tokens, and type mismatches.  </li> </ul>"},{"location":"Deepseek%20R1/ZCL_LLM_TEMPLATE_PARSER_CLAS/#public-methods","title":"Public Methods","text":"Method Purpose <code>ADD_TEMPLATE</code> Registers templates with optional replacement; tokenizes content. <code>RENDER</code> Generates output by parsing tokens against a data context."},{"location":"Deepseek%20R1/ZCL_LLM_TEMPLATE_PARSER_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li>Exception class <code>ZCX_LLM_TEMPLATE_PARSER</code> for error reporting.  </li> <li>ABAP Runtime Type Services (RTTS) for dynamic data structure resolution.  </li> </ul>"},{"location":"Deepseek%20R1/ZCL_LLM_TEMPLATE_PARSER_CLAS/#details","title":"Details","text":""},{"location":"Deepseek%20R1/ZCL_LLM_TEMPLATE_PARSER_CLAS/#tokenization-parsing-flow","title":"Tokenization &amp; Parsing Flow","text":"<pre><code>flowchart LR  \n    A[Template Input] --&gt; B(Tokenize)  \n    B --&gt; C{Token Type?}  \n    C --&gt;|Text| D[Add to Output]  \n    C --&gt;|Variable| E[Resolve from Context]  \n    C --&gt;|Control| F[Update Control Stack]  \n    F --&gt;|Conditionals| G[Evaluate Logic]  \n    F --&gt;|Loops| H[Iterate Collection]  \n    G/H --&gt; I[Generate Output]  \n    I --&gt; J[Rendered Result]  </code></pre>"},{"location":"Deepseek%20R1/ZCL_LLM_TEMPLATE_PARSER_CLAS/#key-implementation-aspects","title":"Key Implementation Aspects","text":"<ol> <li>Tokenization:  </li> <li>Splits templates into <code>TEXT</code>, <code>VARIABLE</code>, <code>CONTROL</code>, and removes comments.  </li> <li> <p>Handles escape sequences (e.g., <code>\\{</code>, <code>\\}</code>) and multiline text.  </p> </li> <li> <p>Control Stack:  </p> </li> <li> <p>Manages nested <code>IF</code>/<code>FOR</code> structures with state tracking:  </p> <pre><code>TYPES: BEGIN OF control_stack_type,  \n         type              TYPE string,  \" 'IF' or 'FOR'  \n         condition_met     TYPE abap_bool,  \" For conditionals  \n         loop_var          TYPE string,     \" Loop variable name  \n         collection        TYPE REF TO data,\" Iterated data  \n         loop_tokens       TYPE tokens_type,\" Nested loop content  \n       END OF control_stack_type.  \n</code></pre> </li> <li> <p>Variable Resolution:  </p> </li> <li>Supports dot notation (<code>address.street</code>) and table indexing (<code>items[1]</code>).  </li> <li>Applies filters (e.g., <code>{{ name | upper }}</code>) during resolution.  </li> <li> <p>Uses RTTS to dynamically navigate structures/tables.  </p> </li> <li> <p>Loop Processing:  </p> </li> <li>Creates modified contexts for iterations, injecting:  <ul> <li>Loop variable (e.g., <code>item</code>).  </li> <li>Metadata (<code>LOOP.index</code>, <code>LOOP.first</code>).  </li> </ul> </li> <li> <p>Handles nested loops via token accumulation in <code>loop_tokens</code>.  </p> </li> <li> <p>Error Handling:  </p> </li> <li>Detects unclosed control structures during final stack checks.  </li> <li>Validates table indices and variable paths using RTTS.  </li> </ol>"},{"location":"Deepseek%20R1/ZCL_LLM_TEMPLATE_PARSER_CLAS/#type-resolution-logic","title":"Type Resolution Logic","text":"<p>For structured data:  </p> <ol> <li>Resolve initial context reference.  </li> <li>Traverse path segments (e.g., <code>user.address.city</code>):  </li> <li>For structures: Access component via <code>ASSIGN COMPONENT</code>.  </li> <li>For tables: Validate index bounds (1-based).  </li> <li>Format tables as comma-separated values or key-value pairs.  </li> </ol>"},{"location":"Deepseek%20R1/ZCL_LLM_TEMPLATE_PARSER_CLAS/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Tokenization occurs once per template (cached in <code>tokens</code> field).  </li> <li>Context cloning during loops may impact performance for large datasets.</li> </ul>"},{"location":"Deepseek%20R1/ZCL_LLM_TOOL_CALCULATOR_CLAS/","title":"Class ZCL_LLM_TOOL_CALCULATOR","text":"<p>AI Generated documentation.</p>"},{"location":"Deepseek%20R1/ZCL_LLM_TOOL_CALCULATOR_CLAS/#overview","title":"Overview","text":"<p>The <code>ZCL_LLM_TOOL_CALCULATOR</code> class provides mathematical expression evaluation as a tool within an LLM framework. It implements the <code>ZIF_LLM_TOOL</code> interface for integration with tool management systems.  </p> <p>Key Public Methods:  </p> <ol> <li><code>ZIF_LLM_TOOL~GET_TOOL_DETAILS</code> </li> <li> <p>Returns metadata including:  </p> <ul> <li>Tool name: <code>calculator</code> </li> <li>Description: Supports <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>**</code>, <code>MOD</code>, and parentheses  </li> <li>Input parameter: <code>EXPRESSION</code> (string containing mathematical operations)  </li> </ul> </li> <li> <p><code>ZIF_LLM_TOOL~EXECUTE</code> </p> </li> <li>Evaluates expressions using <code>EVALUATE_EXPRESSION</code> </li> <li> <p>Handles errors:  </p> <ul> <li>Division by zero  </li> <li>Invalid characters/non-numeric inputs  </li> <li>Syntax errors  </li> </ul> </li> <li> <p><code>ZIF_LLM_TOOL~GET_RESULT</code> </p> </li> <li>Returns calculation results in standardized <code>CALCULATION_OUTPUT</code> format  </li> </ol>"},{"location":"Deepseek%20R1/ZCL_LLM_TOOL_CALCULATOR_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li>Interface: <code>ZIF_LLM_TOOL</code> for tool integration  </li> <li>Exceptions: <code>CX_SY_ZERODIVIDE</code>, <code>CX_SY_ARITHMETIC_ERROR</code>, <code>CX_SY_CONVERSION_NO_NUMBER</code> </li> </ul>"},{"location":"Deepseek%20R1/ZCL_LLM_TOOL_CALCULATOR_CLAS/#details","title":"Details","text":""},{"location":"Deepseek%20R1/ZCL_LLM_TOOL_CALCULATOR_CLAS/#expression-processing-flow","title":"Expression Processing Flow","text":"<pre><code>graph TD  \n  A[Input Expression] --&gt; B[Remove Whitespace]  \n  B --&gt; C[Tokenize]  \n  C --&gt; D[Shunting-Yard Algorithm]  \n  D --&gt; E[RPN Evaluation]  \n  E --&gt; F[Result Formatting]  </code></pre> <p>Key Components:  </p> <ol> <li>Tokenization </li> <li>Identifies numbers (including negatives/decimals) and operators (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>**</code>, <code>MOD</code>, parentheses)  </li> <li> <p>Example: <code>\"5+3*2\"</code> becomes <code>[5, +, 3, *, 2]</code> </p> </li> <li> <p>Operator Precedence </p> </li> </ol> <pre><code>graph LR  \n  A[**] --&gt;|Highest| B[*, /, MOD]  \n  B --&gt; C[+, -]  \n  C --&gt;|Lowest| D[()]  </code></pre> <ol> <li>Shunting-Yard Algorithm </li> <li>Converts infix notation to Reverse Polish Notation (RPN)  </li> <li> <p>Handles nested parentheses and operator precedence  </p> </li> <li> <p>RPN Evaluation </p> </li> <li>Uses stack-based computation with error checks:  <ul> <li>Division/modulo by zero  </li> <li>Invalid operator sequences  </li> <li>Exponent edge cases (e.g., <code>0^-2</code>)  </li> </ul> </li> </ol> <p>Special Handling:  </p> <ul> <li>Negative numbers detection in tokenizer  </li> <li>Scientific notation support via <code>DECFLOAT34</code> type  </li> <li>Localized number formatting in output using <code>NUMBER = USER</code> </li> </ul> <p>Error Reporting:  </p> <ul> <li>Returns structured messages for:  </li> <li><code>Error: Division by zero</code> </li> <li><code>Error: Invalid expression: [details]</code> </li> <li>Implicit conversion failures via ABAP exceptions  </li> </ul> <p>Test Coverage Alignment:  </p> <ul> <li>Implements all verified test cases including bracket nesting, operator precedence, and edge cases from the test summary  </li> <li>Uses ABAP exceptions for error propagation to match test validation requirements</li> </ul>"},{"location":"Deepseek%20R1/ZCL_LLM_TOOL_ECHO_CLAS/","title":"Class ZCL_LLM_TOOL_ECHO","text":"<p>AI Generated documentation.</p>"},{"location":"Deepseek%20R1/ZCL_LLM_TOOL_ECHO_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_tool_echo</code> class implements a simple echo tool that mirrors input data. It adheres to the <code>zif_llm_tool</code> interface, providing standardized access to tool metadata and execution results.  </p> <p>Key Public Methods:  </p> <ul> <li><code>constructor</code>: Initializes the tool with metadata (<code>tool_details</code>).  </li> <li><code>execute</code>: Stores input <code>data</code> and <code>tool_call_id</code>, returning them as part of the result.  </li> <li><code>get_tool_details</code>: Returns metadata (e.g., name, purpose) configured during initialization.  </li> <li><code>get_result</code>: Provides access to the stored response data and execution context.  </li> </ul>"},{"location":"Deepseek%20R1/ZCL_LLM_TOOL_ECHO_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li>Implements interface <code>zif_llm_tool</code> (mandatory methods and type definitions).  </li> <li>Relies on the structure <code>zif_llm_tool=&gt;tool_details</code> for metadata management.  </li> </ul>"},{"location":"Deepseek%20R1/ZCL_LLM_TOOL_ECHO_CLAS/#details","title":"Details","text":""},{"location":"Deepseek%20R1/ZCL_LLM_TOOL_ECHO_CLAS/#data-flow","title":"Data Flow","text":"<pre><code>sequenceDiagram  \n    User-&gt;&gt;+zcl_llm_tool_echo: execute(data, tool_call_id)  \n    zcl_llm_tool_echo-&gt;&gt;zcl_llm_tool_echo: Store data in response_data  \n    zcl_llm_tool_echo-&gt;&gt;zcl_llm_tool_echo: Update tool_call_id  \n    zcl_llm_tool_echo--&gt;&gt;-User: Return result with mirrored data  </code></pre>"},{"location":"Deepseek%20R1/ZCL_LLM_TOOL_ECHO_CLAS/#key-implementation-notes","title":"Key Implementation Notes","text":"<ol> <li>Generic Data Handling:  </li> <li>Uses <code>TYPE REF TO data</code> for <code>response_data</code> to support arbitrary input structures.  </li> <li> <p>No data transformation occurs \u2013 input is stored and returned as-is.  </p> </li> <li> <p>Execution Context:  </p> </li> <li> <p>The <code>tool_call_id</code> links execution requests to results (critical for asynchronous operations or audit trails).  </p> </li> <li> <p>Metadata Propagation:  </p> </li> <li> <p>The <code>tool_details</code> (provided during construction) are reused in <code>get_result</code> and <code>get_tool_details</code>, ensuring consistency.  </p> </li> <li> <p>Stateless Design:  </p> </li> <li>Each <code>execute</code> call overwrites previous <code>response_data</code> and <code>tool_call_id</code>, making the instance unsuitable for concurrent use.</li> </ol>"},{"location":"Deepseek%20R1/ZCL_LLM_TOOL_PARSER_CLAS/","title":"Class ZCL_LLM_TOOL_PARSER","text":"<p>AI Generated documentation.</p>"},{"location":"Deepseek%20R1/ZCL_LLM_TOOL_PARSER_CLAS/#overview","title":"Overview","text":"<p>The class <code>ZCL_LLM_TOOL_PARSER</code> generates JSON schemas from ABAP data structures, enabling structured data validation and tooling integration. It focuses on mapping ABAP types (elementary types, structures, tables) to JSON schema constructs while incorporating metadata like field descriptions and enum values.  </p> <p>Public Methods:  </p> <ul> <li><code>zif_llm_tool_parser~parse</code>:   Main entry point. Converts an ABAP data structure into a JSON schema string. Handles nested structures, tables, type validation, and metadata integration.  </li> </ul>"},{"location":"Deepseek%20R1/ZCL_LLM_TOOL_PARSER_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li>Exceptions: <code>zcx_llm_validation</code> for error reporting.  </li> <li>Type Descriptors: Relies on <code>cl_abap_typedescr</code>, <code>cl_abap_structdescr</code>, <code>cl_abap_tabledescr</code>, and <code>cl_abap_elemdescr</code> for ABAP type introspection.  </li> </ul>"},{"location":"Deepseek%20R1/ZCL_LLM_TOOL_PARSER_CLAS/#details","title":"Details","text":""},{"location":"Deepseek%20R1/ZCL_LLM_TOOL_PARSER_CLAS/#schema-generation-flow","title":"Schema Generation Flow","text":"<pre><code>flowchart TD  \n    A[parse] --&gt; B[Initialize schema]  \n    B --&gt; C{Data type?}  \n    C --&gt;|Structure| D[Process nested components]  \n    C --&gt;|Table| E[Generate array schema]  \n    C --&gt;|Elementary| F[Map to JSON type]  \n    D --&gt; G[Recursive processing]  \n    E --&gt; H[Process line type]  \n    F --&gt; I[Handle enums/descriptions]  \n    G --&gt; C  \n    H --&gt; C  \n    I --&gt; J[Validate constraints]  \n    J --&gt; K[Append to schema]  \n    K --&gt; L{More fields?}  \n    L --&gt;|Yes| C  \n    L --&gt;|No| M[Finalize schema]  </code></pre>"},{"location":"Deepseek%20R1/ZCL_LLM_TOOL_PARSER_CLAS/#key-implementation-aspects","title":"Key Implementation Aspects","text":"<ol> <li>Type Mapping:  </li> <li>ABAP <code>INT</code>/<code>INT8</code> \u2192 JSON <code>integer</code> </li> <li>ABAP <code>DECFLOAT</code> \u2192 JSON <code>number</code> </li> <li>ABAP <code>STRING</code> \u2192 JSON <code>string</code> </li> <li> <p>ABAP <code>CHAR1</code> with boolean context \u2192 JSON <code>boolean</code> (validated via type pool checks).  </p> </li> <li> <p>Metadata Integration:  </p> </li> <li>Field descriptions from <code>descriptions</code> are injected into the schema.  </li> <li> <p>Enum values are converted to JSON <code>enum</code> arrays.  </p> </li> <li> <p>Nested Structures:  </p> </li> <li>Nested ABAP structures become JSON <code>object</code> types with <code>properties</code>.  </li> <li> <p>Paths (e.g., <code>field-subfield</code>) are tracked for metadata assignment.  </p> </li> <li> <p>Table Handling:  </p> </li> <li>ABAP tables are mapped to JSON <code>array</code> types.  </li> <li> <p>Supports tables of structures (nested objects) and multi-level nesting.  </p> </li> <li> <p>Validation:  </p> </li> <li>Rejects unsupported types (e.g., type <code>D</code>).  </li> <li>Ensures <code>CHAR1</code> fields not flagged as booleans throw errors.  </li> <li> <p>Enforces required fields in generated schemas.  </p> </li> <li> <p>Extension Hooks:  </p> </li> <li>Empty <code>pre_*</code>/<code>post_*</code> methods (e.g., <code>pre_object</code>, <code>post_array</code>) allow subclassing for custom logic.  </li> </ol>"},{"location":"Deepseek%20R1/ZCL_LLM_TOOL_PARSER_CLAS/#example-interaction","title":"Example Interaction","text":"<p>When processing a table field:  </p> <ol> <li><code>process_table</code> generates an <code>array</code> skeleton.  </li> <li><code>process_type</code> resolves the line type (e.g., a structure).  </li> <li><code>process_structure</code> recursively adds properties for each component.  </li> <li>Metadata (descriptions, enums) is injected during field processing.  </li> </ol> <p>This ensures complex ABAP data models are accurately represented as JSON schemas for downstream tooling.</p>"},{"location":"Deepseek%20R1/ZCX_LLM_AUTHORIZATION_CLAS/","title":"Class ZCX_LLM_AUTHORIZATION","text":"<p>AI Generated documentation.</p>"},{"location":"Deepseek%20R1/ZCX_LLM_AUTHORIZATION_CLAS/#overview","title":"Overview","text":"<p>Custom exception class for authorization-related errors in LLM client operations. Designed to handle T100 message propagation with specific error contexts.</p> <p>Key Elements:</p> <ul> <li>Inherits from <code>CX_STATIC_CHECK</code> for exception handling</li> <li>Implements standard SAP message interfaces <code>IF_T100_DYN_MSG</code> and <code>IF_T100_MESSAGE</code></li> <li>Contains 4 predefined message constants for common authorization scenarios:</li> <li>Provider maintenance errors (PROVIDER_MAINTENANCE)</li> <li>Client retrieval failures (GET_CLIENT)</li> <li>Encryption/decryption issues (ENCRYPT/DECRYPT)</li> </ul> <p>Public Methods:</p> <pre><code>CONSTRUCTOR\n  IMPORTING\n    !TEXTID      LIKE IF_T100_MESSAGE=&gt;T100KEY  \" Message identifier\n    !PREVIOUS    LIKE PREVIOUS                  \" Previous exception\n</code></pre>"},{"location":"Deepseek%20R1/ZCX_LLM_AUTHORIZATION_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li>Parent class: <code>CX_STATIC_CHECK</code></li> <li>Message interfaces: <code>IF_T100_DYN_MSG</code>, <code>IF_T100_MESSAGE</code></li> <li>Message class: <code>ZLLM_CLIENT</code> (contains actual message texts)</li> </ul>"},{"location":"Deepseek%20R1/ZCX_LLM_AUTHORIZATION_CLAS/#details","title":"Details","text":"<p>Message Structure:</p> <pre><code>graph TD\n    Class[ZCX_LLM_AUTHORIZATION] --&gt;|Inherits| CX_STATIC_CHECK\n    Class --&gt;|Implements| IF_T100_MESSAGE\n    Class --&gt;|Uses| ZLLM_CLIENT[Message Class]\n    Message[Message Structure] --&gt;|Contains| MSGV1\n    Message --&gt;|Contains| MSGV2</code></pre> <p>Key Implementation Details:</p> <ol> <li>Message Constants:</li> <li>Each constant group defines message ID/number pairs from <code>ZLLM_CLIENT</code></li> <li> <p><code>GET_CLIENT</code> supports 1 message variable (<code>MSGV1</code>), others use static texts</p> </li> <li> <p>Constructor Logic:</p> </li> </ol> <pre><code>IF textid IS INITIAL\n  Use default message ID\nELSE\n  Use provided message identifier\nENDIF\n</code></pre> <p>Handles both predefined messages (via constants) and custom messages through TEXTID parameter. Propagates previous exceptions via <code>PREVIOUS</code> parameter.</p>"},{"location":"Deepseek%20R1/ZCX_LLM_HTTP_ERROR_CLAS/","title":"Class ZCX_LLM_HTTP_ERROR","text":"<p>AI Generated documentation.</p>"},{"location":"Deepseek%20R1/ZCX_LLM_HTTP_ERROR_CLAS/#overview","title":"Overview","text":"<p>Custom exception class for HTTP error handling in SAP systems, inheriting from <code>CX_STATIC_CHECK</code>. Designed for structured error reporting in HTTP client operations.</p> <p>Key components:</p> <ul> <li>Implements <code>IF_T100_MESSAGE</code> for message handling</li> <li>4 predefined error types with message placeholders:</li> <li>HTTP client initialization errors</li> <li>Communication failures</li> <li>HTTP processing errors</li> <li>Generic HTTP exceptions</li> <li>Public attributes <code>MV_ATTR1</code>-<code>MV_ATTR4</code> for dynamic error context</li> </ul> <p>Main method:</p> <pre><code>CONSTRUCTOR(\n  IMPORTING\n    !TEXTID        LIKE if_t100_message=&gt;t100key  \" Error type selector\n    !ATTR1-ATTR4   TYPE STRING                     \" Context variables\n    !PREVIOUS      LIKE previous                   \" Exception chaining\n)\n</code></pre>"},{"location":"Deepseek%20R1/ZCX_LLM_HTTP_ERROR_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li>Inherits from standard exception class <code>CX_STATIC_CHECK</code></li> <li>Implements interface <code>IF_T100_MESSAGE</code> (SAP message protocol)</li> </ul>"},{"location":"Deepseek%20R1/ZCX_LLM_HTTP_ERROR_CLAS/#details","title":"Details","text":""},{"location":"Deepseek%20R1/ZCX_LLM_HTTP_ERROR_CLAS/#message-structure","title":"Message Structure","text":"<pre><code>graph TD\n    A[Exception Thrown] --&gt; B{TextID Parameter}\n    B --&gt;|Provided| C[Use specified message template]\n    B --&gt;|Empty| D[Use default message template]\n    C --&gt; E[Replace &amp;1-&amp;4 with MV_ATTR1-MV_ATTR4]\n    D --&gt; E\n    E --&gt; F[Store in IF_T100_MESSAGE~T100KEY]</code></pre> <p>Attribute mapping:</p> Message Placeholder Class Attribute &amp;1 MV_ATTR1 &amp;2 MV_ATTR2 &amp;3 MV_ATTR3 &amp;4 MV_ATTR4 <p>Key implementation notes:</p> <ol> <li>Message variants defined as constants with:</li> <li>Fixed message ID <code>ZLLM_CLIENT</code></li> <li>Unique message numbers (006-009)</li> <li>Attribute mapping configuration</li> <li>Constructor enables exception chaining through <code>PREVIOUS</code> parameter</li> <li>Final class design prevents subclass specialization</li> <li>Supports up to 4 dynamic context variables for message personalization</li> <li>Error hierarchy: <code>CX_STATIC_CHECK</code> \u2192 <code>ZCX_LLM_HTTP_ERROR</code></li> </ol>"},{"location":"Deepseek%20R1/ZCX_LLM_TEMPLATE_PARSER_CLAS/","title":"Class ZCX_LLM_TEMPLATE_PARSER","text":"<p>AI Generated documentation.</p>"},{"location":"Deepseek%20R1/ZCX_LLM_TEMPLATE_PARSER_CLAS/#overview","title":"Overview","text":"<p><code>ZCX_LLM_TEMPLATE_PARSER</code> is a custom exception class for handling errors in template parsing logic. It inherits from <code>CX_STATIC_CHECK</code> and implements SAP standard message interfaces (<code>IF_T100_DYN_MSG</code>, <code>IF_T100_MESSAGE</code>) to support dynamic message handling.  </p> <p>Key Functionality:  </p> <ul> <li>Raises structured exceptions for template parsing failures (e.g., unclosed tokens, invalid syntax, variable resolution errors).  </li> <li>Supports message variable substitution (<code>MSGV1</code>, <code>MSGV2</code>) for dynamic error details.  </li> </ul> <p>Public Methods:  </p> <ul> <li><code>CONSTRUCTOR</code>: Initializes the exception with message IDs, variables, and optional previous exception.  </li> </ul> <p>Main Error Types:  </p> <pre><code>pie  \n    title Exception Categories  \n    \"Syntax Errors (e.g., unclosed tokens)\" : 6  \n    \"Variable/Data Issues\" : 5  \n    \"Control Structure Errors\" : 4  \n    \"Filter/Condition Errors\" : 3  </code></pre>"},{"location":"Deepseek%20R1/ZCX_LLM_TEMPLATE_PARSER_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li>Inherits from SAP standard exception class <code>CX_STATIC_CHECK</code>.  </li> <li>Uses message IDs from message class <code>ZLLM_CLIENT</code> (messages 022-042).  </li> </ul>"},{"location":"Deepseek%20R1/ZCX_LLM_TEMPLATE_PARSER_CLAS/#details","title":"Details","text":""},{"location":"Deepseek%20R1/ZCX_LLM_TEMPLATE_PARSER_CLAS/#message-handling-structure","title":"Message Handling Structure","text":"<p>Each error constant defines:  </p> <ul> <li><code>MSGID</code>: Message class (<code>ZLLM_CLIENT</code>)  </li> <li><code>MSGNO</code>: Unique message number  </li> <li>Attributes (<code>ATTR1</code>-<code>ATTR4</code>): Map to <code>MSGV1</code>-<code>MSGV4</code> for variable substitution  </li> </ul> <p>Example:  </p> <pre><code>constants:  \n  BEGIN OF invalid_variable_path,  \n    msgid TYPE symsgid VALUE 'ZLLM_CLIENT',  \n    msgno TYPE symsgno VALUE '025',  \n    attr1 TYPE scx_attrname VALUE 'MSGV1',  \" Stores invalid path  \n  END OF invalid_variable_path.  \n</code></pre>"},{"location":"Deepseek%20R1/ZCX_LLM_TEMPLATE_PARSER_CLAS/#constructor-logic","title":"Constructor Logic","text":"<pre><code>sequenceDiagram  \n    Client-&gt;&gt;Exception: CREATE(textid, msgv1, msgv2)  \n    Exception-&gt;&gt;CX_STATIC_CHECK: super-&gt;constructor()  \n    alt Custom Message ID  \n        Exception--&gt;&gt;IF_T100_MESSAGE: Set user-provided textid  \n    else  \n        Exception--&gt;&gt;IF_T100_MESSAGE: Use default textid  \n    end  \n    Exception-&gt;&gt;Fields: Store MSGV1/MSGV2  </code></pre> <p>Key Implementation Notes:  </p> <ul> <li>Supports exception chaining via <code>PREVIOUS</code> parameter.  </li> <li>Message variables (<code>MSGV1</code>-<code>MSGV4</code>) are optional but required for errors using attributes (e.g., <code>invalid_variable_path</code> expects <code>MSGV1</code>).  </li> <li>Errors like <code>MISMATCHED_TOKEN</code> use two variables (<code>MSGV1</code>, <code>MSGV2</code>) for detailed diagnostics.</li> </ul>"},{"location":"Deepseek%20R1/ZCX_LLM_VALIDATION_CLAS/","title":"Class ZCX_LLM_VALIDATION","text":"<p>AI Generated documentation.</p>"},{"location":"Deepseek%20R1/ZCX_LLM_VALIDATION_CLAS/#overview","title":"Overview","text":"<p><code>ZCX_LLM_VALIDATION</code> is a custom exception class for validation and technical errors in SAP systems, specializing in Large Language Model (LLM) client operations. Inherits from <code>CX_DYNAMIC_CHECK</code> for runtime checks and implements <code>IF_T100_MESSAGE</code> for standardized message handling.</p> <p>Key Public Components:  </p> <ul> <li>Exception Constants: Predefined error types (e.g., <code>MODEL_DOES_NOT_EXIST</code>, <code>ENCRYPTION_FAILED</code>) with message IDs (<code>ZLLM_CLIENT</code>) and attribute mappings.  </li> <li>Attributes: <code>MV_ATTR1</code>-<code>MV_ATTR4</code> to store dynamic error details (e.g., model names, provider IDs).  </li> <li>Constructor: Initializes exception with message ID, attributes, and optional previous exception.  </li> </ul>"},{"location":"Deepseek%20R1/ZCX_LLM_VALIDATION_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li>Inherits from <code>CX_DYNAMIC_CHECK</code> (SAP standard exception class).  </li> <li>Implements interface <code>IF_T100_MESSAGE</code> for message integration.  </li> </ul>"},{"location":"Deepseek%20R1/ZCX_LLM_VALIDATION_CLAS/#details","title":"Details","text":""},{"location":"Deepseek%20R1/ZCX_LLM_VALIDATION_CLAS/#exception-structure","title":"Exception Structure","text":"<pre><code>classDiagram  \n  ZCX_LLM_VALIDATION --|&gt; CX_DYNAMIC_CHECK  \n  ZCX_LLM_VALIDATION ..|&gt; IF_T100_MESSAGE  \n  class ZCX_LLM_VALIDATION {  \n    +UNSUPPORTED_TYPE  \n    +VALUE_OUT_OF_RANGE  \n    +HTTP_DESTINATION_ERROR  \n    +ENCRYPTION_SETUP  \n    ...  \n    +MV_ATTR1 : STRING  \n    +MV_ATTR2 : STRING  \n    +constructor()  \n  }  </code></pre> <p>Key Aspects:  </p> <ol> <li>Message Constants:  </li> <li>Each constant defines:  <ul> <li><code>msgid</code>: Message class <code>ZLLM_CLIENT</code> </li> <li><code>msgno</code>: Unique message number (e.g., <code>002</code> for <code>MODEL_DOES_NOT_EXIST</code>)  </li> <li>Attribute bindings (up to 4 placeholders).  </li> </ul> </li> </ol> <p>Example:  </p> <pre><code>constants:  \n  begin of CLIENT_MODEL_NOT_FOUND,  \n    msgid type symsgid value 'ZLLM_CLIENT',  \n    msgno type symsgno value '005',  \n    attr1 type scx_attrname value 'MV_ATTR1',  // Populated via MV_ATTR1  \n    attr2 type scx_attrname value 'MV_ATTR2',  // Populated via MV_ATTR2  \n  end of CLIENT_MODEL_NOT_FOUND.  \n</code></pre> <ol> <li>Attribute Handling:  </li> <li>Attributes (<code>MV_ATTR1</code>-<code>MV_ATTR4</code>) inject runtime values into exception messages (e.g., invalid model name).  </li> <li> <p>Used in error messages via <code>&amp;MV_ATTR1&amp;</code> placeholders in message texts.  </p> </li> <li> <p>Constructor Logic:  </p> </li> <li>Propagates attributes to superclass.  </li> <li>Sets <code>T100KEY</code> for message resolution:  <ul> <li>Uses <code>default_textid</code> if no <code>TEXTID</code> is provided.  </li> <li>Enables exception chaining via <code>PREVIOUS</code> parameter.  </li> </ul> </li> </ol> <p>Typical Usage:  </p> <pre><code>RAISE EXCEPTION TYPE zcx_llm_validation  \n  EXPORTING  \n    textid = zcx_llm_validation=&gt;model_does_not_exist  \n    attr1  = 'MODEL_X'.  \n</code></pre> <p>Throws an exception with message \"Model MODEL_X does not exist\" (assuming message 002 in <code>ZLLM_CLIENT</code> uses <code>&amp;MV_ATTR1&amp;</code>).</p>"},{"location":"Deepseek%20R1/ZIF_LLM_AUTH_INTF/","title":"Interface ZIF_LLM_AUTH","text":"<p>AI Generated documentation.</p>"},{"location":"Deepseek%20R1/ZIF_LLM_AUTH_INTF/#overview","title":"Overview","text":"<p>Interface <code>ZIF_LLM_AUTH</code> provides authorization checks for operations related to LLM (Large Language Model) client management and secret handling.  </p> <p>Public Methods:  </p> Method Parameters Purpose Exception <code>CHECK_PROVIDER_MAINTENANCE</code> - Validates access to provider maintenance functions <code>ZCX_LLM_AUTHORIZATION</code> <code>CHECK_GET_CLIENT</code> <code>IMPORTING model TYPE ZLLM_MODEL</code> Checks authorization to retrieve a model client <code>ZCX_LLM_AUTHORIZATION</code> <code>CHECK_DECRYPT</code> - Verifies permission to decrypt secrets <code>ZCX_LLM_AUTHORIZATION</code> <code>CHECK_ENCRYPT</code> - Verifies permission to encrypt secrets <code>ZCX_LLM_AUTHORIZATION</code>"},{"location":"Deepseek%20R1/ZIF_LLM_AUTH_INTF/#dependencies","title":"Dependencies","text":"<ul> <li>Exceptions: <code>ZCX_LLM_AUTHORIZATION</code> (common exception for all authorization failures)  </li> <li>Data Types: <code>ZLLM_MODEL</code> (used in <code>CHECK_GET_CLIENT</code> parameter)</li> </ul>"},{"location":"Deepseek%20R1/ZIF_LLM_CALL_LOGGER_INTF/","title":"Interface ZIF_LLM_CALL_LOGGER","text":"<p>AI Generated documentation.</p>"},{"location":"Deepseek%20R1/ZIF_LLM_CALL_LOGGER_INTF/#overview","title":"Overview","text":"<p>Provides standardized logging functionality for system calls through a single-method interface.  </p> <p>Public Methods:  </p> <pre><code>METHODS add\n  IMPORTING\n    entry TYPE zllm_call_log.\n</code></pre> <ul> <li><code>add</code>: Stores log entries   Accepts a structured log entry parameter (<code>zllm_call_log</code>) containing call metadata, errors, or processing details.  </li> </ul>"},{"location":"Deepseek%20R1/ZIF_LLM_CALL_LOGGER_INTF/#dependencies","title":"Dependencies","text":"<pre><code>classDiagram\n  class zif_llm_call_logger {\n    +add(entry: zllm_call_log)\n  }\n  class zllm_call_log {\n    Structure containing call metadata\n  }\n  zif_llm_call_logger --&gt; zllm_call_log : Consumes</code></pre> <p>Key Dependency:  </p> <ul> <li><code>zllm_call_log</code>: Data structure defining log entry format (fields typically include timestamps, call parameters, status codes, error messages)</li> </ul>"},{"location":"Deepseek%20R1/ZIF_LLM_CHAT_REQUEST_INTF/","title":"Interface ZIF_LLM_CHAT_REQUEST","text":"<p>AI Generated documentation.</p>"},{"location":"Deepseek%20R1/ZIF_LLM_CHAT_REQUEST_INTF/#overview","title":"Overview","text":"<p>Interface <code>ZIF_LLM_CHAT_REQUEST</code> provides methods for managing chat requests with LLM (Large Language Model) integration, including message handling, tool configuration, and structured output control.</p> <p>Core Functionality: </p> <ol> <li>Message Management </li> <li><code>ADD_MESSAGE</code>/<code>ADD_MESSAGES</code>: Append single/multiple messages (<code>ZLLM_MSG</code>/<code>ZLLM_MSGS</code>)  </li> <li><code>GET_MESSAGES</code>: Retrieve all messages  </li> <li> <p><code>CLEAR_MESSAGES</code>: Reset message list  </p> </li> <li> <p>Tool Integration </p> </li> <li><code>ADD_TOOL</code>/<code>ADD_TOOLS</code>: Register tools (<code>ZIF_LLM_TOOL</code> instances) with tool choice strategy  </li> <li><code>SET_TOOL_CHOICE</code>: Control tool selection behavior (<code>none|auto|required|&lt;tool_name&gt;</code>)  </li> <li> <p><code>GET_TOOLS</code>/<code>CLEAR_TOOLS</code>: Manage tool registry  </p> </li> <li> <p>Structured Output </p> </li> <li><code>SET_STRUCTURED_OUTPUT</code>: Define output schema using data descriptions (<code>CL_ABAP_DATADESCR</code>)  </li> <li> <p><code>SET_STRUCTURED_OUTPUT_ACTIVE</code>: Toggle structured output feature  </p> </li> <li> <p>Internal Handling </p> </li> <li><code>ADD_TOOL_RESULT</code>/<code>ADD_TOOL_CHOICES</code>: Process tool execution feedback  </li> <li><code>GET_INTERNAL_REQUEST</code>: Access low-level request object (<code>ZLLM_REQUEST</code>)  </li> <li><code>OPTIONS</code>: Configure runtime parameters via <code>ZIF_LLM_OPTIONS</code> </li> </ol>"},{"location":"Deepseek%20R1/ZIF_LLM_CHAT_REQUEST_INTF/#dependencies","title":"Dependencies","text":"<p>Key Components: </p> <pre><code>graph TD\n    ZIF_LLM_CHAT_REQUEST --&gt; ZLLM_MSG\n    ZIF_LLM_CHAT_REQUEST --&gt; ZIF_LLM_TOOL\n    ZIF_LLM_CHAT_REQUEST --&gt; ZIF_LLM_SO[ZIF_LLM_SO for structured output]\n    ZIF_LLM_CHAT_REQUEST --&gt; CL_ABAP_DATADESCR\n    ZIF_LLM_CHAT_REQUEST --&gt; ZLLM_TOOL_CALLS\n    ZIF_LLM_CHAT_REQUEST --&gt; ZLLM_CHOICE\n    ZIF_LLM_CHAT_REQUEST --&gt; ZLLM_REQUEST\n    ZIF_LLM_CHAT_REQUEST --&gt; ZIF_LLM_OPTIONS</code></pre> <p>Type References: </p> <ul> <li><code>ZLLM_MSG</code>/<code>ZLLM_MSGS</code>: Message data structures  </li> <li><code>ZLLM_TOOLS</code>: Table type for tool instances  </li> <li><code>ZLLM_TOOL_CALLS</code>: Tool execution tracking  </li> <li><code>ZLLM_REQUEST</code>: Internal request container</li> </ul>"},{"location":"Deepseek%20R1/ZIF_LLM_CLIENT_INTF/","title":"Interface ZIF_LLM_CLIENT","text":"<p>AI Generated documentation.</p>"},{"location":"Deepseek%20R1/ZIF_LLM_CLIENT_INTF/#overview","title":"Overview","text":"<p><code>ZIF_LLM_CLIENT</code> is an interface for interacting with Large Language Models (LLMs), providing standardized methods for client creation and chat operations.  </p> <p>Key Components:  </p> <ul> <li>Predefined Roles: Constants for LLM interaction roles: <code>ROLE_USER</code>, <code>ROLE_SYSTEM</code>, <code>ROLE_ASSISTANT</code>, <code>ROLE_TOOL</code> </li> </ul> <p>Public Methods:  </p> Method Purpose <code>GET_CLIENT</code> Factory method to create a client instance using configurations (<code>client_config</code>, <code>provider_config</code>). Raises validation/authorization errors. <code>CHAT</code> Executes a chat request (via <code>ZIF_LLM_CHAT_REQUEST</code>) and returns a structured response (<code>ZLLM_RESPONSE</code>). <code>NEW_REQUEST</code> Creates a new chat request instance (<code>ZIF_LLM_CHAT_REQUEST</code>)."},{"location":"Deepseek%20R1/ZIF_LLM_CLIENT_INTF/#dependencies","title":"Dependencies","text":"<p>Key Dependencies:  </p> <ul> <li>Exceptions:  </li> <li><code>ZCX_LLM_VALIDATION</code>: Validation errors during client creation.  </li> <li><code>ZCX_LLM_AUTHORIZATION</code>: Authorization failures.  </li> <li>Interfaces/Types:  </li> <li><code>ZIF_LLM_CHAT_REQUEST</code>: Chat request interface.  </li> <li><code>ZLLM_RESPONSE</code>: Response structure.  </li> <li><code>ZLLM_CLNT_CONFIG</code>/<code>ZLLM_PROVIDERS</code>: Configuration data types.</li> </ul>"},{"location":"Deepseek%20R1/ZIF_LLM_CLIENT_JSON_SCHEMA_INTF/","title":"Interface ZIF_LLM_CLIENT_JSON_SCHEMA","text":"<p>AI Generated documentation.</p>"},{"location":"Deepseek%20R1/ZIF_LLM_CLIENT_JSON_SCHEMA_INTF/#overview","title":"Overview","text":"<p>Interface <code>ZIF_LLM_CLIENT_JSON_SCHEMA</code> provides methods to define and generate JSON schemas with structured data types.  </p> <p>Key Methods:  </p> <ul> <li><code>NEW_FORMAT</code> </li> <li>Purpose: Factory method to create a new schema instance.  </li> <li> <p>Parameters:  </p> <ul> <li><code>title</code>: Schema title (root JSON object name).  </li> </ul> </li> <li> <p><code>ADD_PROPERTY</code> </p> </li> <li>Purpose: Adds a primitive property (string, number, boolean, integer).  </li> <li>Parameters:  <ul> <li><code>property</code>: Property definition with name, type, description, and nullability.  </li> </ul> </li> <li> <p>Exception: <code>ZCX_LLM_VALIDATION</code> for invalid inputs.  </p> </li> <li> <p><code>ADD_ARRAY</code> </p> </li> <li>Purpose: Defines an array containing objects with specified properties.  </li> <li>Parameters:  <ul> <li><code>array</code>: Array definition with name, description, and nested properties.  </li> </ul> </li> <li> <p>Limitation: Supports single-level nesting.  </p> </li> <li> <p><code>ADD_OBJECT</code> </p> </li> <li>Purpose: Adds a nested object structure.  </li> <li> <p>Parameters:  </p> <ul> <li><code>object</code>: Object definition with name, description, and properties.  </li> </ul> </li> <li> <p><code>GENERATE_SCHEMA</code> </p> </li> <li>Purpose: Outputs the final JSON schema as a string.  </li> </ul>"},{"location":"Deepseek%20R1/ZIF_LLM_CLIENT_JSON_SCHEMA_INTF/#dependencies","title":"Dependencies","text":"<ul> <li>Exception class <code>ZCX_LLM_VALIDATION</code> for validation errors.  </li> <li>Self-referential return type in <code>NEW_FORMAT</code> (factory pattern).  </li> </ul> <p>Key Data Types:  </p> <pre><code>classDiagram\n    class property_def {\n        +name : STRING\n        +type : VALUE_TYPE\n        +description : STRING\n        +allow_null : ABAP_BOOL\n    }\n    class object_def {\n        +name : STRING\n        +description : STRING\n        +properties : PROPERTIES_DEF\n    }\n    class array_def {\n        +name : STRING\n        +description : STRING\n        +properties : PROPERTIES_DEF\n    }</code></pre> <p>Supports primitive types, objects, and arrays (single-level nesting only).</p>"},{"location":"Deepseek%20R1/ZIF_LLM_DEFAULT_IMPL_INTF/","title":"Interface ZIF_LLM_DEFAULT_IMPL","text":"<p>AI Generated documentation.</p>"},{"location":"Deepseek%20R1/ZIF_LLM_DEFAULT_IMPL_INTF/#overview","title":"Overview","text":"<p>Interface <code>ZIF_LLM_DEFAULT_IMPL</code> provides configuration methods for customizing core components in an LLM framework. Key methods include:</p> Method Returns Purpose <code>GET_JSON_IMPL</code> <code>SEOCLSNAME</code> Provides the JSON serializer/deserializer class name. Non-default implementations require adherence to specific requirements. <code>GET_ENCRYPTION_IMPL</code> <code>ZIF_LLM_ENCRYPTION</code> Supplies the encryption provider for secure data handling. <code>GET_CALL_LOGGER_IMPL</code> <code>ZIF_LLM_CALL_LOGGER</code> Delivers the call logging implementation for API interaction tracking. <code>GET_STATISTICS_IMPL</code> <code>ZIF_LLM_STATISTICS</code> Returns the statistics handler for usage/metrics collection. <code>GET_AUTHORIZATION_IMPL</code> <code>ZIF_LLM_AUTH</code> Configures authorization checks. Implementations must raise <code>ZCX_LLM_AUTHORIZATION</code> for access violations."},{"location":"Deepseek%20R1/ZIF_LLM_DEFAULT_IMPL_INTF/#dependencies","title":"Dependencies","text":"<ul> <li>BADI Integration: Implements <code>IF_BADI_INTERFACE</code> for enhancement spot compatibility  </li> <li>Security: Relies on encryption via <code>ZIF_LLM_ENCRYPTION</code> </li> <li>Monitoring: Requires logger (<code>ZIF_LLM_CALL_LOGGER</code>) and statistics (<code>ZIF_LLM_STATISTICS</code>) interfaces  </li> <li>Error Handling: Authorization errors use exception class <code>ZCX_LLM_AUTHORIZATION</code></li> </ul>"},{"location":"Deepseek%20R1/ZIF_LLM_ENCRYPTION_INTF/","title":"Interface ZIF_LLM_ENCRYPTION","text":"<p>AI Generated documentation.</p>"},{"location":"Deepseek%20R1/ZIF_LLM_ENCRYPTION_INTF/#overview","title":"Overview","text":"<p>Interface <code>ZIF_LLM_ENCRYPTION</code> provides methods for secure encryption and decryption of sensitive data. Designed for handling secrets, it supports conversion between human-readable strings and encrypted byte data.  </p>"},{"location":"Deepseek%20R1/ZIF_LLM_ENCRYPTION_INTF/#public-methods","title":"Public Methods","text":"Method Description Input Output Exceptions <code>DECRYPT</code> Converts encrypted byte data (<code>xstring</code>) back to a readable string. <code>encrypted</code> (encrypted byte data) <code>result</code> (decrypted string) <code>ZCX_LLM_VALIDATION</code> (invalid input/process), <code>ZCX_LLM_AUTHORIZATION</code> (access denied) <code>ENCRYPT</code> Encrypts a plaintext string into secure byte data. <code>unencrypted</code> (plaintext string) <code>result</code> (encrypted byte data) Same as <code>DECRYPT</code>"},{"location":"Deepseek%20R1/ZIF_LLM_ENCRYPTION_INTF/#dependencies","title":"Dependencies","text":"<ul> <li>Exceptions: Relies on custom exceptions <code>ZCX_LLM_VALIDATION</code> and <code>ZCX_LLM_AUTHORIZATION</code> for error handling.  </li> <li>Data Types: Uses <code>xstring</code> (byte string) and <code>string</code> for input/output conversions.  </li> </ul> <pre><code>classDiagram  \n    class ZIF_LLM_ENCRYPTION {  \n        +decrypt(encrypted: xstring) result: string  \n        +encrypt(unencrypted: string) result: xstring  \n        .. Raises ..  \n        * ZCX_LLM_VALIDATION  \n        * ZCX_LLM_AUTHORIZATION  \n    }  </code></pre>"},{"location":"Deepseek%20R1/ZIF_LLM_FACTORY_INTF/","title":"Interface ZIF_LLM_FACTORY","text":"<p>AI Generated documentation.</p>"},{"location":"Deepseek%20R1/ZIF_LLM_FACTORY_INTF/#overview","title":"Overview","text":"<p><code>ZIF_LLM_FACTORY</code> is an SAP ABAP interface that provides a factory method for creating clients to interact with LLM (Large Language Model) services.  </p>"},{"location":"Deepseek%20R1/ZIF_LLM_FACTORY_INTF/#public-methods","title":"Public Methods","text":"Method Description GET_CLIENT Instantiates a client for a specified LLM model. Returns a reference to <code>ZIF_LLM_CLIENT</code> for interacting with the model. <p>Parameters &amp; Exceptions: </p> <ul> <li><code>model</code>: Input parameter of type <code>ZLLM_MODEL</code> (specifies the target LLM configuration).  </li> <li>Raises <code>ZCX_LLM_VALIDATION</code> for invalid model configurations.  </li> <li>Raises <code>ZCX_LLM_AUTHORIZATION</code> for authentication/authorization failures.  </li> </ul>"},{"location":"Deepseek%20R1/ZIF_LLM_FACTORY_INTF/#dependencies","title":"Dependencies","text":"Component Type Purpose <code>ZLLM_MODEL</code> Data Element Defines model configuration parameters. <code>ZIF_LLM_CLIENT</code> Interface Base interface for LLM client operations. <code>ZCX_LLM_VALIDATION</code> Exception Class Validation error handling. <code>ZCX_LLM_AUTHORIZATION</code> Exception Class Authorization error handling."},{"location":"Deepseek%20R1/ZIF_LLM_HTTP_CLIENT_WRAPPER_INTF/","title":"Interface ZIF_LLM_HTTP_CLIENT_WRAPPER","text":"<p>AI Generated documentation.</p>"},{"location":"Deepseek%20R1/ZIF_LLM_HTTP_CLIENT_WRAPPER_INTF/#overview","title":"Overview","text":"<p>Interface <code>ZIF_LLM_HTTP_CLIENT_WRAPPER</code> provides a simplified abstraction for HTTP client operations in SAP systems.  </p>"},{"location":"Deepseek%20R1/ZIF_LLM_HTTP_CLIENT_WRAPPER_INTF/#key-methods","title":"Key Methods","text":"Method Type Purpose Exception Raised <code>GET_CLIENT</code> Class Creates a client instance using provider and client configurations. <code>ZCX_LLM_VALIDATION</code> <code>SET_HEADER</code> Instance Sets/overwrites HTTP headers. <code>ZCX_LLM_VALIDATION</code> <code>SET_URL</code> Instance Defines the target URL (SM59 destination path is automatically prepended). <code>ZCX_LLM_VALIDATION</code> <code>COMMUNICATE</code> Instance Executes the HTTP request, returns response data (code, message, payload, HTTP reference). <code>ZCX_LLM_HTTP_ERROR</code> <code>CLOSE_CLIENT</code> Instance Releases HTTP client resources. - <p>Response Structure (<code>RESPONSE</code> type):  </p> <ul> <li><code>CODE</code>: HTTP status code  </li> <li><code>MESSAGE</code>: Status message  </li> <li><code>RESPONSE</code>: Payload as string  </li> <li><code>HTTP_RESPONSE</code>: Reference to SAP HTTP response object  </li> </ul>"},{"location":"Deepseek%20R1/ZIF_LLM_HTTP_CLIENT_WRAPPER_INTF/#dependencies","title":"Dependencies","text":"<ul> <li>Exceptions:  </li> <li><code>ZCX_LLM_VALIDATION</code>: Raised during configuration/input validation errors.  </li> <li><code>ZCX_LLM_HTTP_ERROR</code>: Thrown for HTTP communication failures.  </li> <li>SAP Framework: Relies on <code>IF_HTTP_RESPONSE</code> for native HTTP handling.  </li> <li>Data Structures:  </li> <li><code>ZLLM_CLNT_CONFIG</code>: Client-specific configuration.  </li> <li><code>ZLLM_PROVIDERS</code>: Provider-specific settings (e.g., endpoints, credentials).</li> </ul>"},{"location":"Deepseek%20R1/ZIF_LLM_OPTIONS_INTF/","title":"Interface ZIF_LLM_OPTIONS","text":"<p>AI Generated documentation.</p> <pre><code>## Overview\nInterface `ZIF_LLM_OPTIONS` configures parameters for Large Language Model (LLM) API calls. Provides validation-enabled setters for generation parameters and access to custom parameters.\n\n**Key Methods**:\n- `SET_TEMPERATURE`: Controls randomness (`DECFLOAT16` [0-2])\n- `SET_MAX_TOKENS`: Limits response length (`INTEGER &gt; 0`)  \n- `SET_TOP_P`: Nucleus sampling threshold (`DECFLOAT16` [0-1])\n- `SET_TOP_K`: Top-k token filtering (`INTEGER \u22651`)\n- `SET_SEED`: Ensures reproducible outputs (`INTEGER`)\n- `SET_FREQUENCY_PENALTY`: Reduces repetition (`DECFLOAT16` [-2-2])\n- `SET_PRESENCE_PENALTY`: Encourages new topics (`DECFLOAT16` [-2-2])\n- `SET_MIN_P`: Minimum probability threshold (`DECFLOAT16` [0-1])\n- `SET_TOP_A`: Alternative sampling method (`DECFLOAT16` [0-1])\n- `SET_CUSTOM_PARAMETERS`: Key-value store for model-specific parameters\n- `GET_PARAMTERS`: Retrieves all configured parameters\n\nAll setters raise `ZCX_LLM_VALIDATION` for invalid inputs except `SET_CUSTOM_PARAMETERS`.\n\n## Dependencies\n```mermaid\ngraph TD\n    ZIF_LLM_OPTIONS --&gt; ZCX_LLM_VALIDATION\n    ZIF_LLM_OPTIONS --&gt; ZLLM_KEYVALUES\n</code></pre> <p>Key Dependencies:</p> <ol> <li><code>ZCX_LLM_VALIDATION</code>: Validation exception class</li> <li><code>ZLLM_KEYVALUES</code>: Typed dictionary structure for custom parameters</li> </ol> <p>```</p>"},{"location":"Deepseek%20R1/ZIF_LLM_SO_INTF/","title":"Interface ZIF_LLM_SO","text":"<p>AI Generated documentation.</p>"},{"location":"Deepseek%20R1/ZIF_LLM_SO_INTF/#overview","title":"Overview","text":"<p>Interface <code>ZIF_LLM_SO</code> provides structured output schema management for ABAP data types.  </p> <p>Key Methods:  </p> <ul> <li><code>SET_SCHEMA</code>:   Defines the schema structure using a <code>CL_ABAP_DATADESCR</code> reference and optional field descriptions. Validates input and raises <code>ZCX_LLM_VALIDATION</code> on errors.   Parameters:  </li> <li><code>DATA_DESC</code>: Data type descriptor (e.g., structure/table type)  </li> <li> <p><code>DESCRIPTION</code>: Optional field metadata (names, descriptions, enum values)  </p> </li> <li> <p><code>GET_SCHEMA</code>:   Returns the schema in a standardized string format (e.g., JSON schema).  </p> </li> <li> <p><code>GET_DATATYPE</code>:   Retrieves the internal data type reference (<code>CL_ABAP_DATADESCR</code>), primarily for internal processing.  </p> </li> </ul>"},{"location":"Deepseek%20R1/ZIF_LLM_SO_INTF/#dependencies","title":"Dependencies","text":"<ul> <li><code>CL_ABAP_DATADESCR</code>: Core ABAP type description class for data type handling.  </li> <li><code>ZCX_LLM_VALIDATION</code>: Custom exception class for schema validation errors.</li> </ul>"},{"location":"Deepseek%20R1/ZIF_LLM_STATISTICS_INTF/","title":"Interface ZIF_LLM_STATISTICS","text":"<p>AI Generated documentation.</p>"},{"location":"Deepseek%20R1/ZIF_LLM_STATISTICS_INTF/#overview","title":"Overview","text":"<p><code>ZIF_LLM_STATISTICS</code> is a public SAP interface for managing statistical records in LLM (Large Language Model) contexts.  </p>"},{"location":"Deepseek%20R1/ZIF_LLM_STATISTICS_INTF/#public-methods","title":"Public Methods","text":"Method Parameters Purpose <code>ADD</code> <code>record</code> (TYPE <code>ZLLM_STATISTICS</code>) Adds a statistical data record to the system"},{"location":"Deepseek%20R1/ZIF_LLM_STATISTICS_INTF/#dependencies","title":"Dependencies","text":"<ul> <li>Data Structure: Relies on <code>ZLLM_STATISTICS</code> type for input parameter structure</li> </ul>"},{"location":"Deepseek%20R1/ZIF_LLM_TOOL_INTF/","title":"Interface ZIF_LLM_TOOL","text":"<p>AI Generated documentation.</p>"},{"location":"Deepseek%20R1/ZIF_LLM_TOOL_INTF/#overview","title":"Overview","text":"<p>Interface <code>ZIF_LLM_TOOL</code> defines a structure for integrating tools (e.g., function calls) with LLM models. It standardizes how tools are described, executed, and their results retrieved.  </p>"},{"location":"Deepseek%20R1/ZIF_LLM_TOOL_INTF/#public-methods","title":"Public Methods","text":"Method Purpose <code>GET_RESULT</code> Returns the execution result (data, tool call ID, and name). <code>GET_TOOL_DETAILS</code> Provides metadata (name, description, parameters) required for LLM integration. <code>EXECUTE</code> Executes the tool using input data and a tool call ID; returns the result."},{"location":"Deepseek%20R1/ZIF_LLM_TOOL_INTF/#key-data-types","title":"Key Data Types","text":"<ul> <li><code>TOOL_DETAILS</code>: Contains tool metadata (name, description, type, parameters).  </li> <li><code>TOOL_PARAMETERS</code>: Defines parameter schema (<code>DATA_DESC</code> for data type, <code>DESCRIPTIONS</code> for parameter metadata).  </li> <li><code>TOOL_RESULT</code>: Holds execution output, including a reference to result data.  </li> <li>Constant <code>TYPE_FUNCTION</code>: Indicates the tool type (<code>function</code>).  </li> </ul>"},{"location":"Deepseek%20R1/ZIF_LLM_TOOL_INTF/#dependencies","title":"Dependencies","text":"<ol> <li><code>CL_ABAP_DATADESCR</code>: Standard ABAP class for runtime type information.  </li> <li><code>ZIF_LLM_TOOL_PARSER=&gt;DEF_DESCRIPTIONS</code>: Custom type for parameter descriptions (likely used for LLM schema definitions).</li> </ol>"},{"location":"Deepseek%20R1/ZIF_LLM_TOOL_PARSER_INTF/","title":"Interface ZIF_LLM_TOOL_PARSER","text":"<p>AI Generated documentation.</p>"},{"location":"Deepseek%20R1/ZIF_LLM_TOOL_PARSER_INTF/#overview","title":"Overview","text":"<p>Interface <code>ZIF_LLM_TOOL_PARSER</code> provides standardized parsing of tool definitions using ABAP data descriptors and metadata.</p>"},{"location":"Deepseek%20R1/ZIF_LLM_TOOL_PARSER_INTF/#public-methods","title":"Public Methods","text":"<pre><code>METHODS parse\n  IMPORTING\n    data_desc     TYPE REF TO cl_abap_datadescr\n    descriptions  TYPE def_descriptions OPTIONAL\n  RETURNING VALUE(result) TYPE string\n  RAISING zcx_llm_validation.\n</code></pre> <p>Key characteristics:</p> <ul> <li>Processes data structures via <code>data_desc</code> parameter (ABAP Data Description reference)</li> <li>Accepts optional field metadata (<code>descriptions</code>) for enhanced parsing context</li> <li>Returns parsed output as string</li> <li>Throws <code>ZCX_LLM_VALIDATION</code> for parsing/validation errors</li> </ul>"},{"location":"Deepseek%20R1/ZIF_LLM_TOOL_PARSER_INTF/#dependencies","title":"Dependencies","text":"<pre><code>graph TD\n    A[ZIF_LLM_TOOL_PARSER] --&gt; B[CL_ABAP_DATADESCR]\n    A --&gt; C[ZCX_LLM_VALIDATION]</code></pre> <p>Main dependencies:</p> <ol> <li><code>CL_ABAP_DATADESCR</code> (ABAP Runtime) - Provides data structure metadata for parsing</li> <li><code>ZCX_LLM_VALIDATION</code> (Custom Exception) - Error handling for validation failures</li> </ol>"},{"location":"Deepseek%20R1/ZLLM_PROVIDER_MAINTENANCE_PROG/","title":"Report ZLLM_PROVIDER_MAINTENANCE","text":"<p>AI Generated documentation.</p>"},{"location":"Deepseek%20R1/ZLLM_PROVIDER_MAINTENANCE_PROG/#overview","title":"Overview","text":"<p>This report provides maintenance functionality for LLM (Large Language Model) provider configurations stored in table <code>ZLLM_PROVIDERS</code>. Key features include:  </p> <ul> <li>Displaying provider configurations in an ALV grid  </li> <li>Adding/updating providers via popup dialogs with encrypted authentication value handling  </li> <li>Deleting providers after confirmation  </li> <li>Integration with a BAdI-based encryption mechanism for secure credential storage  </li> </ul>"},{"location":"Deepseek%20R1/ZLLM_PROVIDER_MAINTENANCE_PROG/#dependencies","title":"Dependencies","text":"<ul> <li>Custom Objects:  </li> <li>Table <code>ZLLM_PROVIDERS</code> (configuration storage)  </li> <li>Interface <code>ZIF_LLM_ENCRYPTION</code> (encryption implementation)  </li> <li>Exception class <code>ZCX_LLM_AUTHORIZATION</code> </li> <li>SAP Standard:  </li> <li>BAdI framework for encryption implementation resolution  </li> <li>Function modules <code>POPUP_GET_VALUES</code> and <code>POPUP_TO_CONFIRM</code> </li> </ul>"},{"location":"Deepseek%20R1/ZLLM_PROVIDER_MAINTENANCE_PROG/#details","title":"Details","text":""},{"location":"Deepseek%20R1/ZLLM_PROVIDER_MAINTENANCE_PROG/#class-structure","title":"Class Structure","text":"<pre><code>classDiagram  \n    class lcl_app {  \n        +constructor()  \n        +display_providers()  \n        +handle_action_add()  \n        +handle_action_change()  \n        +handle_action_delete()  \n        -providers  \n        -enc_class  \n        -load_providers()  \n        -save_provider()  \n        -encrypt_auth_value()  \n        -decrypt_auth_value()  \n    }  \n    class lcl_screen {  \n        +start()  \n        +pai()  \n        +pbo()  \n        -app  \n    }  \n    lcl_screen --&gt; lcl_app  \n    lcl_app --&gt; ZIF_LLM_ENCRYPTION : Encryption  \n    lcl_app --&gt; ZLLM_PROVIDERS : Data Persistence  </code></pre>"},{"location":"Deepseek%20R1/ZLLM_PROVIDER_MAINTENANCE_PROG/#key-implementation-aspects","title":"Key Implementation Aspects","text":"<ol> <li>Encryption Workflow:  </li> <li>Authentication values are encrypted using <code>ZIF_LLM_ENCRYPTION</code> implementation retrieved via BAdI  </li> <li> <p>Values split across two input fields for lengths &gt;132 characters (e.g., OpenAI keys)  </p> </li> <li> <p>ALV Integration:  </p> </li> <li>Field catalog built dynamically with <code>LVC_FIELDCATALOG_MERGE</code> </li> <li> <p>Sensitive <code>AUTH_VALUE</code> field excluded from direct display  </p> </li> <li> <p>Data Flow for Provider Updates:  </p> </li> </ol> <pre><code>sequenceDiagram  \n    User-&gt;&gt;lcl_screen: Triggers action (Add/Change)  \n    lcl_screen-&gt;&gt;lcl_app: Calls handler method  \n    lcl_app-&gt;&gt;lcl_app: show_popup()  \n    lcl_app-&gt;&gt;User: Displays input dialog  \n    User-&gt;&gt;lcl_app: Provides credentials  \n    lcl_app-&gt;&gt;lcl_app: encrypt_auth_value()  \n    lcl_app-&gt;&gt;ZLLM_PROVIDERS: save_provider()  \n    lcl_app-&gt;&gt;lcl_app: refresh_display()  </code></pre> <ol> <li>Security Constraints:  </li> <li>Encryption/decryption operations throw <code>ZCX_LLM_AUTHORIZATION</code> for missing privileges  </li> <li> <p>Authentication values never stored in clear text format  </p> </li> <li> <p>UI Handling:  </p> </li> <li>Dedicated screen class (<code>lcl_screen</code>) manages dynpro events  </li> <li>Selection consistency enforced (single-row selection for modifications)</li> </ol>"},{"location":"Deepseek%20R1/Z_LLM_CLIENT_FUGR/","title":"Function Group Z_LLM_CLIENT","text":""},{"location":"Deepseek%20R1/FUGR/Z_LLM_CLIENT/TABLEFRAME_Z_LLM_CLIENT/","title":"Function Module TABLEFRAME_Z_LLM_CLIENT","text":"<p>AI Generated documentation.</p>"},{"location":"Deepseek%20R1/FUGR/Z_LLM_CLIENT/TABLEFRAME_Z_LLM_CLIENT/#overview","title":"Overview","text":"<p>Core function module for maintaining a custom view (<code>Z_LLM_CLIENT</code>) via SAP's table maintenance framework. Centered around the standard <code>TABLEFRAME</code> routine that provides generic view maintenance capabilities. Acts as an interface between custom configurations and SAP's view maintenance engine.</p> <p>Key components:</p> <ul> <li>Delegates all logic to standard <code>TABLEFRAME</code> function</li> <li>Handles view maintenance operations (display, update, transport)</li> <li>Uses standard maintenance dialog structures</li> </ul>"},{"location":"Deepseek%20R1/FUGR/Z_LLM_CLIENT/TABLEFRAME_Z_LLM_CLIENT/#dependencies","title":"Dependencies","text":"<ul> <li>SAP standard components:  </li> <li><code>TABLEFRAME</code> routine (core maintenance logic)</li> <li>Structures: <code>X_HEADER</code> (view metadata), <code>X_NAMTAB</code> (field catalog)</li> <li>Transport system integration via <code>CORR_NUMBER</code></li> </ul>"},{"location":"Deepseek%20R1/FUGR/Z_LLM_CLIENT/TABLEFRAME_Z_LLM_CLIENT/#details","title":"Details","text":""},{"location":"Deepseek%20R1/FUGR/Z_LLM_CLIENT/TABLEFRAME_Z_LLM_CLIENT/#parameter-flow","title":"Parameter Flow","text":"<pre><code>graph TD\n    FM[TABLEFRAME_Z_LLM_CLIENT] --&gt;|Calls| TF(TABLEFRAME Routine)\n    TF --&gt;|Uses| XH[X_HEADER - View metadata]\n    TF --&gt;|Uses| XN[X_NAMTAB - Field definitions]\n    TF --&gt;|Filters| DB[DBA_SELLIST - Selection restrictions]\n    TF --&gt;|UI Control| DP[DPL_SELLIST - Display options]\n    TF --&gt;|Transport| CN[CORR_NUMBER - Change requests]</code></pre>"},{"location":"Deepseek%20R1/FUGR/Z_LLM_CLIENT/TABLEFRAME_Z_LLM_CLIENT/#key-implementation-notes","title":"Key Implementation Notes","text":"<ol> <li> <p>View-Specific Configuration: <code>VIEW_NAME</code> parameter hardcodes the association with maintenance view <code>Z_LLM_CLIENT</code></p> </li> <li> <p>Authorization Flow:    Inherits standard authorization checks from <code>TABLEFRAME</code> via <code>EXCL_CUA_FUNCT</code> (excluded functions control)</p> </li> <li> <p>Data Flow:  </p> </li> </ol> <pre><code>sequenceDiagram\n    User-&gt;&gt;+FM: Initiate view maintenance\n    FM-&gt;&gt;+TABLEFRAME: Pass view configuration\n    TABLEFRAME--&gt;&gt;-FM: Return maintenance dialog\n    FM--&gt;&gt;-User: Display maintenance UI\n    User-&gt;&gt;TABLEFRAME: Perform data changes\n    TABLEFRAME-&gt;&gt;Database: Commit via standard checks</code></pre> <ol> <li> <p>Transport Integration:    Changes are recorded via <code>CORR_NUMBER</code> parameter that connects to SAP's transport management system</p> </li> <li> <p>Table Control: <code>DBA_SELLIST</code> restricts data access at database level while <code>DPL_SELLIST</code> controls field visibility in UI</p> </li> </ol>"},{"location":"Deepseek%20R1/FUGR/Z_LLM_CLIENT/TABLEPROC_Z_LLM_CLIENT/","title":"Function Module TABLEPROC_Z_LLM_CLIENT","text":"<p>AI Generated documentation.</p>"},{"location":"Deepseek%20R1/FUGR/Z_LLM_CLIENT/TABLEPROC_Z_LLM_CLIENT/#overview","title":"Overview","text":"<p>The function module <code>TABLEPROC_Z_LLM_CLIENT</code> serves as the standard table maintenance dialog processor for the database table <code>Z_LLM_CLIENT</code>. It is auto-generated (likely via the SAP View Maintenance Generator, transaction <code>SE54</code>) to enable maintenance of table entries via transaction <code>SM30</code>. The core logic delegates processing to the subroutine <code>TABLEPROC</code>, which handles standard operations like data display, editing, saving, and consistency checks.  </p>"},{"location":"Deepseek%20R1/FUGR/Z_LLM_CLIENT/TABLEPROC_Z_LLM_CLIENT/#details","title":"Details","text":""},{"location":"Deepseek%20R1/FUGR/Z_LLM_CLIENT/TABLEPROC_Z_LLM_CLIENT/#logic-flow","title":"Logic Flow","text":"<p>The function module acts as an entry point, invoking the subroutine <code>TABLEPROC</code>. This subroutine orchestrates:  </p> <ol> <li>Mode Handling: Manages display/edit modes.  </li> <li>Data Retrieval/Update: Fetches data from <code>Z_LLM_CLIENT</code> and writes changes back.  </li> <li>Authorization Checks: Validates user permissions (if configured).  </li> <li>Event Processing: Responds to user actions (e.g., saving, sorting, filtering).  </li> </ol> <pre><code>graph TD  \n  A[Function Module TABLEPROC_Z_LLM_CLIENT] --&gt; B[PERFORM TABLEPROC]  \n  B --&gt; C[Initialize Screen/Data]  \n  C --&gt; D[Handle User Commands]  \n  D --&gt;|Save| E[Update Z_LLM_CLIENT]  \n  D --&gt;|Edit/Display| F[Render Table Data]  \n  F --&gt; G[Validate Entries]  \n  G --&gt; H[Commit Changes]  </code></pre>"},{"location":"Deepseek%20R1/FUGR/Z_LLM_CLIENT/TABLEPROC_Z_LLM_CLIENT/#key-interactions","title":"Key Interactions","text":"<ul> <li>Table Maintenance Generator: The code is generated and maintained via SAP tools (e.g., <code>SE54</code>). Manual modifications may be overwritten during regeneration.  </li> <li>Subroutine Pool: The <code>TABLEPROC</code> subroutine resides in an include program linked to the function group of <code>Z_LLM_CLIENT</code>.  </li> <li>Standard SAP Logic: Relies on SAP-internal routines for UI rendering, data consistency, and transactional handling (e.g., <code>SM30</code> framework).  </li> </ul>"},{"location":"Deepseek%20R1/FUGR/Z_LLM_CLIENT/TABLEPROC_Z_LLM_CLIENT/#notes-for-developers","title":"Notes for Developers","text":"<ul> <li>Custom Enhancements: Use <code>CMOD</code>/<code>SMOD</code> or <code>BAdI</code> enhancements to inject custom logic (e.g., validations) without modifying the generated code directly.  </li> <li>Authorization Objects: If required, configure authorization checks via the maintenance generator.</li> </ul>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_ANTHROPIC/","title":"Package ZLLM_CLIENT_ANTHROPIC","text":"<p>AI Generated documentation.</p>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_ANTHROPIC/#overview","title":"Overview","text":"<p>Package provides SAP integration with Anthropic's LLM services through a dedicated API client implementation. Key features include Anthropic-specific message structure handling, API key authentication via SAP security mechanisms, and response processing optimized for Claude model outputs. Maintains compatibility with standard SAP interface patterns while implementing required headers, error handling for API rate limits, and specialized content formatting adhering to Anthropic's message schema. Includes support for both synchronous and streaming response modes with ABAP JSON transformation capabilities.</p>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_ANTHROPIC/ZCL_LLM_CLIENT_ANTHROPIC_CLAS/","title":"Class ZCL_LLM_CLIENT_ANTHROPIC","text":"<p>AI Generated documentation.</p>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_ANTHROPIC/ZCL_LLM_CLIENT_ANTHROPIC_CLAS/#overview","title":"Overview","text":"<p>Provides client implementation for interacting with Anthropic's LLM API. Inherits from base LLM client (<code>ZCL_LLM_CLIENT_BASE</code>) and implements Anthropic-specific API handling.</p> <p>Key Public Methods:  </p> <ol> <li><code>GET_CLIENT</code>: Factory method returning client instance  </li> <li><code>CONSTRUCTOR</code>: Initializes client with configs  </li> <li><code>ZIF_LLM_CLIENT~NEW_REQUEST</code>: Creates request with Anthropic-specific defaults (e.g., 8192 max tokens)  </li> </ol> <p>Main Features:  </p> <ul> <li>Handles Anthropic API authentication (x-api-key)  </li> <li>Implements message formatting per Anthropic requirements  </li> <li>Processes responses with Anthropic-specific content structures  </li> <li>Supports tool definitions and tool choice handling  </li> </ul>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_ANTHROPIC/ZCL_LLM_CLIENT_ANTHROPIC_CLAS/#dependencies","title":"Dependencies","text":"<ol> <li><code>ZCL_LLM_HTTP_CLIENT_WRAPPER</code>: HTTP communication  </li> <li><code>ZCL_LLM_COMMON</code>: Utility methods and BAdI access  </li> <li>Encryption class via BAdI <code>GET_ENCRYPTION_IMPL</code> </li> <li>Exceptions: <code>ZCX_LLM_VALIDATION</code>, <code>ZCX_LLM_AUTHORIZATION</code> </li> </ol>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_ANTHROPIC/ZCL_LLM_CLIENT_ANTHROPIC_CLAS/#details","title":"Details","text":""},{"location":"Deepseek%20R1/ZLLM_CLIENT_ANTHROPIC/ZCL_LLM_CLIENT_ANTHROPIC_CLAS/#key-implementation-flow","title":"Key Implementation Flow","text":"<pre><code>sequenceDiagram\n    Client-&gt;&gt;+AnthropicClient: new_request()\n    AnthropicClient-&gt;&gt;+HTTP Client: set_header('anthropic-version')\n    AnthropicClient-&gt;&gt;+HTTP Client: set_header('x-api-key')\n    AnthropicClient-&gt;&gt;Request Builder: build_request_json()\n    Request Builder-&gt;&gt;Anthropic API: messages[] + tools[] + system[]\n    Anthropic API--&gt;&gt;Response Handler: content[] + tool_use\n    Response Handler-&gt;&gt;Client: parsed_message + tool_calls</code></pre>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_ANTHROPIC/ZCL_LLM_CLIENT_ANTHROPIC_CLAS/#implementation-highlights","title":"Implementation Highlights","text":"<ol> <li>HTTP Client Configuration </li> <li>Sets required <code>anthropic-version: 2023-06-01</code> header  </li> <li> <p>Uses encrypted API key from provider config  </p> </li> <li> <p>Message Processing </p> </li> <li>Separates system messages into dedicated JSON array  </li> <li>Handles tool call responses with <code>type: tool_use</code> </li> <li> <p>Converts tool results to Anthropic's <code>tool_result</code> format  </p> </li> <li> <p>Tool Handling </p> </li> </ol> <pre><code>classDiagram\n    class Tool_Definition{\n        +name\n        +description\n        +input_schema\n    }\n    class Tool_Choice{\n        +type: auto|any|tool\n        +name\n    }\n    AnthropicRequest --* Tool_Definition\n    AnthropicRequest --* Tool_Choice</code></pre> <ul> <li>Requires tool definitions when tools are used  </li> <li> <p>Supports three tool choice modes: auto, any, specific tool  </p> </li> <li> <p>Response Parsing </p> </li> <li>Processes nested <code>content[]</code> array with text/tool_use entries  </li> <li>Converts Anthropic's <code>input</code> structure to standard tool call format  </li> <li> <p>Handles token usage statistics  </p> </li> <li> <p>Limitations </p> </li> <li>Structured output not supported (explicitly ignored)  </li> <li>Maximum tokens hardcoded to 8192  </li> <li>Requires manual system message separation</li> </ul>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_AZUREOAI/","title":"Package ZLLM_CLIENT_AZUREOAI","text":"<p>AI Generated documentation.</p>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_AZUREOAI/#overview","title":"Overview","text":"<p>This ABAP package provides a secure integration framework connecting SAP systems with Azure OpenAI services. It combines encrypted authentication management, dynamic API endpoint configuration, and robust JSON data handling to enable reliable AI-powered interactions. The solution emphasizes data security through credential encryption while offering structured response validation and schema enforcement for Azure OpenAI's chat completion APIs. Components work in tandem to simplify enterprise-grade AI integration with built-in error resilience and compliance-ready communication protocols.</p>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_CLIENT_AZUREOAI_CLAS/","title":"Class ZCL_LLM_CLIENT_AZUREOAI","text":"<p>AI Generated documentation.</p>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_CLIENT_AZUREOAI_CLAS/#overview","title":"Overview","text":"<p>Provides Azure OpenAI client implementation for SAP ABAP systems, handling API communication and authentication. Inherits from base client class <code>ZCL_LLM_CLIENT_BASE</code>.</p> <p>Key Public Methods:  </p> <ol> <li><code>GET_CLIENT</code> </li> <li>Factory method creating client instances  </li> <li>Validates configurations via parent constructor  </li> <li> <p>Raises <code>ZCX_LLM_VALIDATION</code>/<code>ZCX_LLM_AUTHORIZATION</code> for configuration errors  </p> </li> <li> <p><code>CONSTRUCTOR</code> </p> </li> <li>Initializes client with provider-specific settings  </li> <li>Inherits validation logic from parent class  </li> </ol> <p>Core Capabilities:  </p> <ul> <li>Secure API key handling with encryption support  </li> <li>Dynamic endpoint construction  </li> <li>JSON structured response generation  </li> </ul>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_CLIENT_AZUREOAI_CLAS/#dependencies","title":"Dependencies","text":"<ol> <li><code>ZCL_LLM_HTTP_CLIENT_WRAPPER</code> - HTTP client management  </li> <li><code>ZCL_LLM_SO_JS_AZUREOAI</code> - Azure-specific JSON response handler  </li> <li><code>ZCL_LLM_COMMON</code> - BAdI access for encryption implementations  </li> <li>Custom encryption class via BAdI <code>GET_ENCRYPTION_IMPL</code> </li> </ol>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_CLIENT_AZUREOAI_CLAS/#details","title":"Details","text":""},{"location":"Deepseek%20R1/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_CLIENT_AZUREOAI_CLAS/#authentication-flow","title":"Authentication Flow","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant SET_AUTH\n    participant BAdI\n    participant Encryption\n    Client-&gt;&gt;SET_AUTH: Execute auth setup\n    SET_AUTH-&gt;&gt;BAdI: get_encryption_impl()\n    BAdI--&gt;&gt;Encryption: Instance\n    SET_AUTH-&gt;&gt;Encryption: decrypt(api_key)\n    SET_AUTH-&gt;&gt;HTTP Client: Set header api-key=&lt;decrypted&gt;</code></pre> <p>Key Implementation Notes:  </p> <ol> <li>Endpoint Construction:  </li> </ol> <pre><code>|/{model}/chat/completions?api-version={api_version}|\n</code></pre> <p>Uses constant <code>API_VERSION</code> (2024-10-21) for versioning  </p> <ol> <li>Encrypted Credentials:  </li> <li>Decrypts <code>AUTH_ENCRYPTED</code> via BAdI-implemented encryption class  </li> <li> <p>Supports clear-text fallback if encryption not used  </p> </li> <li> <p>Structured Output:    Instantiates Azure-specific JSON parser <code>ZCL_LLM_SO_JS_AZUREOAI</code> </p> </li> <li> <p>HTTP Client Management:    Delegates to wrapper class for:  </p> </li> <li>Connection pooling  </li> <li>SSL configuration  </li> <li>Proxy handling  </li> </ol> <p>Exception Strategy:  </p> <ul> <li>Parent class handles common validation errors  </li> <li>Custom authorization errors when:  </li> <li>Encrypted API key decryption fails  </li> <li>Invalid authentication type configuration</li> </ul>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_SO_JS_AZUREOAI_CLAS/","title":"Class ZCL_LLM_SO_JS_AZUREOAI","text":"<p>AI Generated documentation.</p>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_SO_JS_AZUREOAI_CLAS/#overview","title":"Overview","text":"<p>Provides specialized JSON schema construction for Azure OpenAI integration within SAP systems. Inherits core JSON schema generation capabilities from parent class <code>ZCL_LLM_SO_JS</code>.  </p> <p>Key Aspects:  </p> <ul> <li>Overrides protected template methods <code>PRE_SCHEMA</code> and <code>POST_SCHEMA</code> to enforce Azure-specific schema structure.  </li> <li>Public interface inherited from parent (no new public methods added).  </li> </ul>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_SO_JS_AZUREOAI_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li>Inherits from <code>ZCL_LLM_SO_JS</code> (base JSON schema generator).  </li> </ul>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_SO_JS_AZUREOAI_CLAS/#details","title":"Details","text":""},{"location":"Deepseek%20R1/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_SO_JS_AZUREOAI_CLAS/#method-implementation","title":"Method Implementation","text":"<pre><code>flowchart LR  \n  Parent[ZCL_LLM_SO_JS] --&gt;|Calls| PreSchema[PRE_SCHEMA]  \n  Parent --&gt;|Calls| PostSchema[POST_SCHEMA]  \n  classDef override fill:#e6f3ff,stroke:#0066cc;  \n  class PreSchema,PostSchema override;  </code></pre> <p>Core Logic:  </p> <ol> <li><code>PRE_SCHEMA</code>:  </li> <li> <p>Injects Azure OpenAI root schema header:  </p> <pre><code>\"name\":\"Response\",\"strict\":true,\"schema\":{  \n</code></pre> </li> <li> <p>Enforces strict validation and response structure  </p> </li> <li> <p><code>POST_SCHEMA</code>:  </p> </li> <li>Closes the root schema with <code>}</code> </li> <li>Ensures valid JSON structure completion  </li> </ol> <p>Design Pattern:  </p> <ul> <li>Implements Template Method Pattern via inherited <code>PROCESS_SCHEMA</code> (parent control flow with specialized steps).  </li> </ul> <p>Critical Implementation Notes:  </p> <ul> <li>Schema construction order is parent-managed  </li> <li>Strict mode activation is Azure-specific requirement  </li> <li>Class is marked <code>FINAL</code> to prevent unintended extension</li> </ul>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_OLLAMA/","title":"Package ZLLM_CLIENT_OLLAMA","text":"<p>AI Generated documentation.</p>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_OLLAMA/#overview","title":"Overview","text":"<p>This ABAP package provides specialized integration capabilities for Ollama large language models within SAP systems. It implements a robust client architecture focused on seamless API communication, structured response handling, and advanced LLM interaction patterns while maintaining SAP development standards.</p> <p>Key features enable direct model interaction through:  </p> <ul> <li>Native ABAP API client implementation for Ollama's REST endpoints  </li> <li>Structured JSON output generation with schema validation  </li> <li>Tool call processing infrastructure for function execution workflows  </li> <li>Extended base LLM client functionality with error handling  </li> <li>Payload construction utilities for chat completions  </li> <li>Response parsing with AI result object mapping  </li> <li>Security-compliant configuration management  </li> </ul> <p>The implementation emphasizes production-grade reliability through timeout handling, authorization support, and exception management while providing a streamlined interface for AI-powered application development.</p>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_OLLAMA/ZCL_LLM_CLIENT_OLLAMA_CLAS/","title":"Class ZCL_LLM_CLIENT_OLLAMA","text":"<p>AI Generated documentation.</p>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_OLLAMA/ZCL_LLM_CLIENT_OLLAMA_CLAS/#overview","title":"Overview","text":"<p>Implements Ollama LLM client functionality by extending base LLM client (<code>zcl_llm_client_base</code>). Key features:</p> <ul> <li>Public Methods:</li> <li><code>get_client</code>: Factory method creating preconfigured client instances</li> <li> <p><code>constructor</code>: Initializes client with configs and performs auth setup</p> </li> <li> <p>Core Capabilities:</p> </li> <li>Handles Ollama-specific API communication</li> <li>Supports structured JSON output generation</li> <li>Implements tool call functionality for LLM responses</li> <li>Manages authentication with optional API keys</li> <li>Processes Ollama-specific response formats</li> </ul>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_OLLAMA/ZCL_LLM_CLIENT_OLLAMA_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li><code>zcl_llm_http_client_wrapper</code>: HTTP client management</li> <li><code>zcl_llm_common</code>: JSON serialization/deserialization utilities</li> <li><code>zcx_llm_validation</code>/<code>zcx_llm_authorization</code>: Exception classes</li> <li>BAdI <code>ZLLM_BADI</code>: Encryption implementation for credentials</li> <li><code>/ui2/cl_json</code>: JSON handling for tool call arguments</li> </ul>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_OLLAMA/ZCL_LLM_CLIENT_OLLAMA_CLAS/#details","title":"Details","text":""},{"location":"Deepseek%20R1/ZLLM_CLIENT_OLLAMA/ZCL_LLM_CLIENT_OLLAMA_CLAS/#authentication-flow","title":"Authentication Flow","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant zcl_llm_client_ollama\n    participant Encryption Class\n    participant HTTP Client\n\n    Client-&gt;&gt;zcl_llm_client_ollama: get_client()\n    zcl_llm_client_ollama-&gt;&gt;Encryption Class: decrypt(auth_encrypted)\n    Encryption Class--&gt;&gt;zcl_llm_client_ollama: API key\n    zcl_llm_client_ollama-&gt;&gt;HTTP Client: set_header(API_HEADER:API_KEY)</code></pre>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_OLLAMA/ZCL_LLM_CLIENT_OLLAMA_CLAS/#request-building-logic","title":"Request Building Logic","text":"<p>Key aspects of <code>build_request_json</code>:</p> <ol> <li>Modifies last message for structured output by appending JSON schema</li> <li>Adds Ollama-specific parameters:</li> <li><code>stream: false</code> for non-streaming responses</li> <li><code>format</code> parameter when using structured output</li> <li>Custom <code>options</code> from request parameters</li> </ol> <pre><code>flowchart TD\n    A[Start with Base Request] --&gt; B{Structured Output?}\n    B --&gt;|Yes| C[Modify Last Message]\n    B --&gt;|No| D[Use Original Request]\n    C --&gt; E[Add JSON Schema to Content]\n    D --&gt; F[Generate Base JSON]\n    F --&gt; G[Add Stream Parameter]\n    G --&gt; H{Options Exist?}\n    H --&gt;|Yes| I[Append Options Block]\n    H --&gt;|No| J[Finalize JSON]\n    I --&gt; J</code></pre>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_OLLAMA/ZCL_LLM_CLIENT_OLLAMA_CLAS/#response-handling","title":"Response Handling","text":"<p><code>handle_http_response</code> implements:</p> <ul> <li>Error mapping for HTTP status codes</li> <li>Tool call processing with argument deserialization</li> <li>Token usage statistics from Ollama-specific fields</li> <li>Structured output parsing when enabled</li> </ul> <p>Tool Call Processing:</p> <pre><code>LOOP AT response-message-tool_calls\n  IF tool matches registered tools\n    CREATE DATA func_result TYPE HANDLE parameters\n    DESERIALIZE arguments to func_result\n    ADD TO result-choice-tool_calls\n  ELSE IF required tool missing\n    SET ERROR\n</code></pre>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_OLLAMA/ZCL_LLM_CLIENT_OLLAMA_CLAS/#type-mappings","title":"Type Mappings","text":"<p>Custom Ollama types ensure proper API communication:</p> <ul> <li><code>ollama_response</code>: Matches Ollama's chat response format</li> <li><code>ollama_tool_call</code>: Handles nested tool call structure</li> <li><code>ollama_message</code>: Extends standard messages with tool calls table</li> </ul>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_OLLAMA/ZCL_LLM_CLIENT_OLLAMA_CLAS/#structured-output-handling","title":"Structured Output Handling","text":"<p>Special treatment in both request building and response parsing:</p> <ol> <li>Modifies prompt to include JSON schema</li> <li>Adds <code>format</code> parameter to request</li> <li>Uses dedicated parser for JSON responses</li> <li>Handles potential parsing errors with specific error messages</li> </ol>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_OPENAI/","title":"Package ZLLM_CLIENT_OPENAI","text":"<p>AI Generated documentation.</p>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_OPENAI/#overview","title":"Overview","text":"<p>This ABAP package provides specialized integration components for OpenAI services within SAP systems. It focuses on secure communication, standardized response handling, and schema validation tailored for Large Language Model (LLM) interactions.</p>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_OPENAI/#core-components","title":"Core Components","text":"<p>OpenAI Client Implementation </p> <ul> <li>Manages encrypted credential storage through BAdI integration  </li> <li>Implements provider-specific REST communication patterns  </li> <li>Processes JSON responses with OpenAPI specification compliance  </li> <li>Features error handling for API rate limits and service availability  </li> </ul> <p>JSON Schema Generation </p> <ul> <li>Extends base schema generation with OpenAI-specific requirements  </li> <li>Enforces strict validation through inheritance method redefinition  </li> <li>Implements response object wrapping for standardized output structures  </li> <li>Supports OpenAPI specification alignment for interoperability  </li> </ul>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_OPENAI/#key-features","title":"Key Features","text":"<ul> <li>Secure Authentication: Encrypted credential management via SAP standard extension points  </li> <li>API Interoperability: Implements OpenAPI-compliant request/response patterns  </li> <li>Validation Framework: Combines schema generation with strict format/type checking  </li> <li>Extensibility: Designed for adaptation to alternative LLM providers through inheritance and BAdI implementations</li> </ul>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_OPENAI/ZCL_LLM_CLIENT_OPENAI_CLAS/","title":"Class ZCL_LLM_CLIENT_OPENAI","text":"<p>AI Generated documentation.</p>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_OPENAI/ZCL_LLM_CLIENT_OPENAI_CLAS/#overview","title":"Overview","text":"<p>zcl_llm_client_openai is a specialized SAP ABAP client implementation for interacting with OpenAI services. It inherits from the base LLM client class (<code>zcl_llm_client_base</code>) and implements provider-specific logic.  </p> <p>Key public methods:  </p> <ul> <li><code>get_client</code>: Factory method to create an instance using configurations (<code>zllm_clnt_config</code>, <code>zllm_providers</code>).  </li> <li><code>constructor</code>: Initializes the client with configurations and performs setup (raises validation/authorization errors).  </li> </ul> <p>Core capabilities:  </p> <ul> <li>Handles OpenAI-specific endpoint paths (e.g., <code>/chat/completions</code>).  </li> <li>Manages authentication (supports encrypted API keys via BAdI).  </li> <li>Creates structured output handlers for JSON/OpenAPI formats.  </li> </ul>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_OPENAI/ZCL_LLM_CLIENT_OPENAI_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li><code>zcl_llm_http_client_wrapper</code>: HTTP client management.  </li> <li><code>zcl_llm_common</code>: Retrieves BAdI implementations (e.g., encryption).  </li> <li><code>zcl_llm_so_js_oa</code>: Structured JSON/OpenAPI output handler.  </li> <li>BAdI implementations for encryption/decryption.  </li> </ul>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_OPENAI/ZCL_LLM_CLIENT_OPENAI_CLAS/#details","title":"Details","text":""},{"location":"Deepseek%20R1/ZLLM_CLIENT_OPENAI/ZCL_LLM_CLIENT_OPENAI_CLAS/#authentication-flow","title":"Authentication Flow","text":"<pre><code>graph TD  \n    A[set_auth] --&gt; B{Auth encrypted?}  \n    B --&gt;|Yes| C[Get BAdI encryption impl]  \n    C --&gt; D[Decrypt auth value]  \n    B --&gt;|No| E[Use raw auth value]  \n    D --&gt; F{Authorization type?}  \n    E --&gt; F  \n    F --&gt;|Type 'A'| G[Set Bearer token header]  </code></pre> <ul> <li>Decrypts API keys using BAdI-based encryption if configured.  </li> <li>Supports Bearer token authentication.  </li> </ul>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_OPENAI/ZCL_LLM_CLIENT_OPENAI_CLAS/#http-client-initialization","title":"HTTP Client Initialization","text":"<p>Uses <code>zcl_llm_http_client_wrapper</code> to abstract HTTP client creation, ensuring consistent configuration handling across providers.  </p>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_OPENAI/ZCL_LLM_CLIENT_OPENAI_CLAS/#structured-output-handling","title":"Structured Output Handling","text":"<p>Instantiates <code>zcl_llm_so_js_oa</code> to process JSON/OpenAPI responses, enabling standardized output parsing.  </p>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_OPENAI/ZCL_LLM_CLIENT_OPENAI_CLAS/#critical-implementation-notes","title":"Critical Implementation Notes","text":"<ol> <li>Encryption BAdI: Requires a BAdI implementation (<code>get_encryption_impl</code>) for secure API key decryption.  </li> <li>Endpoint Flexibility: Hardcoded to <code>/chat/completions</code> (OpenAI-specific).  </li> <li>Error Propagation: Validation/authorization errors from dependencies (e.g., HTTP client setup) bubble up to callers.</li> </ol>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_OPENAI/ZCL_LLM_SO_JS_OA_CLAS/","title":"Class ZCL_LLM_SO_JS_OA","text":"<p>AI Generated documentation.</p>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_OPENAI/ZCL_LLM_SO_JS_OA_CLAS/#overview","title":"Overview","text":"<p><code>ZCL_LLM_SO_JS_OA</code> is a specialized implementation class for generating OpenAI-compatible JSON schemas. It inherits from <code>ZCL_LLM_SO_JS</code> and enhances schema generation through method redefinition.  </p> <p>Key Public Features:  </p> <ul> <li>Inherits public interface from parent class <code>ZCL_LLM_SO_JS</code> </li> <li>No additional public methods exposed  </li> </ul> <p>Core Interaction: Uses protected method <code>append_to_schema</code> (inherited) to construct schema strings.  </p>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_OPENAI/ZCL_LLM_SO_JS_OA_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li>Inherits from <code>ZCL_LLM_SO_JS</code> (base JSON schema generator)  </li> </ul>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_OPENAI/ZCL_LLM_SO_JS_OA_CLAS/#details","title":"Details","text":""},{"location":"Deepseek%20R1/ZLLM_CLIENT_OPENAI/ZCL_LLM_SO_JS_OA_CLAS/#method-redefinition-logic","title":"Method Redefinition Logic","text":"<p>The class implements two protected methods to wrap schema content in OpenAI-specific structures:  </p> <pre><code>flowchart LR  \n  pre_schema --&gt;|Appends| Response_Header[\"'name':'Response','strict':true,'schema':{\"]  \n  post_schema --&gt;|Appends| Closing_Brace[\"}\"]  </code></pre> <p>Key Implementation Notes:  </p> <ol> <li><code>PRE_SCHEMA</code>:  </li> <li>Inserts header with <code>Response</code> object definition and strict mode enforcement  </li> <li> <p>Triggers schema body generation in parent class  </p> </li> <li> <p><code>POST_SCHEMA</code>:  </p> </li> <li>Closes the schema structure after parent class completes content generation  </li> </ol> <p>Design Impact:  </p> <ul> <li>Final class prevents further specialization  </li> <li>Tight coupling with parent class implementation expected</li> </ul>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_OPENROUTER/","title":"Package ZLLM_CLIENT_OPENROUTER","text":"<p>AI Generated documentation.</p>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_OPENROUTER/#overview","title":"Overview","text":"<p>This ABAP package provides a standardized integration framework for leveraging OpenRouter's LLM API within SAP systems. It combines secure API communication capabilities with strict JSON schema enforcement to ensure reliable AI-powered data exchange. The solution features encrypted credential management via BAdI-based decryption hooks, HTTP(S) request/response handling optimized for LLM interactions, and specialized schema wrappers that enforce structural compliance with SAP data requirements. The implementation emphasizes security through credential abstraction and technical robustness through typed response parsing while maintaining compatibility with SAP's integration patterns.</p>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_CLIENT_OPENROUTER_CLAS/","title":"Class ZCL_LLM_CLIENT_OPENROUTER","text":"<p>AI Generated documentation.</p>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_CLIENT_OPENROUTER_CLAS/#overview","title":"Overview","text":"<p>Provides a specialized client implementation for interacting with OpenRouter's LLM API. Inherits core LLM client functionality from base class <code>zcl_llm_client_base</code>.</p> <p>Key Public Methods:  </p> <ol> <li><code>GET_CLIENT</code> </li> <li>Factory method creating client instances  </li> <li>Parameters: Client config (<code>ZLLM_CLNT_CONFIG</code>), provider config (<code>ZLLM_PROVIDERS</code>)  </li> <li> <p>Returns: <code>ZIF_LLM_CLIENT</code> interface reference  </p> </li> <li> <p><code>CONSTRUCTOR</code> </p> </li> <li>Initializes client with configurations  </li> <li>Triggers class initialization via inherited logic  </li> </ol>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_CLIENT_OPENROUTER_CLAS/#dependencies","title":"Dependencies","text":"<ol> <li>BAdI Implementation (<code>ZCL_LLM_COMMON=&gt;GET_LLM_BADI</code>)  </li> <li>Used for encryption/decryption of authentication credentials  </li> <li>Encryption Class </li> <li>Dynamic resolution via BAdI for credential decryption  </li> <li>HTTP Client Wrapper (<code>ZCL_LLM_HTTP_CLIENT_WRAPPER</code>)  </li> <li>Handles HTTP connection management  </li> </ol>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_CLIENT_OPENROUTER_CLAS/#details","title":"Details","text":""},{"location":"Deepseek%20R1/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_CLIENT_OPENROUTER_CLAS/#method-flow","title":"Method Flow","text":"<pre><code>sequenceDiagram  \n    participant Client  \n    participant OpenRouterClient  \n    participant HTTP_Wrapper  \n    participant BAdI  \n    participant Enc_Class  \n\n    Client-&gt;&gt;OpenRouterClient: get_client()  \n    OpenRouterClient-&gt;&gt;HTTP_Wrapper: get_client()  \n    HTTP_Wrapper--&gt;&gt;OpenRouterClient: HTTP client  \n    OpenRouterClient-&gt;&gt;BAdI: get_encryption_impl()  \n    BAdI--&gt;&gt;OpenRouterClient: enc_class  \n    OpenRouterClient-&gt;&gt;Enc_Class: decrypt()  </code></pre>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_CLIENT_OPENROUTER_CLAS/#key-redefined-methods","title":"Key Redefined Methods","text":"<ol> <li><code>GET_HTTP_CLIENT</code> </li> <li>Retrieves preconfigured HTTP client from wrapper  </li> <li> <p>Sets OpenRouter-specific headers:  </p> <ul> <li><code>HTTP-Referer</code>: Identifies calling application  </li> <li><code>X-Title</code>: Client identification  </li> </ul> </li> <li> <p><code>SET_AUTH</code> </p> </li> <li>Implements bearer token authentication  </li> <li>Decrypts credentials using BAdI-resolved encryption implementation  </li> <li> <p>Handles both encrypted and plaintext authentication  </p> </li> <li> <p><code>CREATE_STRUCTURED_OUTPUT</code> </p> </li> <li>Returns OpenRouter-specific JSON structure handler (<code>ZCL_LLM_SO_JS_OR</code>)  </li> </ol>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_CLIENT_OPENROUTER_CLAS/#security-handling","title":"Security Handling","text":"<ul> <li>Authentication credentials are stored encrypted in <code>PROVIDER_CONFIG-AUTH_ENCRYPTED</code> </li> <li>Decryption occurs only during runtime via injected encryption implementation  </li> </ul>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_CLIENT_OPENROUTER_CLAS/#api-endpoints","title":"API Endpoints","text":"<ul> <li>Chat endpoint hardcoded to <code>/chat/completions</code> (OpenRouter standard)</li> </ul>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_SO_JS_OR_CLAS/","title":"Class ZCL_LLM_SO_JS_OR","text":"<p>AI Generated documentation.</p>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_SO_JS_OR_CLAS/#overview","title":"Overview","text":"<p><code>ZCL_LLM_SO_JS_OR</code> is a specialized JSON schema generator class that extends base functionality from <code>ZCL_LLM_SO_JS</code>. It focuses on building a strict \"Response\" schema structure through protected method redefinitions.  </p> <p>Key Aspects:  </p> <ul> <li>Inherits core JSON schema construction logic from parent class  </li> <li>Adds schema enforcement for response objects  </li> <li>No public methods declared (inherits public interface from parent)  </li> <li>Critical redefinitions in <code>PRE_SCHEMA</code>/<code>POST_SCHEMA</code> control schema boundaries  </li> </ul>"},{"location":"Deepseek%20R1/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_SO_JS_OR_CLAS/#details","title":"Details","text":""},{"location":"Deepseek%20R1/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_SO_JS_OR_CLAS/#method-flow","title":"Method Flow","text":"<pre><code>graph TD\n    A[pre_schema] --&gt; B[Appends Response header]\n    B --&gt; C[Parent schema logic]\n    C --&gt; D[post_schema]\n    D --&gt; E[Closes schema]</code></pre> <p>Protected Method Implementation:  </p> <ol> <li><code>PRE_SCHEMA</code>:  </li> <li>Initializes schema with strict response structure:  </li> </ol> <pre><code>append_to_schema(|\"name\":\"Response\",\"strict\":true,\"schema\":{|)\n</code></pre> <ul> <li> <p>Triggers parent class schema generation after header  </p> </li> <li> <p><code>POST_SCHEMA</code>:  </p> </li> <li>Finalizes schema with closing bracket  </li> </ul> <pre><code>append_to_schema(|}|)\n</code></pre> <p>Design Pattern:  </p> <ul> <li>Template Method pattern through parent class method reuse  </li> <li>Hook methods (<code>PRE_</code>/<code>POST_SCHEMA</code>) control schema bookends while delegating core implementation to ancestor class</li> </ul>"},{"location":"Llama%203.2%203b/","title":"Package ZLLM_CLIENT","text":"<p>AI Generated documentation.</p>"},{"location":"Llama%203.2%203b/#overview","title":"Overview","text":"<p>The provided ABAP development package is a comprehensive collection of classes, interfaces, and functions designed to integrate Large Language Model (LLM) capabilities into SAP applications. It enables the creation of structured output, handling of HTTP requests and responses, and provides a standardized interface for interacting with various LLM providers, including Anthropic, Azure OpenAI, Ollama, and OpenRouter. The package also includes features for managing provider configurations, encryption and decryption, and provides a set of tools for data validation and processing.</p>"},{"location":"Llama%203.2%203b/#package-overview","title":"Package Overview","text":"<p>The package is designed to provide a flexible and scalable framework for integrating LLM capabilities into SAP applications. It offers a range of features, including:</p> <ul> <li>Integration with multiple LLM providers</li> <li>Structured output and HTTP request handling</li> <li>Provider configuration management</li> <li>Encryption and decryption</li> <li>Data validation and processing tools</li> <li>Standardized interfaces for interacting with LLM providers</li> </ul> <p>This package is intended to simplify the integration of LLM capabilities into SAP applications, enabling developers to focus on building complex applications without worrying about the underlying LLM infrastructure.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_AUTH_DISABLED_CLAS/","title":"Class ZCL_LLM_AUTH_DISABLED","text":"<p>AI Generated documentation.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_AUTH_DISABLED_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_auth_disabled</code> class is a test class designed to verify the authorization functionality of the <code>zcl_llm_auth</code> class. It provides a set of test methods to check the behavior of the <code>zcl_llm_auth</code> class without raising any exceptions.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_AUTH_DISABLED_CLAS/#dependencies","title":"Dependencies","text":"<p>The class depends on the <code>zcl_llm_auth</code> class, which is the class being tested. It also uses the <code>BADI ZLLM_DEFAULTS</code> to implement custom versions of the <code>check_decrypt</code>, <code>check_encrypt</code>, <code>check_get_client</code>, and <code>check_provider_maintenance</code> methods.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_AUTH_DISABLED_CLAS/#details","title":"Details","text":"<p>The class has four test methods:</p> <ul> <li><code>zif_llm_auth~check_decrypt</code>: Verifies that the <code>check_decrypt</code> method of <code>zcl_llm_auth</code> does not raise an exception.</li> <li><code>zif_llm_auth~check_encrypt</code>: Verifies that the <code>check_encrypt</code> method of <code>zcl_llm_auth</code> does not raise an exception.</li> <li><code>zif_llm_auth~check_get_client</code>: Verifies that the <code>check_get_client</code> method of <code>zcl_llm_auth</code> does not raise an exception.</li> <li><code>zif_llm_auth~check_provider_maintenance</code>: Verifies that the <code>check_provider_maintenance</code> method of <code>zcl_llm_auth</code> does not raise an exception.</li> </ul> <p>The class uses a custom implementation of the <code>check_decrypt</code>, <code>check_encrypt</code>, <code>check_get_client</code>, and <code>check_provider_maintenance</code> methods to avoid raising exceptions. These methods are registered in the <code>BADI ZLLM_DEFAULTS</code> to ensure that the custom implementation is used.</p> <pre><code>graph LR\n    class zcl_llm_auth_disabled as Test Class\n        setup --&gt;|Create instance| zcl_llm_auth_disabled\n        zcl_llm_auth --&gt;|Check decrypt| zcl_llm_auth~check_decrypt\n        zcl_llm_auth --&gt;|Check encrypt| zcl_llm_auth~check_encrypt\n        zcl_llm_auth --&gt;|Check get client| zcl_llm_auth~check_get_client\n        zcl_llm_auth --&gt;|Check provider maintenance| zcl_llm_auth~check_provider_maintenance</code></pre> <p>The class provides a way to test the authorization functionality of the <code>zcl_llm_auth</code> class without raising exceptions, allowing for a more comprehensive test suite.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_CALL_LOGGER_CLAS/","title":"Class ZCL_LLM_CALL_LOGGER","text":"<p>AI Generated documentation.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_CALL_LOGGER_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_call_logger</code> class is a SAP class responsible for logging call entries in the SAP system. It provides a simple interface for logging calls based on system settings and user filters.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_CALL_LOGGER_CLAS/#dependencies","title":"Dependencies","text":"<p>The class depends on the following:</p> <ul> <li><code>zllm_system</code> table to retrieve system settings</li> <li><code>zllm_call_log</code> table to store log entries</li> </ul>"},{"location":"Llama%203.2%203b/ZCL_LLM_CALL_LOGGER_CLAS/#details","title":"Details","text":""},{"location":"Llama%203.2%203b/ZCL_LLM_CALL_LOGGER_CLAS/#class-structure","title":"Class Structure","text":"<p>The class has a simple structure with a constructor, a method to add log entries, and a private data member to track the active state of the system.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_CALL_LOGGER_CLAS/#constructor","title":"Constructor","text":"<p>The constructor initializes the class by retrieving the system settings from the <code>zllm_system</code> table. If the <code>save_calls</code> flag is set to <code>TRUE</code> and the <code>call_filter_uname</code> field is either a wildcard or the current username, the class sets its active state to <code>TRUE</code>.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_CALL_LOGGER_CLAS/#add-method","title":"add Method","text":"<p>The <code>add</code> method is the main entry point for logging calls. It checks the active state of the system and only logs the call if it is active. If the system is active, it inserts a new log entry into the <code>zllm_call_log</code> table.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_CALL_LOGGER_CLAS/#interaction-flow","title":"Interaction Flow","text":"<p>The interaction flow between the class and the system can be visualized as follows:</p> <pre><code>graph LR\n    A[Set system settings] --&gt;|active|&gt; B[Check active state]\n    B --&gt;|active|&gt; C[Log call entry]\n    C --&gt;|logged|&gt; D[Insert log entry into zllm_call_log]</code></pre>"},{"location":"Llama%203.2%203b/ZCL_LLM_CALL_LOGGER_CLAS/#logic-flow","title":"Logic Flow","text":"<p>The logic flow of the class can be broken down into the following steps:</p> <ol> <li>Retrieve system settings from <code>zllm_system</code> table</li> <li>Check if <code>save_calls</code> flag is set to <code>TRUE</code> and <code>call_filter_uname</code> field is either a wildcard or the current username</li> <li>Set active state to <code>TRUE</code> if conditions are met</li> <li>Check active state before logging call entry</li> <li>Log call entry into <code>zllm_call_log</code> table if active state is <code>TRUE</code></li> </ol>"},{"location":"Llama%203.2%203b/ZCL_LLM_CALL_LOGGER_CLAS/#expert-notes","title":"Expert Notes","text":"<ul> <li>The class uses a simple and straightforward approach to logging calls, making it easy to understand and maintain.</li> <li>The use of a private data member to track the active state of the system allows for efficient and flexible logging.</li> <li>The class can be extended to support additional features, such as logging to different tables or supporting multiple user filters.</li> </ul>"},{"location":"Llama%203.2%203b/ZCL_LLM_CHAT_REQUEST_CLAS/","title":"Class ZCL_LLM_CHAT_REQUEST","text":"<p>AI Generated documentation.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_CHAT_REQUEST_CLAS/#overview","title":"Overview","text":"<p>The <code>ltcl_chat_request</code> class is a test class that implements the <code>zif_llm_chat_request</code> interface. It provides methods for testing chat request functionality, including adding messages, tools, and tool results, as well as clearing messages and tools. The class also provides methods for getting messages and tools, setting structured output, and setting tool choice.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_CHAT_REQUEST_CLAS/#dependencies","title":"Dependencies","text":"<p>The <code>ltcl_chat_request</code> class depends on the following:</p> <ul> <li><code>zllm_request</code> class</li> <li><code>zcl_llm_common</code> class</li> <li><code>zif_llm_client</code> interface</li> <li><code>zif_llm_tool</code> interface</li> </ul>"},{"location":"Llama%203.2%203b/ZCL_LLM_CHAT_REQUEST_CLAS/#details","title":"Details","text":""},{"location":"Llama%203.2%203b/ZCL_LLM_CHAT_REQUEST_CLAS/#main-interactions","title":"Main Interactions","text":"<p>The <code>ltcl_chat_request</code> class interacts with the following objects:</p> <ul> <li><code>zllm_request</code> object: This object is used to store the chat request data.</li> <li><code>zcl_llm_common</code> class: This class is used to convert data to JSON format.</li> <li><code>zif_llm_client</code> interface: This interface is used to get the role of the client.</li> <li><code>zif_llm_tool</code> interface: This interface is used to get the tool result.</li> </ul>"},{"location":"Llama%203.2%203b/ZCL_LLM_CHAT_REQUEST_CLAS/#logic-flow","title":"Logic Flow","text":"<p>The logic flow of the class can be visualized as follows:</p> <pre><code>+---------------+\n|  Constructor  |\n+---------------+\n       |\n       | request\n       v\n+---------------+\n|  add_choice   |\n+---------------+\n       |\n       | messages\n       v\n+---------------+\n|  add_message  |\n+---------------+\n       |\n       | messages\n       v\n+---------------+\n|  add_tool     |\n+---------------+\n       |\n       | tools\n       v\n+---------------+\n|  add_tool_result|\n+---------------+\n       |\n       | messages\n       v\n+---------------+\n|  clear_messages|\n+---------------+\n       |\n       | messages\n       v\n+---------------+\n|  clear_tools   |\n+---------------+\n       |\n       | tools\n       v\n+---------------+\n|  get_messages  |\n+---------------+\n       |\n       | messages\n       v\n+---------------+\n|  get_tools     |\n+---------------+\n       |\n       | tools\n       v\n+---------------+\n|  set_structured_output|\n+---------------+\n       |\n       | structured_output\n       v\n+---------------+\n|  set_tool_choice  |\n+---------------+\n       |\n       | tool_choice\n       v\n+---------------+\n|  get_internal_request|\n+---------------+\n</code></pre>"},{"location":"Llama%203.2%203b/ZCL_LLM_CHAT_REQUEST_CLAS/#interaction-with-foreign-objects","title":"Interaction with Foreign Objects","text":"<p>The <code>ltcl_chat_request</code> class interacts with the following foreign objects:</p> <ul> <li><code>zcl_llm_common</code> class: This class is used to convert data to JSON format.</li> <li><code>zif_llm_client</code> interface: This interface is used to get the role of the client.</li> <li><code>zif_llm_tool</code> interface: This interface is used to get the tool result.</li> <li><code>zllm_request</code> object: This object is used to store the chat request data.</li> </ul> <p>Note: The above diagram is a simplified representation of the interactions between the <code>ltcl_chat_request</code> class and its dependencies. It may not show all the interactions or the exact flow of data.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_CLIENT_BASE_CLAS/","title":"Class ZCL_LLM_CLIENT_BASE","text":"<p>AI Generated documentation.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_CLIENT_BASE_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_client_base</code> class is an abstract base class that provides a foundation for building LLM (Large Language Model) clients. It defines the common interface and methods for interacting with LLM providers, handling HTTP responses, and parsing structured output. The class is designed to be extended by concrete provider-specific classes.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_CLIENT_BASE_CLAS/#dependencies","title":"Dependencies","text":"<p>The class depends on the following external objects:</p> <ul> <li><code>zif_llm_client</code>: The interface for the LLM client.</li> <li><code>zif_llm_http_client_wrapper</code>: The interface for the HTTP client wrapper.</li> <li><code>zif_llm_tool_parser</code>: The interface for the tool parser.</li> <li><code>zif_llm_statistics</code>: The interface for the statistics collector.</li> <li><code>zcl_llm_options</code>: The class for handling options.</li> <li><code>zcl_llm_chat_request</code>: The class for building chat requests.</li> </ul>"},{"location":"Llama%203.2%203b/ZCL_LLM_CLIENT_BASE_CLAS/#details","title":"Details","text":""},{"location":"Llama%203.2%203b/ZCL_LLM_CLIENT_BASE_CLAS/#public-methods","title":"Public Methods","text":"<p>The class provides the following public methods:</p> <ul> <li><code>constructor</code>: Initializes the client with the provided configuration.</li> <li><code>build_request_json</code>: Builds the JSON request payload.</li> <li><code>handle_http_response</code>: Handles the HTTP response from the LLM provider.</li> <li><code>parse_message</code>: Parses the message from the LLM provider.</li> <li><code>create_structured_output</code>: Creates a structured output object.</li> <li><code>parse_structured_output</code>: Parses the structured output from the LLM provider.</li> <li><code>chat</code>: Initiates a chat session with the LLM provider.</li> <li><code>new_request</code>: Creates a new chat request object.</li> <li><code>get_client</code>: Retrieves the client instance from the provider.</li> </ul>"},{"location":"Llama%203.2%203b/ZCL_LLM_CLIENT_BASE_CLAS/#main-interactions","title":"Main Interactions","text":"<p>The class interacts with the following objects:</p> <ul> <li><code>zif_llm_client</code>: The interface for the LLM client.</li> <li><code>zif_llm_http_client_wrapper</code>: The interface for the HTTP client wrapper.</li> <li><code>zif_llm_tool_parser</code>: The interface for the tool parser.</li> <li><code>zif_llm_statistics</code>: The interface for the statistics collector.</li> <li><code>zcl_llm_options</code>: The class for handling options.</li> <li><code>zcl_llm_chat_request</code>: The class for building chat requests.</li> </ul>"},{"location":"Llama%203.2%203b/ZCL_LLM_CLIENT_BASE_CLAS/#logic-flow","title":"Logic Flow","text":"<p>The class follows the following logic flow:</p> <ol> <li>The <code>constructor</code> initializes the client with the provided configuration.</li> <li>The <code>build_request_json</code> method builds the JSON request payload.</li> <li>The <code>handle_http_response</code> method handles the HTTP response from the LLM provider.</li> <li>The <code>parse_message</code> method parses the message from the LLM provider.</li> <li>The <code>create_structured_output</code> method creates a structured output object.</li> <li>The <code>parse_structured_output</code> method parses the structured output from the LLM provider.</li> <li>The <code>chat</code> method initiates a chat session with the LLM provider.</li> <li>The <code>new_request</code> method creates a new chat request object.</li> <li>The <code>get_client</code> method retrieves the client instance from the provider.</li> </ol>"},{"location":"Llama%203.2%203b/ZCL_LLM_CLIENT_BASE_CLAS/#mermaid-diagram","title":"Mermaid Diagram","text":"<pre><code>graph LR\n    A[Client Constructor] --&gt;|init|&gt; B[Client Configuration]\n    B --&gt;|set|&gt; C[HTTP Client Wrapper]\n    C --&gt;|communicate|&gt; D[HTTP Response]\n    D --&gt;|parse|&gt; E[Message Parsing]\n    E --&gt;|create|&gt; F[Structured Output]\n    F --&gt;|parse|&gt; G[Structured Output Parsing]\n    G --&gt;|return|&gt; H[Chat Response]\n    H --&gt;|send|&gt; I[Chat Session]</code></pre> <p>This mermaid diagram illustrates the main interactions between the class and external objects, as well as the logic flow of the class.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_COMMON_CLAS/","title":"Class ZCL_LLM_COMMON","text":"<p>AI Generated documentation.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_COMMON_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_common</code> class provides a set of methods for converting between ABAP data structures and JSON strings. The class is designed to work with the <code>zllm_implementation</code> class, which is not shown in the provided code. The main public methods are:</p> <ul> <li><code>to_json</code>: Converts an ABAP data structure to a JSON string.</li> <li><code>from_json</code>: Converts a JSON string to an ABAP data structure.</li> <li><code>get_llm_badi</code>: Returns a reference to the <code>zllm_implementation</code> class.</li> </ul>"},{"location":"Llama%203.2%203b/ZCL_LLM_COMMON_CLAS/#dependencies","title":"Dependencies","text":"<p>The class depends on the <code>zllm_implementation</code> class, which is not shown in the provided code. Additionally, the class uses the <code>cl_abap_unit_assert</code> class for assertions.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_COMMON_CLAS/#details","title":"Details","text":"<p>The class uses a class diagram to visualize the relationships between its methods and data structures. The class diagram shows the following relationships:</p> <ul> <li>The <code>setup</code> and <code>teardown</code> methods are used to prepare and clean up test data.</li> <li>The <code>convert_struct_to_json</code> and <code>convert_json_to_struct</code> methods are used to convert between ABAP data structures and JSON strings.</li> <li>The <code>convert_empty_struct</code> method is used to convert an empty ABAP data structure to a JSON string.</li> <li>The <code>get_llm_badi</code> method returns a reference to the <code>zllm_implementation</code> class.</li> </ul> <p>The class uses the <code>zcl_llm_common=&gt;to_json</code> and <code>zcl_llm_common=&gt;from_json</code> methods to perform the conversions. These methods are not shown in the provided code, but they are likely implemented in the <code>zcl_llm_common</code> class.</p> <p>The class also uses the <code>cl_abap_unit_assert</code> class to perform assertions on the results of the conversions.</p> <pre><code>class zcl_llm_common {\n  +---------------+\n  |  setup      |\n  +---------------+\n  |  teardown    |\n  +---------------+\n  |  convert_struct_to_json  |\n  |  convert_json_to_struct  |\n  |  convert_empty_struct  |\n  +---------------+\n  |  test_data    |\n  +---------------+\n  |  to_json       |\n  |  from_json     |\n  |  get_llm_badi   |\n  +---------------+\n}</code></pre> <p>Note: The class diagram is a simple representation of the class structure and its methods.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_DEFAULT_IMPL_CLAS/","title":"Class ZCL_LLM_DEFAULT_IMPL","text":"<p>AI Generated documentation.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_DEFAULT_IMPL_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_default_impl</code> class provides a default implementation for the <code>zif_llm_default_impl</code> interface. It offers methods for getting encryption, JSON, call logger, statistics, and authorization implementations. The class is designed to be used as a base class for other implementations.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_DEFAULT_IMPL_CLAS/#dependencies","title":"Dependencies","text":"<p>The class depends on the following interfaces and classes:</p> <ul> <li><code>if_badi_interface</code></li> <li><code>zif_llm_encryption</code></li> <li><code>zif_llm_statistics</code></li> <li><code>zif_llm_call_logger</code></li> <li><code>zif_llm_auth</code></li> </ul>"},{"location":"Llama%203.2%203b/ZCL_LLM_DEFAULT_IMPL_CLAS/#details","title":"Details","text":""},{"location":"Llama%203.2%203b/ZCL_LLM_DEFAULT_IMPL_CLAS/#method-overview","title":"Method Overview","text":""},{"location":"Llama%203.2%203b/ZCL_LLM_DEFAULT_IMPL_CLAS/#zif_llm_default_implget_encryption_impl","title":"<code>zif_llm_default_impl~get_encryption_impl</code>","text":"<p>Gets the encryption implementation. If the encryption class is not bound, it creates a new instance of <code>zcl_llm_encryption</code>.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_DEFAULT_IMPL_CLAS/#zif_llm_default_implget_json_impl","title":"<code>zif_llm_default_impl~get_json_impl</code>","text":"<p>Gets the JSON implementation. This method always returns '/UI2/CL_JSON'.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_DEFAULT_IMPL_CLAS/#zif_llm_default_implget_call_logger_impl","title":"<code>zif_llm_default_impl~get_call_logger_impl</code>","text":"<p>Gets the call logger implementation. If the call logger class is not bound, it creates a new instance of <code>zcl_llm_call_logger</code>.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_DEFAULT_IMPL_CLAS/#zif_llm_default_implget_statistics_impl","title":"<code>zif_llm_default_impl~get_statistics_impl</code>","text":"<p>Gets the statistics implementation. If the statistics class is not bound, it creates a new instance of <code>zif_llm_statistics</code>.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_DEFAULT_IMPL_CLAS/#zif_llm_default_implget_authorization_impl","title":"<code>zif_llm_default_impl~get_authorization_impl</code>","text":"<p>Gets the authorization implementation. If the authorization class is not bound, it creates a new instance of <code>zif_llm_auth_disabled</code>.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_DEFAULT_IMPL_CLAS/#interaction-diagram","title":"Interaction Diagram","text":"<pre><code>graph LR\n    A[Get Encryption] --&gt;|enc_class|&gt; B[Create New Encryption Class]\n    B --&gt;|enc_class|&gt; C[Return Encryption Class]\n    A --&gt;|enc_class|&gt; D[Get JSON]\n    D --&gt;|JSON|&gt; E[Return '/UI2/CL_JSON']\n    A --&gt;|enc_class|&gt; F[Get Call Logger]\n    F --&gt;|log_class|&gt; G[Create New Call Logger Class]\n    G --&gt;|log_class|&gt; H[Return Call Logger Class]\n    A --&gt;|enc_class|&gt; I[Get Statistics]\n    I --&gt;|stat_class|&gt; J[Create New Statistics Class]\n    J --&gt;|stat_class|&gt; K[Return Statistics Class]\n    A --&gt;|enc_class|&gt; L[Get Authorization]\n    L --&gt;|auth_class|&gt; M[Create New Authorization Class]\n    M --&gt;|auth_class|&gt; N[Return Authorization Class]</code></pre> <p>This diagram illustrates the flow of the methods and how they interact with the class fields and other classes.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_ENCRYPTION_CLAS/","title":"Class ZCL_LLM_ENCRYPTION","text":"<p>AI Generated documentation.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_ENCRYPTION_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_encryption</code> class is a custom implementation of encryption and decryption functionality. It provides methods for encrypting and decrypting strings using the <code>SSF_KRN_ENVELOPE</code> and <code>SSF_KRN_DEVELOPE</code> function modules. The class also handles authentication and authorization through the <code>zcl_llm_common</code> class.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_ENCRYPTION_CLAS/#dependencies","title":"Dependencies","text":"<p>The class depends on the following:</p> <ul> <li><code>zcl_llm_common</code> class for authorization and authentication</li> <li><code>SSF_KRN_ENVELOPE</code> and <code>SSF_KRN_DEVELOPE</code> function modules for encryption and decryption</li> <li><code>SSFPSE_FILENAME</code> function module for getting the profile file</li> <li><code>SSFC_GET_CERTIFICATE</code> function module for getting the certificate</li> <li><code>SSFC_PARSE_CERTIFICATE</code> function module for parsing the certificate</li> </ul>"},{"location":"Llama%203.2%203b/ZCL_LLM_ENCRYPTION_CLAS/#details","title":"Details","text":""},{"location":"Llama%203.2%203b/ZCL_LLM_ENCRYPTION_CLAS/#class-constructor","title":"Class Constructor","text":"<p>The <code>class_constructor</code> method initializes the class by:</p> <ul> <li>Getting the authorization implementation from the <code>zcl_llm_common</code> class</li> <li>Getting the profile file using the <code>SSFPSE_FILENAME</code> function module</li> <li>Getting the certificate using the <code>SSFC_GET_CERTIFICATE</code> function module</li> <li>Parsing the certificate using the <code>SSFC_PARSE_CERTIFICATE</code> function module</li> </ul> <pre><code>graph LR\n    A[Get Authorization Implementation] --&gt;|zcl_llm_common| B[Get Profile File]\n    B --&gt;|SSFPSE_FILENAME| C[Get Certificate]\n    C --&gt;|SSFC_GET_CERTIFICATE| D[Parsing Certificate]\n    D --&gt;|SSFC_PARSE_CERTIFICATE| E[Initialize Class]</code></pre>"},{"location":"Llama%203.2%203b/ZCL_LLM_ENCRYPTION_CLAS/#encryption-and-decryption-methods","title":"Encryption and Decryption Methods","text":"<p>The <code>encrypt</code> and <code>decrypt</code> methods use the <code>SSF_KRN_ENVELOPE</code> and <code>SSF_KRN_DEVELOPE</code> function modules to encrypt and decrypt strings. They handle authentication and authorization through the <code>zcl_llm_common</code> class.</p> <pre><code>graph LR\n    A[Encrypt String] --&gt;|SSF_KRN_ENVELOPE| B[Get Recipients]\n    B --&gt;|Get Recipients| C[Get Input Data]\n    C --&gt;|SSF_KRN_ENVELOPE| D[Encrypt Data]\n    D --&gt;|Get Encrypted Data| E[Get Decrypted Data]\n    E --&gt;|SSF_KRN_DEVELOPE| F[Decrypt Data]\n    F --&gt;|Get Decrypted Data| G[Return Decrypted Data]</code></pre>"},{"location":"Llama%203.2%203b/ZCL_LLM_ENCRYPTION_CLAS/#error-handling","title":"Error Handling","text":"<p>The class raises exceptions for errors that occur during encryption and decryption, such as authentication and authorization failures, function module errors, and invalid parameters.</p> <pre><code>graph LR\n    A[Encrypt String] --&gt;|Error Handling| B[Raise Exception]\n    B --&gt;|Invalid Parameters| C[Raise Exception]\n    C --&gt;|Function Module Error| D[Raise Exception]\n    D --&gt;|Authentication Failure| E[Raise Exception]\n    E --&gt;|Authorization Failure| F[Raise Exception]</code></pre>"},{"location":"Llama%203.2%203b/ZCL_LLM_ENCRYPTION_CLAS/#class-flow","title":"Class Flow","text":"<p>The class flow is as follows:</p> <ul> <li>The <code>class_constructor</code> method initializes the class by getting the authorization implementation, profile file, and certificate.</li> <li>The <code>encrypt</code> and <code>decrypt</code> methods use the <code>SSF_KRN_ENVELOPE</code> and <code>SSF_KRN_DEVELOPE</code> function modules to encrypt and decrypt strings.</li> <li>The class raises exceptions for errors that occur during encryption and decryption.</li> </ul> <pre><code>graph LR\n    A[Class Constructor] --&gt;|Initialize Class| B[Encrypt String]\n    B --&gt;|Encrypt String| C[Decrypt String]\n    C --&gt;|Decrypt String| D[Return Decrypted Data]\n    D --&gt;|Return Decrypted Data| E[End Class]</code></pre>"},{"location":"Llama%203.2%203b/ZCL_LLM_FACTORY_CLAS/","title":"Class ZCL_LLM_FACTORY","text":"<p>AI Generated documentation.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_FACTORY_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_factory</code> class is a factory class responsible for creating and managing LLM (Large Language Model) clients. It provides a public method <code>get_client</code> that takes a model and provider name as input and returns a client instance. The class also has a private method <code>class_constructor</code> that initializes the factory and sets up the authorization implementation.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_FACTORY_CLAS/#dependencies","title":"Dependencies","text":"<p>The <code>zcl_llm_factory</code> class depends on the following external objects:</p> <ul> <li><code>zcl_llm_common</code>: a common class that provides a BADI (Business Application Interface Definition) for the LLM authorization implementation.</li> <li><code>zif_llm_auth</code>: an interface for the LLM authorization implementation.</li> <li><code>zif_llm_client</code>: an interface for the LLM client.</li> <li><code>zllm_clnt_config</code> and <code>zllm_providers</code>: tables that store client configuration and provider information, respectively.</li> </ul>"},{"location":"Llama%203.2%203b/ZCL_LLM_FACTORY_CLAS/#details","title":"Details","text":""},{"location":"Llama%203.2%203b/ZCL_LLM_FACTORY_CLAS/#public-methods","title":"Public Methods","text":"<ul> <li><code>get_client</code>: This method takes a model and provider name as input and returns a client instance. It first checks if the model and provider exist in the database, and if they do, it calls the <code>ZIF_LLM_CLIENT~GET_CLIENT</code> method of the provider class to create a new client instance.</li> <li><code>class_constructor</code>: This method is called when the factory is created. It initializes the factory and sets up the authorization implementation by calling the <code>get_authorization_impl</code> method of the <code>ZCL_LLM_COMMON</code> class.</li> </ul>"},{"location":"Llama%203.2%203b/ZCL_LLM_FACTORY_CLAS/#interaction-with-foreign-objects","title":"Interaction with Foreign Objects","text":"<p>The <code>get_client</code> method interacts with the following foreign objects:</p> <ul> <li><code>zllm_clnt_config</code> table: to check if the model exists in the database.</li> <li><code>zllm_providers</code> table: to check if the provider exists in the database.</li> <li><code>ZIF_LLM_CLIENT~GET_CLIENT</code> method: to create a new client instance.</li> </ul>"},{"location":"Llama%203.2%203b/ZCL_LLM_FACTORY_CLAS/#mermaid-diagram","title":"Mermaid Diagram","text":"<pre><code>graph LR\n    A[get_client] --&gt;|checks model and provider existence|&gt; B[Database Query]\n    B --&gt;|returns client instance|&gt; C[Client Instance]\n    C --&gt;|calls ZIF_LLM_CLIENT~GET_CLIENT|&gt; D[Provider Class]\n    D --&gt;|creates new client instance|&gt; E[Client Instance]</code></pre>"},{"location":"Llama%203.2%203b/ZCL_LLM_FACTORY_CLAS/#logic-flow","title":"Logic Flow","text":"<p>The <code>get_client</code> method follows this logic flow:</p> <ol> <li>Check if the model and provider exist in the database.</li> <li>If they do, call the <code>ZIF_LLM_CLIENT~GET_CLIENT</code> method of the provider class to create a new client instance.</li> <li>Return the client instance.</li> </ol> <p>The <code>class_constructor</code> method follows this logic flow:</p> <ol> <li>Initialize the factory.</li> <li>Set up the authorization implementation by calling the <code>get_authorization_impl</code> method of the <code>ZCL_LLM_COMMON</code> class.</li> <li>Return.</li> </ol>"},{"location":"Llama%203.2%203b/ZCL_LLM_HTTP_CLIENT_WRAPPER_CLAS/","title":"Class ZCL_LLM_HTTP_CLIENT_WRAPPER","text":"<p>AI Generated documentation.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_HTTP_CLIENT_WRAPPER_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_http_client_wrapper</code> class is a wrapper around the <code>zcl_llm_http_client</code> class, providing a more user-friendly interface for interacting with HTTP servers. The class is designed to handle HTTP requests and responses, and provides methods for setting headers, URLs, and communicating with the server.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_HTTP_CLIENT_WRAPPER_CLAS/#dependencies","title":"Dependencies","text":"<p>The class depends on the following external objects:</p> <ul> <li><code>zcl_llm_http_client</code>: The underlying HTTP client class.</li> <li><code>zcl_llm_common</code>: A utility class providing common functionality.</li> <li><code>cl_http_client</code>: A SAP class for creating HTTP clients.</li> <li><code>cl_http_utility</code>: A SAP class for utility functions.</li> </ul>"},{"location":"Llama%203.2%203b/ZCL_LLM_HTTP_CLIENT_WRAPPER_CLAS/#details","title":"Details","text":""},{"location":"Llama%203.2%203b/ZCL_LLM_HTTP_CLIENT_WRAPPER_CLAS/#class-diagram","title":"Class Diagram","text":"<pre><code>classDiagram\n  class zcl_llm_http_client_wrapper {\n    + setup()\n    + validate_client_creation()\n    + validate_client_creation_failure()\n    + validate_header_setting()\n    + validate_url_setting()\n    + validate_communication()\n    + validate_response_retrieval()\n    + validate_get_client()\n    + validate_close_client()\n  }\n  class zcx_llm_validation\n    + get_text()\n  class zcx_llm_http_error\n    + get_text()\n  class zllm_clnt_config\n    + client_config\n  class zllm_providers\n    + provider_config\n  class zcl_llm_http_client_wrapper\n    + get_client()\n    + close_client()\n    + communicate()\n    + set_url()\n    + set_header()\n  class ltcl_http_client_wrapper\n    + REF TO zcl_llm_http_client_wrapper\n  class ltcl_http_client_wrapper\n    + setup()</code></pre>"},{"location":"Llama%203.2%203b/ZCL_LLM_HTTP_CLIENT_WRAPPER_CLAS/#main-interactions","title":"Main Interactions","text":"<p>The class interacts with the following external objects:</p> <ul> <li><code>zcl_llm_http_client</code>: The underlying HTTP client class, used for communicating with the server.</li> <li><code>zcl_llm_common</code>: A utility class providing common functionality, used for logging and error handling.</li> <li><code>cl_http_client</code>: A SAP class for creating HTTP clients, used for creating a new client instance.</li> <li><code>cl_http_utility</code>: A SAP class for utility functions, used for setting request URI.</li> </ul>"},{"location":"Llama%203.2%203b/ZCL_LLM_HTTP_CLIENT_WRAPPER_CLAS/#important-aspects","title":"Important Aspects","text":"<ul> <li>The class provides a more user-friendly interface for interacting with HTTP servers, making it easier to handle HTTP requests and responses.</li> <li>The class handles HTTP errors and exceptions, providing a more robust and reliable way of communicating with the server.</li> <li>The class uses logging and error handling to provide more information about the communication process, making it easier to debug and troubleshoot issues.</li> </ul>"},{"location":"Llama%203.2%203b/ZCL_LLM_HTTP_CLIENT_WRAPPER_CLAS/#logic-flow","title":"Logic Flow","text":"<p>The class follows a simple logic flow:</p> <ol> <li>The <code>setup</code> method is called to initialize the class.</li> <li>The <code>validate_client_creation</code> method is called to validate the client creation.</li> <li>The <code>validate_client_creation_failure</code> method is called to handle client creation failures.</li> <li>The <code>validate_header_setting</code> method is called to validate header settings.</li> <li>The <code>validate_url_setting</code> method is called to validate URL settings.</li> <li>The <code>validate_communication</code> method is called to validate communication with the server.</li> <li>The <code>validate_response_retrieval</code> method is called to validate response retrieval.</li> <li>The <code>validate_get_client</code> method is called to validate getting a new client instance.</li> <li>The <code>validate_close_client</code> method is called to validate closing the client.</li> <li>The <code>communicate</code> method is called to communicate with the server.</li> <li>The <code>set_url</code> method is called to set the URL.</li> <li>The <code>set_header</code> method is called to set the header.</li> </ol> <p>Note: This is a simplified overview of the class and its interactions. The actual implementation may vary depending on the specific requirements and use cases.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_OPTIONS_CLAS/","title":"Class ZCL_LLM_OPTIONS","text":"<p>AI Generated documentation.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_OPTIONS_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_options</code> class is a custom implementation of the <code>zif_llm_options</code> interface, providing methods for setting and retrieving parameters for a language model. The class is designed to handle various parameters such as temperature, top_p, top_k, seed, frequency penalty, presence penalty, and minimum probability. The class uses a private internal table <code>int_parameters</code> to store the parameter values.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_OPTIONS_CLAS/#dependencies","title":"Dependencies","text":"<p>The class depends on the following:</p> <ul> <li><code>zif_llm_options</code> interface</li> <li><code>zcx_llm_validation</code> exception class</li> </ul>"},{"location":"Llama%203.2%203b/ZCL_LLM_OPTIONS_CLAS/#details","title":"Details","text":""},{"location":"Llama%203.2%203b/ZCL_LLM_OPTIONS_CLAS/#method-overview","title":"Method Overview","text":"<p>The class provides the following public methods:</p> <ul> <li><code>set_parameter</code>: Sets a parameter value. If the parameter already exists, it replaces the existing value.</li> <li><code>get_parameters</code>: Retrieves the current parameter values.</li> <li><code>set_custom_parameters</code>: Sets custom parameters with a single key-value pair.</li> <li><code>set_frequency_penalty</code>, <code>set_min_p</code>, <code>set_presence_penalty</code>, <code>set_seed</code>, <code>set_temperature</code>, <code>set_top_a</code>, <code>set_top_k</code>, and <code>set_top_p</code>: Set specific parameter values with validation.</li> <li><code>set_max_tokens</code>: Sets the maximum number of tokens.</li> </ul>"},{"location":"Llama%203.2%203b/ZCL_LLM_OPTIONS_CLAS/#interaction-flow","title":"Interaction Flow","text":"<p>The interaction flow between the methods can be visualized as follows:</p> <pre><code>graph LR\n    A[set_parameter] --&gt;|sets parameter value| B(get_parameters)\n    B --&gt;|returns parameter values| C(set_custom_parameters)\n    C --&gt;|sets custom parameters| D(get_parameters)\n    E(set_frequency_penalty) --&gt;|sets frequency penalty| F(get_parameters)\n    F --&gt;|returns parameter values| G(set_min_p)\n    G --&gt;|sets minimum probability| H(get_parameters)\n    H --&gt;|returns parameter values| I(set_presence_penalty)\n    I --&gt;|sets presence penalty| J(get_parameters)\n    J --&gt;|returns parameter values| K(set_seed)\n    K --&gt;|sets seed| L(get_parameters)\n    L --&gt;|returns parameter values| M(set_temperature)\n    M --&gt;|sets temperature| N(get_parameters)\n    N --&gt;|returns parameter values| O(set_top_a)\n    O --&gt;|sets top_a| P(get_parameters)\n    P --&gt;|returns parameter values| Q(set_top_k)\n    Q --&gt;|sets top_k| R(get_parameters)\n    R --&gt;|returns parameter values| S(set_top_p)\n    S --&gt;|sets top_p| T(get_parameters)\n    T --&gt;|returns parameter values| U(set_max_tokens)\n    U --&gt;|sets maximum tokens| V(get_parameters)</code></pre>"},{"location":"Llama%203.2%203b/ZCL_LLM_OPTIONS_CLAS/#interaction-with-foreign-objects","title":"Interaction with Foreign Objects","text":"<p>The class interacts with the following foreign objects:</p> <ul> <li><code>zif_llm_options</code> interface: The class implements this interface, providing the required methods.</li> <li><code>zcx_llm_validation</code> exception class: The class raises this exception when invalid parameter values are set.</li> </ul>"},{"location":"Llama%203.2%203b/ZCL_LLM_OPTIONS_CLAS/#internal-table","title":"Internal Table","text":"<p>The class uses a private internal table <code>int_parameters</code> to store the parameter values. The table is used to store the parameter values and is updated by the <code>set_parameter</code> method.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_SO_JS_CLAS/","title":"Class ZCL_LLM_SO_JS","text":"<p>AI Generated documentation.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_SO_JS_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_so_js</code> class is a test class that implements the <code>zif_llm_so</code> interface. It provides a set of methods for creating and manipulating JSON schema definitions. The class is designed to work with the <code>zif_llm_so</code> interface, which is not shown in the provided code.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_SO_JS_CLAS/#dependencies","title":"Dependencies","text":"<p>The class depends on the following external objects:</p> <ul> <li><code>zif_llm_so</code>: The interface that the class implements.</li> <li><code>cl_abap_datadescr</code>: A class used to create data descriptors.</li> <li><code>cl_abap_typedescr</code>: A class used to create type descriptors.</li> <li><code>cl_abap_structdescr</code>: A class used to create structure descriptors.</li> <li><code>cl_abap_tabledescr</code>: A class used to create table descriptors.</li> <li><code>cl_abap_elemdescr</code>: A class used to create element descriptors.</li> </ul>"},{"location":"Llama%203.2%203b/ZCL_LLM_SO_JS_CLAS/#details","title":"Details","text":"<p>The class provides the following public methods:</p> <ul> <li><code>append_to_schema</code>: Appends a string to the schema definition.</li> <li><code>get_field_info</code>: Returns a field information object.</li> <li><code>get_path</code>: Returns the path of a field.</li> <li><code>get_enum_values</code>: Returns the enum values for a description.</li> <li><code>process_type</code>: Processes a type descriptor.</li> <li><code>process_structure</code>: Processes a structure descriptor.</li> <li><code>process_table</code>: Processes a table descriptor.</li> <li><code>process_element</code>: Processes an element descriptor.</li> <li><code>get_datatype</code>: Returns the data type of a field.</li> <li><code>get_schema</code>: Returns the schema definition.</li> <li><code>set_schema</code>: Sets the schema definition.</li> </ul> <p>The class uses the following logic flow:</p> <ul> <li>The <code>append_to_schema</code> method appends a string to the schema definition.</li> <li>The <code>get_field_info</code> method returns a field information object.</li> <li>The <code>get_path</code> method returns the path of a field.</li> <li>The <code>get_enum_values</code> method returns the enum values for a description.</li> <li>The <code>process_type</code> method processes a type descriptor.</li> <li>The <code>process_structure</code> method processes a structure descriptor.</li> <li>The <code>process_table</code> method processes a table descriptor.</li> <li>The <code>process_element</code> method processes an element descriptor.</li> <li>The <code>get_datatype</code> method returns the data type of a field.</li> <li>The <code>get_schema</code> method returns the schema definition.</li> <li>The <code>set_schema</code> method sets the schema definition.</li> </ul> <p>The class interacts with the following foreign objects:</p> <ul> <li><code>zif_llm_so</code>: The interface that the class implements.</li> <li><code>cl_abap_datadescr</code>: A class used to create data descriptors.</li> <li><code>cl_abap_typedescr</code>: A class used to create type descriptors.</li> <li><code>cl_abap_structdescr</code>: A class used to create structure descriptors.</li> <li><code>cl_abap_tabledescr</code>: A class used to create table descriptors.</li> <li><code>cl_abap_elemdescr</code>: A class used to create element descriptors.</li> </ul> <p>Here is a Mermaid diagram that visualizes the logic flow of the class:</p> <pre><code>graph LR\n    A[append_to_schema] --&gt;|appends string to schema| B[get_field_info]\n    B --&gt;|returns field info| C[process_type]\n    C --&gt;|processes type descriptor| D[process_structure]\n    D --&gt;|processes structure descriptor| E[process_table]\n    E --&gt;|processes table descriptor| F[process_element]\n    F --&gt;|processes element descriptor| G[get_datatype]\n    G --&gt;|returns data type| H[get_schema]\n    H --&gt;|returns schema definition| I[set_schema]\n    I --&gt;|sets schema definition| J[pre_schema]\n    J --&gt;|sets schema definition| K[post_schema]</code></pre> <p>Note that this diagram is not exhaustive and only shows the main interactions between the methods and foreign objects.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_STATISTICS_CLAS/","title":"Class ZCL_LLM_STATISTICS","text":"<p>AI Generated documentation.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_STATISTICS_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_statistics</code> class provides a simple statistics management system, allowing for the addition of new statistics records. The class implements the <code>zif_llm_statistics</code> interface and provides a public method <code>add</code> to insert new statistics records.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_STATISTICS_CLAS/#dependencies","title":"Dependencies","text":"<p>The class depends on the following external objects:</p> <ul> <li><code>zllm_system</code> table, which stores the active status of the system.</li> </ul>"},{"location":"Llama%203.2%203b/ZCL_LLM_STATISTICS_CLAS/#details","title":"Details","text":""},{"location":"Llama%203.2%203b/ZCL_LLM_STATISTICS_CLAS/#logic-flow","title":"Logic Flow","text":"<p>The class has a simple logic flow:</p> <ol> <li>The <code>constructor</code> method is called to initialize the object.</li> <li>The <code>add</code> method is called to insert a new statistics record.</li> <li>If the system is active (<code>stat_active</code> = <code>abap_true</code>), the new record is inserted into the <code>zllm_statistics</code> table.</li> </ol> <pre><code>graph LR\n    A[Constructor] --&gt;|SELECT stat_active|&gt; B[Active Status]\n    B --&gt;|IF stat_active = abap_true|&gt; C[Add Statistics Record]\n    C --&gt;|INSERT INTO zllm_statistics|&gt; D[Statistics Table]</code></pre>"},{"location":"Llama%203.2%203b/ZCL_LLM_STATISTICS_CLAS/#interaction-with-foreign-objects","title":"Interaction with Foreign Objects","text":"<p>The class interacts with the following foreign objects:</p> <ul> <li><code>zllm_system</code> table: used to retrieve the active status of the system.</li> <li><code>zllm_statistics</code> table: used to insert new statistics records.</li> </ul> <p>Note: The <code>zif_llm_statistics</code> interface is not shown in this documentation, but it is assumed to define the <code>add</code> method that is implemented by the <code>zcl_llm_statistics</code> class.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_TEMPLATE_PARSER_CLAS/","title":"Class ZCL_LLM_TEMPLATE_PARSER","text":"<p>AI Generated documentation.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_TEMPLATE_PARSER_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_template_parser</code> class is a template parser that uses a limited Jinja2-like syntax to render templates with given contexts. The class provides methods to add templates, render templates, and process tokens in the template string. It also handles various control structures, such as if-else conditions, for loops, and nested loops.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_TEMPLATE_PARSER_CLAS/#dependencies","title":"Dependencies","text":"<p>The class depends on the following:</p> <ul> <li><code>cl_abap_typedescr</code> for type description</li> <li><code>cl_abap_structdescr</code> for structure description</li> <li><code>cl_abap_tabledescr</code> for table description</li> <li><code>cl_abap_char_utilities</code> for character utilities</li> <li><code>zcx_llm_template_parser</code> for exception handling</li> </ul>"},{"location":"Llama%203.2%203b/ZCL_LLM_TEMPLATE_PARSER_CLAS/#details","title":"Details","text":""},{"location":"Llama%203.2%203b/ZCL_LLM_TEMPLATE_PARSER_CLAS/#main-interactions","title":"Main Interactions","text":"<p>The class interacts with the following objects:</p> <ul> <li><code>template_type</code>: represents a template with a name, content, and tokens</li> <li><code>tokens_type</code>: represents a token with a type and content</li> <li><code>control_stack_type</code>: represents a control stack with a type, condition met, any condition met, tokens, loop variable, collection, loop index, and loop tokens</li> <li><code>data</code>: represents a data object with a reference to a table or structure</li> </ul>"},{"location":"Llama%203.2%203b/ZCL_LLM_TEMPLATE_PARSER_CLAS/#logic-flow","title":"Logic Flow","text":"<p>The class uses a top-down approach to parse the template string. It starts by tokenizing the string into a sequence of tokens, which are then processed in the following order:</p> <ol> <li>For loops</li> <li>If-else conditions</li> <li>Nested loops</li> <li>Control structures (endif, endfor)</li> <li>Text and variable tokens</li> </ol> <p>The class uses a control stack to keep track of the current control structure and its conditions. It also uses a data object to store the current context and its values.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_TEMPLATE_PARSER_CLAS/#interaction-with-foreign-objects","title":"Interaction with Foreign Objects","text":"<p>The class interacts with the following foreign objects:</p> <ul> <li><code>cl_abap_typedescr</code>: used to describe types and structures</li> <li><code>cl_abap_structdescr</code>: used to describe structures</li> <li><code>cl_abap_tabledescr</code>: used to describe tables</li> <li><code>cl_abap_char_utilities</code>: used for character utilities</li> <li><code>zcx_llm_template_parser</code>: used for exception handling</li> </ul>"},{"location":"Llama%203.2%203b/ZCL_LLM_TEMPLATE_PARSER_CLAS/#diagrams","title":"Diagrams","text":"<p>Here is a mermaid diagram showing the main interactions between the class and its dependencies:</p> <pre><code>graph LR\n    A[template_type] --&gt;|add_template|&gt; B[template]\n    B --&gt;|render|&gt; C[data]\n    C --&gt;|resolve_variable|&gt; D[variable_path]\n    D --&gt;|resolve_variable_ref|&gt; E[data]\n    E --&gt;|format_table|&gt; F[table]\n    F --&gt;|process_loop_content|&gt; G[loop_var]\n    G --&gt;|process_token|&gt; H[token]\n    H --&gt;|check_control_stack_conditions|&gt; I[control_stack]\n    I --&gt;|handle_nested_for_loop|&gt; J[control_stack]\n    J --&gt;|handle_conditional|&gt; K[control_stack]\n    K --&gt;|handle_endif|&gt; L[control_stack]\n    L --&gt;|handle_for_loop|&gt; M[control_stack]\n    M --&gt;|handle_endfor|&gt; N[control_stack]\n    N --&gt;|output_buffer|&gt; O[output_buffer]\n    O --&gt;|result|&gt; P[result]</code></pre> <p>Note: This diagram is a simplified representation of the main interactions between the class and its dependencies. It does not show all the details and edge cases.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_TOOL_CALCULATOR_CLAS/","title":"Class ZCL_LLM_TOOL_CALCULATOR","text":"<p>AI Generated documentation.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_TOOL_CALCULATOR_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_tool_calculator</code> class is a comprehensive calculator class that provides a wide range of mathematical operations, including addition, subtraction, multiplication, division, power, modulo, and complex expressions. The class is designed to evaluate mathematical expressions and return the result.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_TOOL_CALCULATOR_CLAS/#dependencies","title":"Dependencies","text":"<p>The class depends on the <code>zif_llm_tool</code> interface, which provides the <code>get_tool_details</code> method. It also uses various internal data structures such as <code>tokens</code>, <code>operator_stack</code>, and <code>value_stack</code> to store and process the input expressions.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_TOOL_CALCULATOR_CLAS/#details","title":"Details","text":""},{"location":"Llama%203.2%203b/ZCL_LLM_TOOL_CALCULATOR_CLAS/#class-structure","title":"Class Structure","text":"<p>The class is structured into several methods, each with a specific purpose:</p> <ul> <li><code>evaluate_expression</code>: Evaluates a mathematical expression and returns the result.</li> <li><code>tokenize</code>: Breaks down the input expression into individual tokens (operators and operands).</li> <li><code>parse_number</code>: Converts a string to a decimal number.</li> <li><code>get_operator_precedence</code>: Returns the precedence of an operator.</li> <li><code>evaluate_tokens</code>: Evaluates the tokens in the correct order using the Shunting-yard algorithm.</li> <li><code>apply_operator</code>: Applies an operator to two operands and returns the result.</li> <li><code>process_operator</code>: Processes an operator and adds it to the operator stack.</li> <li><code>pop_from_stack</code>: Removes an element from the operator stack.</li> <li><code>peek_stack</code>: Returns the top element of the operator stack without removing it.</li> </ul>"},{"location":"Llama%203.2%203b/ZCL_LLM_TOOL_CALCULATOR_CLAS/#logic-flow","title":"Logic Flow","text":"<p>The class uses a combination of Shunting-yard algorithm and recursive descent parsing to evaluate mathematical expressions. The logic flow can be visualized as follows:</p> <pre><code>+---------------+\n|  Input Expression  |\n+---------------+\n       |\n       |\n       v\n+---------------+\n|  Tokenize     |\n|  (break down  |\n|   input into   |\n|   tokens)     |\n+---------------+\n       |\n       |\n       v\n+---------------+\n|  Parse Number  |\n|  (convert   |\n|   string to   |\n|   decimal)   |\n+---------------+\n       |\n       |\n       v\n+---------------+\n|  Evaluate    |\n|  Tokens     |\n|  (Shunting-  |\n|   yard algorithm)|\n+---------------+\n       |\n       |\n       v\n+---------------+\n|  Apply Operator|\n|  (apply     |\n|   operator to  |\n|   operands)   |\n+---------------+\n       |\n       |\n       v\n+---------------+\n|  Process     |\n|  Operator    |\n|  (add to    |\n|   operator  |\n|   stack)     |\n+---------------+\n       |\n       |\n       v\n+---------------+\n|  Pop from    |\n|  Stack      |\n|  (remove    |\n|   operator)  |\n+---------------+\n       |\n       |\n       v\n+---------------+\n|  Evaluate    |\n|  Result     |\n|  (return    |\n|   result)   |\n+---------------+\n</code></pre>"},{"location":"Llama%203.2%203b/ZCL_LLM_TOOL_CALCULATOR_CLAS/#interaction-with-foreign-objects","title":"Interaction with Foreign Objects","text":"<p>The class interacts with foreign objects such as classes, function modules, and tables as follows:</p> <ul> <li><code>zif_llm_tool</code>: The class depends on the <code>zif_llm_tool</code> interface, which provides the <code>get_tool_details</code> method.</li> <li><code>cl_abap_typedescr</code>: The class uses the <code>cl_abap_typedescr</code> class to describe the <code>CALCULATION_INPUT</code> type.</li> <li><code>STANDARD TABLES</code>: The class uses standard tables such as <code>tokens</code>, <code>operator_stack</code>, and <code>value_stack</code> to store and process the input expressions.</li> </ul>"},{"location":"Llama%203.2%203b/ZCL_LLM_TOOL_ECHO_CLAS/","title":"Class ZCL_LLM_TOOL_ECHO","text":"<p>AI Generated documentation.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_TOOL_ECHO_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_tool_echo</code> class is a final class that implements the <code>zif_llm_tool</code> interface. It provides a simple implementation for echoing tool details and executing a tool. The class has a constructor that initializes the tool details, and two public methods <code>get_tool_details</code> and <code>execute</code> that return the tool details and execute the tool, respectively.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_TOOL_ECHO_CLAS/#dependencies","title":"Dependencies","text":"<p>The class depends on the <code>zif_llm_tool</code> interface, which is not shown in the provided code. It also uses the <code>data</code> type, which is a standard SAP data type.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_TOOL_ECHO_CLAS/#details","title":"Details","text":""},{"location":"Llama%203.2%203b/ZCL_LLM_TOOL_ECHO_CLAS/#class-structure","title":"Class Structure","text":"<pre><code>classDiagram\n  class zcl_llm_tool_echo as Echo\n  class zif_llm_tool as Interface\n  class data as Data\n  class zcl_llm_tool as Tool\n\n  Echo --&gt;|constructor| Tool\n  Echo --&gt;|get_tool_details| Interface\n  Echo --&gt;|execute| Interface\n  Tool --&gt;|tool_details| Interface\n  Interface --&gt;|get_tool_details| Data\n  Interface --&gt;|execute| Data</code></pre>"},{"location":"Llama%203.2%203b/ZCL_LLM_TOOL_ECHO_CLAS/#logic-flow","title":"Logic Flow","text":"<p>The class has a simple logic flow:</p> <ol> <li>The constructor initializes the tool details.</li> <li>The <code>get_tool_details</code> method returns the tool details.</li> <li>The <code>execute</code> method executes the tool and returns the result.</li> </ol>"},{"location":"Llama%203.2%203b/ZCL_LLM_TOOL_ECHO_CLAS/#interaction-with-foreign-objects","title":"Interaction with Foreign Objects","text":"<p>The class interacts with the <code>zif_llm_tool</code> interface, which is not shown in the provided code. The <code>zif_llm_tool</code> interface is likely defined in a separate class or function module.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_TOOL_ECHO_CLAS/#important-aspects","title":"Important Aspects","text":"<ul> <li>The class uses a <code>data</code> object to store the result of the tool execution.</li> <li>The class uses a <code>tool_call_id</code> to identify the tool call.</li> <li>The class has a <code>name</code> field to store the name of the tool.</li> </ul>"},{"location":"Llama%203.2%203b/ZCL_LLM_TOOL_PARSER_CLAS/","title":"Class ZCL_LLM_TOOL_PARSER","text":"<p>AI Generated documentation.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_TOOL_PARSER_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_tool_parser</code> class is a custom implementation of the <code>zif_llm_tool_parser</code> interface, which is used to parse JSON schema data. The class provides a set of methods to process and generate JSON schema data, including parsing, validation, and generation of schema strings.</p>"},{"location":"Llama%203.2%203b/ZCL_LLM_TOOL_PARSER_CLAS/#dependencies","title":"Dependencies","text":"<p>The class depends on the following external objects:</p> <ul> <li><code>zif_llm_tool_parser</code>: The interface that the class implements.</li> <li><code>cl_abap_typedescr</code>: The class used to get the type descriptor of an object.</li> <li><code>cl_abap_structdescr</code>: The class used to get the structure descriptor of an object.</li> <li><code>cl_abap_tabledescr</code>: The class used to get the table descriptor of an object.</li> <li><code>cl_abap_elemdescr</code>: The class used to get the element descriptor of an object.</li> <li><code>zcx_llm_validation</code>: The exception class used to handle validation errors.</li> </ul>"},{"location":"Llama%203.2%203b/ZCL_LLM_TOOL_PARSER_CLAS/#details","title":"Details","text":""},{"location":"Llama%203.2%203b/ZCL_LLM_TOOL_PARSER_CLAS/#main-interactions","title":"Main Interactions","text":"<p>The class has the following main interactions:</p> <ul> <li><code>parse</code>: The main method that takes the JSON schema data as input and returns the generated schema string.</li> <li><code>process_type</code>: The method that processes the type of an object, including handling structs, tables, and elements.</li> <li><code>process_structure</code>: The method that processes the structure of an object, including handling nested structures and tables.</li> <li><code>process_table</code>: The method that processes the table of an object, including handling nested tables and elements.</li> <li><code>process_element</code>: The method that processes the element of an object, including handling nested elements and attributes.</li> </ul>"},{"location":"Llama%203.2%203b/ZCL_LLM_TOOL_PARSER_CLAS/#logic-flow","title":"Logic Flow","text":"<p>The logic flow of the class can be visualized as follows:</p> <pre><code>+---------------+\n|  parse       |\n+---------------+\n       |\n       |\n       v\n+---------------+\n|  process_type  |\n+---------------+\n       |\n       |\n       v\n+---------------+\n|  process_structure  |\n+---------------+\n       |\n       |\n       v\n+---------------+\n|  process_table  |\n+---------------+\n       |\n       |\n       v\n+---------------+\n|  process_element  |\n+---------------+\n</code></pre>"},{"location":"Llama%203.2%203b/ZCL_LLM_TOOL_PARSER_CLAS/#interaction-with-foreign-objects","title":"Interaction with Foreign Objects","text":"<p>The class interacts with the following foreign objects:</p> <ul> <li><code>zif_llm_tool_parser</code>: The interface that the class implements.</li> <li><code>cl_abap_typedescr</code>, <code>cl_abap_structdescr</code>, <code>cl_abap_tabledescr</code>, <code>cl_abap_elemdescr</code>: The classes used to get the type descriptor, structure descriptor, table descriptor, and element descriptor of an object.</li> <li><code>zcx_llm_validation</code>: The exception class used to handle validation errors.</li> </ul>"},{"location":"Llama%203.2%203b/ZCL_LLM_TOOL_PARSER_CLAS/#expert-notes","title":"Expert Notes","text":"<ul> <li>The class uses a recursive approach to process nested structures and tables.</li> <li>The <code>process_type</code> method handles the type of an object, including structs, tables, and elements.</li> <li>The <code>process_structure</code> method handles the structure of an object, including nested structures and tables.</li> <li>The <code>process_table</code> method handles the table of an object, including nested tables and elements.</li> <li>The <code>process_element</code> method handles the element of an object, including nested elements and attributes.</li> </ul>"},{"location":"Llama%203.2%203b/ZCX_LLM_AUTHORIZATION_CLAS/","title":"Class ZCX_LLM_AUTHORIZATION","text":"<p>AI Generated documentation.</p>"},{"location":"Llama%203.2%203b/ZCX_LLM_AUTHORIZATION_CLAS/#overview","title":"Overview","text":"<p>The <code>ZCX_LLM_AUTHORIZATION</code> class is a custom exception class that inherits from <code>CX_STATIC_CHECK</code>. It provides a set of constants and methods for handling authorization-related messages. The class is designed to be used in SAP ABAP applications.</p>"},{"location":"Llama%203.2%203b/ZCX_LLM_AUTHORIZATION_CLAS/#dependencies","title":"Dependencies","text":"<p>The class depends on the following:</p> <ul> <li><code>IF_T100_DYN_MSG</code></li> <li><code>IF_T100_MESSAGE</code></li> <li><code>CX_STATIC_CHECK</code></li> </ul>"},{"location":"Llama%203.2%203b/ZCX_LLM_AUTHORIZATION_CLAS/#details","title":"Details","text":""},{"location":"Llama%203.2%203b/ZCX_LLM_AUTHORIZATION_CLAS/#class-structure","title":"Class Structure","text":"<pre><code>class ZCX_LLM_AUTHORIZATION {\n  +-- CX_STATIC_CHECK\n  |\n  +-- IF_T100_DYN_MSG\n  +-- IF_T100_MESSAGE\n  |\n  +-- MSGV1\n  +-- MSGV2\n}</code></pre>"},{"location":"Llama%203.2%203b/ZCX_LLM_AUTHORIZATION_CLAS/#methods","title":"Methods","text":"<p>The class has one public method:</p> <ul> <li><code>CONSTRUCTOR</code>: This method is used to create an instance of the class. It takes two optional parameters: <code>TEXTID</code> and <code>PREVIOUS</code>. The method sets the <code>textid</code> attribute based on the provided <code>TEXTID</code> parameter or uses the default <code>IF_T100_MESSAGE</code> text ID if not provided.</li> </ul>"},{"location":"Llama%203.2%203b/ZCX_LLM_AUTHORIZATION_CLAS/#constants","title":"Constants","text":"<p>The class defines three constants:</p> <ul> <li><code>PROVIDER_MAINTENANCE</code>: This constant is used to handle maintenance-related messages.</li> <li><code>GET_CLIENT</code>: This constant is used to retrieve the client ID.</li> <li><code>DECRYPT</code> and <code>ENCRYPT</code>: These constants are used to handle encryption and decryption messages.</li> </ul>"},{"location":"Llama%203.2%203b/ZCX_LLM_AUTHORIZATION_CLAS/#logic-flow","title":"Logic Flow","text":"<p>The class uses the <code>IF_T100_MESSAGE</code> interface to handle messages. The <code>CONSTRUCTOR</code> method sets the <code>textid</code> attribute based on the provided <code>TEXTID</code> parameter or uses the default text ID if not provided. The class also uses the <code>MSGV1</code> and <code>MSGV2</code> data objects to store message values.</p> <pre><code>sequenceDiagram\n    participant A as ZCX_LLM_AUTHORIZATION\n    participant B as IF_T100_MESSAGE\n    participant C as CX_STATIC_CHECK\n\n    A-&gt;&gt;B: Get text ID from parameter\n    B-&gt;&gt;A: Return default text ID if not provided\n    A-&gt;&gt;C: Set text ID\n    C-&gt;&gt;A: Call constructor\n    A-&gt;&gt;B: Get message values\n    B-&gt;&gt;A: Return message values</code></pre>"},{"location":"Llama%203.2%203b/ZCX_LLM_HTTP_ERROR_CLAS/","title":"Class ZCX_LLM_HTTP_ERROR","text":"<p>AI Generated documentation.</p>"},{"location":"Llama%203.2%203b/ZCX_LLM_HTTP_ERROR_CLAS/#overview","title":"Overview","text":"<p>The <code>ZCX_LLM_HTTP_ERROR</code> class is a custom exception class designed to handle HTTP-related errors in an SAP ABAP application. It inherits from the <code>CX_STATIC_CHECK</code> class and provides a set of constants and data members to represent different types of HTTP errors. The class has a single constructor method that initializes the exception object with optional attributes and a previous exception object.</p>"},{"location":"Llama%203.2%203b/ZCX_LLM_HTTP_ERROR_CLAS/#dependencies","title":"Dependencies","text":"<p>The <code>ZCX_LLM_HTTP_ERROR</code> class depends on the following:</p> <ul> <li><code>IF_T100_MESSAGE</code> interface, which provides the <code>T100KEY</code> attribute for the exception message.</li> <li><code>CX_STATIC_CHECK</code> class, which is inherited by <code>ZCX_LLM_HTTP_ERROR</code>.</li> </ul>"},{"location":"Llama%203.2%203b/ZCX_LLM_HTTP_ERROR_CLAS/#details","title":"Details","text":""},{"location":"Llama%203.2%203b/ZCX_LLM_HTTP_ERROR_CLAS/#class-structure","title":"Class Structure","text":"<pre><code>class ZCX_LLM_HTTP_ERROR {\n  +-- CX_STATIC_CHECK\n  +-- IF_T100_MESSAGE\n  +-- MV_ATTR1\n  +-- MV_ATTR2\n  +-- MV_ATTR3\n  +-- MV_ATTR4\n}</code></pre>"},{"location":"Llama%203.2%203b/ZCX_LLM_HTTP_ERROR_CLAS/#constructor-method","title":"Constructor Method","text":"<p>The <code>CONSTRUCTOR</code> method initializes the exception object with the following attributes:</p> <ul> <li><code>MV_ATTR1</code>, <code>MV_ATTR2</code>, <code>MV_ATTR3</code>, and <code>MV_ATTR4</code> data members, which are set to the corresponding optional attributes passed to the constructor.</li> <li><code>IF_T100_MESSAGE~T100KEY</code> attribute, which is set to either the <code>TEXTID</code> attribute passed to the constructor or the default <code>T100KEY</code> value if <code>TEXTID</code> is not provided.</li> </ul> <pre><code>sequenceDiagram\n    participant A as ZCX_LLM_HTTP_ERROR\n    participant B as IF_T100_MESSAGE\n    participant C as CX_STATIC_CHECK\n\n    A-&gt;&gt;B: T100KEY = TEXTID\n    B-&gt;&gt;C: T100KEY = default_textid\n    C-&gt;&gt;A: MV_ATTR1 = attr1\n    C-&gt;&gt;A: MV_ATTR2 = attr2\n    C-&gt;&gt;A: MV_ATTR3 = attr3\n    C-&gt;&gt;A: MV_ATTR4 = attr4</code></pre>"},{"location":"Llama%203.2%203b/ZCX_LLM_HTTP_ERROR_CLAS/#constants","title":"Constants","text":"<p>The class defines four constants for different types of HTTP errors:</p> <ul> <li><code>HTTP_CLIENT_NOT_INITIALIZED</code></li> <li><code>HTTP_COMMUNICATION_FAILURE</code></li> <li><code>HTTP_PROCESSING_FAILED</code></li> <li><code>HTTP_OTHERS</code></li> </ul> <p>Each constant has a unique <code>msgid</code>, <code>msgno</code>, and four <code>attr</code> attributes, which are used to represent the error details.</p> <pre><code>sequenceDiagram\n    participant A as ZCX_LLM_HTTP_ERROR\n\n    A-&gt;&gt;HTTP_CLIENT_NOT_INITIALIZED: msgid = ZLLM_CLIENT, msgno = 006, attr1 = MV_ATTR1, attr2 = MV_ATTR2, attr3 = MV_ATTR3, attr4 = MV_ATTR4\n    A-&gt;&gt;HTTP_COMMUNICATION_FAILURE: msgid = ZLLM_CLIENT, msgno = 007, attr1 = MV_ATTR1, attr2 = MV_ATTR2, attr3 = MV_ATTR3, attr4 = MV_ATTR4\n    A-&gt;&gt;HTTP_PROCESSING_FAILED: msgid = ZLLM_CLIENT, msgno = 008, attr1 = MV_ATTR1, attr2 = MV_ATTR2, attr3 = MV_ATTR3, attr4 = MV_ATTR4\n    A-&gt;&gt;HTTP_OTHERS: msgid = ZLLM_CLIENT, msgno = 009, attr1 = MV_ATTR1, attr2 = MV_ATTR2, attr3 = MV_ATTR3, attr4 = MV_ATTR4</code></pre>"},{"location":"Llama%203.2%203b/ZCX_LLM_TEMPLATE_PARSER_CLAS/","title":"Class ZCX_LLM_TEMPLATE_PARSER","text":"<p>AI Generated documentation.</p>"},{"location":"Llama%203.2%203b/ZCX_LLM_TEMPLATE_PARSER_CLAS/#overview","title":"Overview","text":"<p>The <code>ZCX_LLM_TEMPLATE_PARSER</code> class is a custom exception class designed to handle errors related to template parsing in a large language model (LLM) system. It inherits from <code>CX_STATIC_CHECK</code> and provides a set of constants and methods to handle various error scenarios.</p>"},{"location":"Llama%203.2%203b/ZCX_LLM_TEMPLATE_PARSER_CLAS/#dependencies","title":"Dependencies","text":"<p>The class depends on the following external objects:</p> <ul> <li><code>IF_T100_MESSAGE</code>: an interface for message handling</li> <li><code>IF_T100_DYN_MSG</code>: an interface for dynamic message handling</li> <li><code>SYMSGV</code>: a global variable for message values</li> </ul>"},{"location":"Llama%203.2%203b/ZCX_LLM_TEMPLATE_PARSER_CLAS/#details","title":"Details","text":""},{"location":"Llama%203.2%203b/ZCX_LLM_TEMPLATE_PARSER_CLAS/#class-structure-and-methods","title":"Class Structure and Methods","text":"<p>The class has the following public methods:</p> <ul> <li><code>CONSTRUCTOR</code>: initializes the exception object with optional parameters for text ID, previous message, and message values</li> <li><code>##ADT_SUPPRESS_GENERATION</code>: suppresses generation of the class</li> </ul> <p>The class has the following constants:</p> <ul> <li><code>zcx_llm_template_parser</code>: a constant for the main error message</li> <li><code>unclosed_token</code>, <code>unclosed_control_structure</code>, <code>invalid_variable_path</code>, <code>invalid_table_index</code>, <code>unsupported_variable_type</code>, <code>variable_resolution_error</code>, <code>condition_evaluation_error</code>, <code>unknown_filter</code>, <code>invalid_condition</code>, <code>invalid_operator</code>, <code>invalid_loop_syntax</code>, <code>invalid_loop_collection</code>, <code>unclosed_loop</code>, <code>INVALID_ESCAPE_SEQUENCE</code>, <code>MISMATCHED_TOKEN</code>, <code>LOOP_INITIALIZATION_ERROR</code>, <code>UNEXPECTED_ENDFOR</code>, <code>UNEXPECTED_ELSE</code>, <code>UNEXPECTED_ENDIF</code>, and <code>UNEXPECTED_ELIF</code>: constants for specific error messages</li> </ul>"},{"location":"Llama%203.2%203b/ZCX_LLM_TEMPLATE_PARSER_CLAS/#interaction-with-foreign-objects","title":"Interaction with Foreign Objects","text":"<p>The class interacts with the following foreign objects:</p> <ul> <li><code>IF_T100_MESSAGE</code>: the class uses the <code>IF_T100_MESSAGE</code> interface to handle messages</li> <li><code>SYMSGV</code>: the class uses the <code>SYMSGV</code> global variable to store message values</li> </ul>"},{"location":"Llama%203.2%203b/ZCX_LLM_TEMPLATE_PARSER_CLAS/#logic-flow","title":"Logic Flow","text":"<p>The class follows a simple logic flow:</p> <ol> <li>The <code>CONSTRUCTOR</code> method initializes the exception object with optional parameters.</li> <li>The <code>##ADT_SUPPRESS_GENERATION</code> method suppresses generation of the class.</li> <li>The class uses the <code>IF_T100_MESSAGE</code> interface to handle messages and the <code>SYMSGV</code> global variable to store message values.</li> </ol> <pre><code>graph LR\n    A[CONSTRUCTOR] --&gt;|init|&gt; B[IF_T100_MESSAGE]\n    B --&gt;|handle message|&gt; C[variable resolution]\n    C --&gt;|check variable type|&gt; D[unsupported_variable_type]\n    D --&gt;|check variable path|&gt; E[invalid_variable_path]\n    E --&gt;|check table index|&gt; F[invalid_table_index]\n    F --&gt;|check loop syntax|&gt; G[invalid_loop_syntax]\n    G --&gt;|check loop initialization|&gt; H[LOOP_INITIALIZATION_ERROR]\n    H --&gt;|check endfor|&gt; I[UNEXPECTED_ENDFOR]\n    I --&gt;|check else|&gt; J[UNEXPECTED_ELSE]\n    J --&gt;|check endif|&gt; K[UNEXPECTED_ENDIF]\n    K --&gt;|check elif|&gt; L[UNEXPECTED_ELIF]\n    L --&gt;|check mismatched token|&gt; M[MISMATCHED_TOKEN]\n    M --&gt;|check invalid escape sequence|&gt; N[INVALID_ESCAPE_SEQUENCE]\n    N --&gt;|check unclosed loop|&gt; O[unclosed_loop]\n    O --&gt;|check unclosed control structure|&gt; P[unclosed_control_structure]\n    P --&gt;|check unclosed token|&gt; Q[unclosed_token]</code></pre>"},{"location":"Llama%203.2%203b/ZCX_LLM_VALIDATION_CLAS/","title":"Class ZCX_LLM_VALIDATION","text":"<p>AI Generated documentation.</p>"},{"location":"Llama%203.2%203b/ZCX_LLM_VALIDATION_CLAS/#overview","title":"Overview","text":"<p>The <code>ZCX_LLM_VALIDATION</code> class is a custom exception class that inherits from <code>CX_DYNAMIC_CHECK</code>. It is designed to handle various validation errors that may occur during the execution of the application. The class has several constants that define different error messages and attributes, and it has four data members (<code>MV_ATTR1</code>, <code>MV_ATTR2</code>, <code>MV_ATTR3</code>, and <code>MV_ATTR4</code>) that store the values of the attributes.</p> <p>The class has a single public method, <code>CONSTRUCTOR</code>, which is used to initialize the exception object. The constructor takes several optional parameters, including <code>TEXTID</code>, <code>ATTR1</code>, <code>ATTR2</code>, <code>ATTR3</code>, and <code>ATTR4</code>, which are used to set the values of the attributes.</p>"},{"location":"Llama%203.2%203b/ZCX_LLM_VALIDATION_CLAS/#dependencies","title":"Dependencies","text":"<p>There are no explicit dependencies listed for this class.</p>"},{"location":"Llama%203.2%203b/ZCX_LLM_VALIDATION_CLAS/#details","title":"Details","text":""},{"location":"Llama%203.2%203b/ZCX_LLM_VALIDATION_CLAS/#class-diagram","title":"Class Diagram","text":"<pre><code>class ZCX_LLM_VALIDATION {\n  +-- CX_DYNAMIC_CHECK\n  +-- IF_T100_MESSAGE\n}\n\nclass ZCX_LLM_VALIDATION {\n  +-- constructor\n  +-- if_t100_message\n}\n\nclass ZCX_LLM_VALIDATION {\n  +-- MV_ATTR1\n  +-- MV_ATTR2\n  +-- MV_ATTR3\n  +-- MV_ATTR4\n}</code></pre>"},{"location":"Llama%203.2%203b/ZCX_LLM_VALIDATION_CLAS/#logic-flow","title":"Logic Flow","text":"<p>The <code>CONSTRUCTOR</code> method is called when an instance of the <code>ZCX_LLM_VALIDATION</code> class is created. The method takes several optional parameters, which are used to set the values of the attributes (<code>MV_ATTR1</code>, <code>MV_ATTR2</code>, <code>MV_ATTR3</code>, and <code>MV_ATTR4</code>). If the <code>TEXTID</code> parameter is not provided, the method sets the <code>if_t100_message</code> attribute to the default value.</p>"},{"location":"Llama%203.2%203b/ZCX_LLM_VALIDATION_CLAS/#interaction-with-foreign-objects","title":"Interaction with Foreign Objects","text":"<p>The <code>ZCX_LLM_VALIDATION</code> class interacts with the following foreign objects:</p> <ul> <li><code>CX_DYNAMIC_CHECK</code>: The <code>ZCX_LLM_VALIDATION</code> class inherits from <code>CX_DYNAMIC_CHECK</code>, which is a built-in SAP exception class.</li> <li><code>IF_T100_MESSAGE</code>: The <code>ZCX_LLM_VALIDATION</code> class implements the <code>IF_T100_MESSAGE</code> interface, which is used to define the error messages and attributes.</li> <li><code>MV_ATTR1</code>, <code>MV_ATTR2</code>, <code>MV_ATTR3</code>, and <code>MV_ATTR4</code>: These data members are used to store the values of the attributes, which are used to define the error messages and attributes.</li> </ul>"},{"location":"Llama%203.2%203b/ZCX_LLM_VALIDATION_CLAS/#expert-notes","title":"Expert Notes","text":"<p>The <code>ZCX_LLM_VALIDATION</code> class is designed to handle various validation errors that may occur during the execution of the application. The class has several constants that define different error messages and attributes, and it has four data members that store the values of the attributes. The class interacts with the <code>CX_DYNAMIC_CHECK</code> and <code>IF_T100_MESSAGE</code> classes, and it uses the <code>MV_ATTR1</code>, <code>MV_ATTR2</code>, <code>MV_ATTR3</code>, and <code>MV_ATTR4</code> data members to store the values of the attributes.</p>"},{"location":"Llama%203.2%203b/ZIF_LLM_AUTH_INTF/","title":"Interface ZIF_LLM_AUTH","text":"<p>AI Generated documentation.</p>"},{"location":"Llama%203.2%203b/ZIF_LLM_AUTH_INTF/#overview","title":"Overview","text":"<p>The <code>zif_llm_auth</code> interface provides a set of public methods for authorization checks in the context of LLM (Large Language Model) maintenance. These methods are designed to raise an exception (<code>zcx_llm_authorization</code>) if the current user does not have the necessary permissions to perform the requested action.</p>"},{"location":"Llama%203.2%203b/ZIF_LLM_AUTH_INTF/#dependencies","title":"Dependencies","text":"<p>None</p>"},{"location":"Llama%203.2%203b/ZIF_LLM_CALL_LOGGER_INTF/","title":"Interface ZIF_LLM_CALL_LOGGER","text":"<p>AI Generated documentation.</p>"},{"location":"Llama%203.2%203b/ZIF_LLM_CALL_LOGGER_INTF/#overview","title":"Overview","text":"<p>The <code>zif_llm_call_logger</code> interface provides a simple logging mechanism for recording calls with a specific entry description.</p>"},{"location":"Llama%203.2%203b/ZIF_LLM_CALL_LOGGER_INTF/#dependencies","title":"Dependencies","text":"<p>None</p>"},{"location":"Llama%203.2%203b/ZIF_LLM_CHAT_REQUEST_INTF/","title":"Interface ZIF_LLM_CHAT_REQUEST","text":"<p>AI Generated documentation.</p>"},{"location":"Llama%203.2%203b/ZIF_LLM_CHAT_REQUEST_INTF/#overview","title":"Overview","text":"<p>The <code>zif_llm_chat_request</code> interface provides a set of methods for managing chat requests, including adding and retrieving messages, tools, and structured output details.</p>"},{"location":"Llama%203.2%203b/ZIF_LLM_CHAT_REQUEST_INTF/#dependencies","title":"Dependencies","text":"<p>None</p>"},{"location":"Llama%203.2%203b/ZIF_LLM_CLIENT_INTF/","title":"Interface ZIF_LLM_CLIENT","text":"<p>AI Generated documentation.</p>"},{"location":"Llama%203.2%203b/ZIF_LLM_CLIENT_INTF/#overview","title":"Overview","text":"<p>The <code>zif_llm_client</code> interface provides a standardized interface for interacting with the LLM (Large Language Model) client. It allows for the creation of new clients based on the provided configuration and enables the execution of chat requests.</p>"},{"location":"Llama%203.2%203b/ZIF_LLM_CLIENT_INTF/#dependencies","title":"Dependencies","text":"<p>The <code>zif_llm_client</code> interface depends on the following:</p> <ul> <li><code>zllm_clnt_config</code>: The configuration for the client.</li> <li><code>zllm_providers</code>: The configuration for the providers.</li> <li><code>zif_llm_chat_request</code>: The interface for chat requests.</li> <li><code>zllm_response</code>: The response type for chat requests.</li> <li><code>zcx_llm_validation</code>: The exception class for validation errors.</li> <li><code>zcx_llm_authorization</code>: The exception class for authorization errors.</li> </ul> <p>Note: The dependencies are not explicitly listed in the provided code, but they are assumed to be part of the SAP ABAP framework.</p>"},{"location":"Llama%203.2%203b/ZIF_LLM_CLIENT_JSON_SCHEMA_INTF/","title":"Interface ZIF_LLM_CLIENT_JSON_SCHEMA","text":"<p>AI Generated documentation.</p>"},{"location":"Llama%203.2%203b/ZIF_LLM_CLIENT_JSON_SCHEMA_INTF/#overview","title":"Overview","text":"<p>The <code>zif_llm_client_json_schema</code> interface provides a structured output for creating and manipulating JSON schemas. It offers methods for adding properties, arrays, and objects to the schema, as well as generating the final schema.</p>"},{"location":"Llama%203.2%203b/ZIF_LLM_CLIENT_JSON_SCHEMA_INTF/#dependencies","title":"Dependencies","text":"<p>None</p>"},{"location":"Llama%203.2%203b/ZIF_LLM_DEFAULT_IMPL_INTF/","title":"Interface ZIF_LLM_DEFAULT_IMPL","text":"<p>AI Generated documentation.</p>"},{"location":"Llama%203.2%203b/ZIF_LLM_DEFAULT_IMPL_INTF/#overview","title":"Overview","text":"<p>The <code>zif_llm_default_impl</code> interface provides a set of default implementations for various LLM (Large Language Model) functionalities. It defines five public methods:</p> <ul> <li><code>get_json_impl</code>: Returns the name of the JSON class.</li> <li><code>get_encryption_impl</code>: Returns an instance of the encryption provider.</li> <li><code>get_call_logger_impl</code>: Returns an instance of the call logger implementation.</li> <li><code>get_statistics_impl</code>: Returns an instance of the statistics implementation.</li> <li><code>get_authorization_impl</code>: Returns an instance of the authorization implementation.</li> </ul> <p>These methods are designed to be used as default implementations, allowing for flexibility and customization in the application.</p>"},{"location":"Llama%203.2%203b/ZIF_LLM_DEFAULT_IMPL_INTF/#dependencies","title":"Dependencies","text":"<p>None</p>"},{"location":"Llama%203.2%203b/ZIF_LLM_ENCRYPTION_INTF/","title":"Interface ZIF_LLM_ENCRYPTION","text":"<p>AI Generated documentation.</p>"},{"location":"Llama%203.2%203b/ZIF_LLM_ENCRYPTION_INTF/#overview","title":"Overview","text":"<p>The <code>zif_llm_encryption</code> interface provides two public methods for encryption and decryption of secrets. The <code>decrypt</code> method takes an encrypted string as input and returns the decrypted string, while the <code>encrypt</code> method takes an unencrypted string as input and returns the encrypted string.</p>"},{"location":"Llama%203.2%203b/ZIF_LLM_ENCRYPTION_INTF/#dependencies","title":"Dependencies","text":"<p>None</p>"},{"location":"Llama%203.2%203b/ZIF_LLM_FACTORY_INTF/","title":"Interface ZIF_LLM_FACTORY","text":"<p>AI Generated documentation.</p>"},{"location":"Llama%203.2%203b/ZIF_LLM_FACTORY_INTF/#overview","title":"Overview","text":"<p>The <code>zif_llm_factory</code> interface provides a public method <code>get_client</code> for retrieving a model client. This method takes two parameters: <code>model</code> of type <code>zllm_model</code> and <code>response</code> of type <code>REF TO zif_llm_client</code>. It raises two exceptions: <code>zcx_llm_validation</code> and <code>zcx_llm_authorization</code>.</p>"},{"location":"Llama%203.2%203b/ZIF_LLM_FACTORY_INTF/#dependencies","title":"Dependencies","text":"<p>None</p>"},{"location":"Llama%203.2%203b/ZIF_LLM_HTTP_CLIENT_WRAPPER_INTF/","title":"Interface ZIF_LLM_HTTP_CLIENT_WRAPPER","text":"<p>AI Generated documentation.</p>"},{"location":"Llama%203.2%203b/ZIF_LLM_HTTP_CLIENT_WRAPPER_INTF/#overview","title":"Overview","text":"<p>The <code>zif_llm_http_client_wrapper</code> interface provides a standardized interface for making HTTP requests to external services. It allows for setting headers, URLs, and handling responses.</p>"},{"location":"Llama%203.2%203b/ZIF_LLM_HTTP_CLIENT_WRAPPER_INTF/#dependencies","title":"Dependencies","text":"<ul> <li><code>if_http_response</code> interface for handling HTTP responses</li> <li><code>zllm_clnt_config</code> and <code>zllm_providers</code> types for client and provider configuration</li> <li><code>zllm_session_id</code> type for session ID</li> </ul>"},{"location":"Llama%203.2%203b/ZIF_LLM_OPTIONS_INTF/","title":"Interface ZIF_LLM_OPTIONS","text":"<p>AI Generated documentation.</p>"},{"location":"Llama%203.2%203b/ZIF_LLM_OPTIONS_INTF/#overview","title":"Overview","text":"<p>The <code>zif_llm_options</code> interface provides a set of public methods for configuring options for a Large Language Model (LLM) call. These methods allow users to customize various parameters such as temperature, maximum tokens, top-p, top-k, seed, frequency penalty, presence penalty, minimum probability, top-a, and custom parameters.</p>"},{"location":"Llama%203.2%203b/ZIF_LLM_OPTIONS_INTF/#dependencies","title":"Dependencies","text":"<p>None</p>"},{"location":"Llama%203.2%203b/ZIF_LLM_SO_INTF/","title":"Interface ZIF_LLM_SO","text":"<p>AI Generated documentation.</p>"},{"location":"Llama%203.2%203b/ZIF_LLM_SO_INTF/#overview","title":"Overview","text":"<p>The <code>zif_llm_so</code> interface provides a structured output support for SAP ABAP. It offers methods to set the schema for the structured output and retrieve the converted schema.</p>"},{"location":"Llama%203.2%203b/ZIF_LLM_SO_INTF/#dependencies","title":"Dependencies","text":"<ul> <li><code>CL_ABAP_DATADESCR</code> class for data type definition</li> </ul>"},{"location":"Llama%203.2%203b/ZIF_LLM_SO_INTF/#interface-documentation","title":"Interface Documentation","text":""},{"location":"Llama%203.2%203b/ZIF_LLM_SO_INTF/#methods","title":"Methods","text":""},{"location":"Llama%203.2%203b/ZIF_LLM_SO_INTF/#set_schema","title":"set_schema","text":"<ul> <li>Description: Sets the schema for the structured output.</li> <li>Parameters:</li> <li><code>data_desc</code>: A reference to the <code>CL_ABAP_DATADESCR</code> class based on the datatype to be used.</li> <li><code>description</code>: Field descriptions for more details (optional).</li> <li>Raises: <code>ZCX_LL_M_VALIDATION</code> exception.</li> </ul>"},{"location":"Llama%203.2%203b/ZIF_LLM_SO_INTF/#get_schema","title":"get_schema","text":"<ul> <li>Description: Retrieves the converted schema.</li> <li>Returns: The converted schema as a string.</li> </ul>"},{"location":"Llama%203.2%203b/ZIF_LLM_SO_INTF/#get_datatype","title":"get_datatype","text":"<ul> <li>Description: Mostly used internally to get the data type definition.</li> <li>Returns: A reference to the <code>CL_ABAP_DATADESCR</code> class representing the data type definition.</li> </ul>"},{"location":"Llama%203.2%203b/ZIF_LLM_SO_INTF/#types","title":"Types","text":""},{"location":"Llama%203.2%203b/ZIF_LLM_SO_INTF/#def_description","title":"def_description","text":"<ul> <li>Description: Represents a field description with field name, description, and enum values.</li> </ul>"},{"location":"Llama%203.2%203b/ZIF_LLM_SO_INTF/#def_descriptions","title":"def_descriptions","text":"<ul> <li>Description: A table of <code>def_description</code> types with a key on the field name.</li> </ul>"},{"location":"Llama%203.2%203b/ZIF_LLM_STATISTICS_INTF/","title":"Interface ZIF_LLM_STATISTICS","text":"<p>AI Generated documentation.</p>"},{"location":"Llama%203.2%203b/ZIF_LLM_STATISTICS_INTF/#overview","title":"Overview","text":"<p>The <code>zif_llm_statistics</code> interface provides a single public method, <code>add</code>, which allows users to add a statistic record to the system.</p>"},{"location":"Llama%203.2%203b/ZIF_LLM_STATISTICS_INTF/#dependencies","title":"Dependencies","text":"<p>None</p>"},{"location":"Llama%203.2%203b/ZIF_LLM_TOOL_INTF/","title":"Interface ZIF_LLM_TOOL","text":"<p>AI Generated documentation.</p>"},{"location":"Llama%203.2%203b/ZIF_LLM_TOOL_INTF/#overview","title":"Overview","text":"<p>The <code>zif_llm_tool</code> interface provides a set of methods for interacting with a tool that can be used to parse and execute LLM (Large Language Model) model calls. The interface is designed to be used in a SAP ABAP environment and provides a standardized way of calling tools and retrieving their results.</p>"},{"location":"Llama%203.2%203b/ZIF_LLM_TOOL_INTF/#dependencies","title":"Dependencies","text":"<p>The <code>zif_llm_tool</code> interface depends on the following external dependencies:</p> <ul> <li><code>cl_abap_datadescr</code>: a class used to describe data types</li> <li><code>zif_llm_tool_parser</code>: an interface that provides a way to parse tool descriptions</li> </ul> <p>Note: The exact dependencies may vary depending on the specific implementation of the tool and the LLM model being used.</p>"},{"location":"Llama%203.2%203b/ZIF_LLM_TOOL_PARSER_INTF/","title":"Interface ZIF_LLM_TOOL_PARSER","text":"<p>AI Generated documentation.</p>"},{"location":"Llama%203.2%203b/ZIF_LLM_TOOL_PARSER_INTF/#overview","title":"Overview","text":"<p>The <code>zif_llm_tool_parser</code> interface provides a standardized way to parse tool definitions. It offers a single method, <code>parse</code>, which takes in a data descriptor, descriptions, and returns a result string. The method is used to validate and process tool definitions.</p>"},{"location":"Llama%203.2%203b/ZIF_LLM_TOOL_PARSER_INTF/#dependencies","title":"Dependencies","text":"<p>The <code>zif_llm_tool_parser</code> interface depends on the following:</p> <ul> <li><code>CL_ABAP_DATADESC</code> for data descriptor handling</li> <li><code>ZCX_LL_M_VALIDATION</code> for validation exceptions</li> </ul>"},{"location":"Llama%203.2%203b/ZLLM_PROVIDER_MAINTENANCE_PROG/","title":"Report ZLLM_PROVIDER_MAINTENANCE","text":"<p>AI Generated documentation.</p>"},{"location":"Llama%203.2%203b/ZLLM_PROVIDER_MAINTENANCE_PROG/#overview","title":"Overview","text":"<p>The report <code>ZLLM_PROVIDER_MAINTENANCE</code> is a SAP ABAP program that provides a user interface for managing provider configurations. The program consists of two main classes: <code>LCL_APP</code> and <code>LCL_SCREEN</code>. The <code>LCL_APP</code> class handles the business logic for loading, saving, and updating provider configurations, while the <code>LCL_SCREEN</code> class handles the user interface and event handling.</p> <p>The program uses a database table <code>ZLLM_PROVIDERS</code> to store provider configurations and a function module <code>ZLLM_COMMON</code> to interact with the database. The program also uses encryption and decryption functions to secure the provider configurations.</p>"},{"location":"Llama%203.2%203b/ZLLM_PROVIDER_MAINTENANCE_PROG/#dependencies","title":"Dependencies","text":"<ul> <li>SAP ABAP 7.4 or later</li> <li>SAP GUI 7.4 or later</li> <li>Database table <code>ZLLM_PROVIDERS</code></li> <li>Function module <code>ZLLM_COMMON</code></li> </ul>"},{"location":"Llama%203.2%203b/ZLLM_PROVIDER_MAINTENANCE_PROG/#details","title":"Details","text":""},{"location":"Llama%203.2%203b/ZLLM_PROVIDER_MAINTENANCE_PROG/#class-lcl_app","title":"Class LCL_APP","text":"<p>The <code>LCL_APP</code> class has the following methods:</p> <ul> <li><code>LOAD_PROVIDERS</code>: Loads provider configurations from the database table <code>ZLLM_PROVIDERS</code>.</li> <li><code>SAVE_PROVIDER</code>: Saves a provider configuration to the database table <code>ZLLM_PROVIDERS</code>.</li> <li><code>ENCRYPT_AUTH_VALUE</code>: Encrypts a provider configuration value using the <code>ZLLM_COMMON</code> function module.</li> <li><code>DECRYPT_AUTH_VALUE</code>: Decrypts a provider configuration value using the <code>ZLLM_COMMON</code> function module.</li> <li><code>BUILD_FIELD_CATALOG</code>: Builds the ALV field catalog for the provider configurations.</li> <li><code>REFRESH_DISPLAY</code>: Refreshes the displayed ALV data.</li> </ul> <p>The <code>LCL_APP</code> class uses a private data structure <code>PROVIDERS</code> to store the loaded provider configurations.</p>"},{"location":"Llama%203.2%203b/ZLLM_PROVIDER_MAINTENANCE_PROG/#class-lcl_screen","title":"Class LCL_SCREEN","text":"<p>The <code>LCL_SCREEN</code> class has the following methods:</p> <ul> <li><code>START</code>: Starts the program and initializes the user interface.</li> <li><code>PAI</code>: Handles the PAI (Post-Activation) event, which is triggered when the user performs an action on the ALV.</li> <li><code>PBO</code>: Handles the PBO (Post-Create) event, which is triggered when the ALV is created.</li> </ul> <p>The <code>LCL_SCREEN</code> class uses a private data structure <code>APP</code> to store the <code>LCL_APP</code> instance.</p>"},{"location":"Llama%203.2%203b/ZLLM_PROVIDER_MAINTENANCE_PROG/#logic-flow","title":"Logic Flow","text":"<p>The program uses the following logic flow:</p> <ol> <li>The <code>LCL_SCREEN</code> class starts the program and initializes the user interface.</li> <li>The user interacts with the ALV, performing actions such as adding, changing, or deleting provider configurations.</li> <li>The <code>LCL_SCREEN</code> class triggers the PAI event, which calls the <code>LCL_APP</code> instance's <code>HANDLE_ACTION_ADD</code>, <code>HANDLE_ACTION_CHANGE</code>, or <code>HANDLE_ACTION_DELETE</code> method.</li> <li>The <code>LCL_APP</code> instance performs the requested action, such as saving a provider configuration or encrypting a value.</li> <li>The <code>LCL_APP</code> instance updates the <code>PROVIDERS</code> data structure and triggers the <code>REFRESH_DISPLAY</code> method to refresh the ALV data.</li> </ol> <pre><code>graph LR\n    A[Start Program] --&gt;|Start|&gt; B[Initialize ALV]\n    B --&gt;|PAI|&gt; C[LCL_APP::HANDLE_ACTION_ADD]\n    C --&gt;|Save Provider|&gt; D[Update PROVIDERS]\n    D --&gt;|REFRESH_DISPLAY|&gt; E[Refresh ALV Data]\n    E --&gt;|PBO|&gt; F[LCL_SCREEN::START]</code></pre> <p>Note: This is a simplified representation of the logic flow and may not include all the details.</p>"},{"location":"Llama%203.2%203b/Z_LLM_CLIENT_FUGR/","title":"Function Group Z_LLM_CLIENT","text":""},{"location":"Llama%203.2%203b/FUGR/Z_LLM_CLIENT/TABLEFRAME_Z_LLM_CLIENT/","title":"Function Module TABLEFRAME_Z_LLM_CLIENT","text":"<p>AI Generated documentation.</p>"},{"location":"Llama%203.2%203b/FUGR/Z_LLM_CLIENT/TABLEFRAME_Z_LLM_CLIENT/#common-includes","title":"Common Includes","text":"<p>No includes are shown as this is a table frame function group.</p>"},{"location":"Llama%203.2%203b/FUGR/Z_LLM_CLIENT/TABLEFRAME_Z_LLM_CLIENT/#function-module-main-include","title":"Function Module Main Include","text":"<pre><code>FUNCTION TABLEFRAME_Z_LLM_CLIENT\n  IMPORTING\n    VALUE(X_HEADER) TYPE  STRING\n    VALUE(X_NAMTAB) TYPE  STRING\n    VALUE(X_CORR_NUMBER) TYPE  I\n    VALUE(X_VIEW_ACTION) TYPE  C\n    VALUE(X_VIEW_NAME) TYPE  C.\n\n  PERFORM TABLEFRAME TABLES X_HEADER X_NAMTAB DBA_SELLIST DPL_SELLIST\n    EXCL_CUA_FUNCT\n    USING  CORR_NUMBER VIEW_ACTION VIEW_NAME.\nENDFUNCTION.\n</code></pre>"},{"location":"Llama%203.2%203b/FUGR/Z_LLM_CLIENT/TABLEFRAME_Z_LLM_CLIENT/#overview","title":"Overview","text":"<p>The function module <code>TABLEFRAME_Z_LLM_CLIENT</code> is used to perform a table frame operation. It takes several parameters, including the header, name of the table, correlation number, view action, and view name.</p>"},{"location":"Llama%203.2%203b/FUGR/Z_LLM_CLIENT/TABLEFRAME_Z_LLM_CLIENT/#dependencies","title":"Dependencies","text":"<ul> <li>None</li> </ul>"},{"location":"Llama%203.2%203b/FUGR/Z_LLM_CLIENT/TABLEFRAME_Z_LLM_CLIENT/#details","title":"Details","text":"<p>The function module <code>TABLEFRAME_Z_LLM_CLIENT</code> performs a table frame operation using the <code>TABLEFRAME</code> function module. The <code>TABLEFRAME</code> function module is used to perform various table frame operations, such as creating, updating, and deleting tables.</p> <p>The function module takes several parameters, including:</p> <ul> <li><code>X_HEADER</code>: The header of the table frame.</li> <li><code>X_NAMTAB</code>: The name of the table.</li> <li><code>X_CORR_NUMBER</code>: The correlation number.</li> <li><code>X_VIEW_ACTION</code>: The view action.</li> <li><code>X_VIEW_NAME</code>: The view name.</li> </ul> <p>The function module uses the <code>DBA_SELLIST</code> and <code>DPL_SELLIST</code> function modules to perform the table frame operation. The <code>EXCL_CUA_FUNCT</code> parameter is used to exclude certain functions.</p> <pre><code>graph LR\n  A[ TABLEFRAME_Z_LLM_CLIENT ] --&gt;|X_HEADER|&gt; B[ TABLEFRAME ]\n  A --&gt;|X_NAMTAB|&gt; C[ TABLEFRAME ]\n  A --&gt;|X_CORR_NUMBER|&gt; D[ DBA_SELLIST ]\n  A --&gt;|X_VIEW_ACTION|&gt; E[ DPL_SELLIST ]\n  A --&gt;|X_VIEW_NAME|&gt; F[ DBA_SELLIST ]\n  B --&gt;|EXCL_CUA_FUNCT|&gt; G[ Exclude certain functions ]</code></pre> <p>Note: The mermaid diagram is a simplified representation of the function module's logic flow and interactions with foreign objects.</p>"},{"location":"Llama%203.2%203b/FUGR/Z_LLM_CLIENT/TABLEPROC_Z_LLM_CLIENT/","title":"Function Module TABLEPROC_Z_LLM_CLIENT","text":"<p>AI Generated documentation.</p>"},{"location":"Llama%203.2%203b/FUGR/Z_LLM_CLIENT/TABLEPROC_Z_LLM_CLIENT/#common-includes","title":"Common Includes","text":"<p>No includes are shown as this is a table frame function group.</p>"},{"location":"Llama%203.2%203b/FUGR/Z_LLM_CLIENT/TABLEPROC_Z_LLM_CLIENT/#function-module-main-include","title":"Function Module Main Include","text":"<pre><code>FUNCTION TABLEPROC_Z_LLM_CLIENT.\n  PERFORM TABLEPROC.\n\nENDFUNCTION.\n</code></pre>"},{"location":"Llama%203.2%203b/FUGR/Z_LLM_CLIENT/TABLEPROC_Z_LLM_CLIENT/#overview","title":"Overview","text":"<p>The TABLEPROC_Z_LLM_CLIENT function module is designed to perform a specific task related to a table. The main functionality of this function module is to call another function module named TABLEPROC.</p>"},{"location":"Llama%203.2%203b/FUGR/Z_LLM_CLIENT/TABLEPROC_Z_LLM_CLIENT/#dependencies","title":"Dependencies","text":"<ul> <li>TABLEPROC: This function module is dependent on TABLEPROC_Z_LLM_CLIENT.</li> </ul>"},{"location":"Llama%203.2%203b/FUGR/Z_LLM_CLIENT/TABLEPROC_Z_LLM_CLIENT/#details","title":"Details","text":""},{"location":"Llama%203.2%203b/FUGR/Z_LLM_CLIENT/TABLEPROC_Z_LLM_CLIENT/#logic-flow","title":"Logic Flow","text":"<p>The function module TABLEPROC_Z_LLM_CLIENT calls TABLEPROC. The logic flow can be visualized as follows:</p> <pre><code>graph LR\n    A[Input] --&gt;|Call TABLEPROC|&gt; B[TABLEPROC]\n    B --&gt;|Perform operations|&gt; C[Output]\n    C --&gt;|Return result|&gt; D[End of function]</code></pre>"},{"location":"Llama%203.2%203b/FUGR/Z_LLM_CLIENT/TABLEPROC_Z_LLM_CLIENT/#interaction-with-foreign-objects","title":"Interaction with Foreign Objects","text":"<ul> <li>TABLEPROC: This function module interacts with TABLEPROC_Z_LLM_CLIENT. The interaction is a call from TABLEPROC_Z_LLM_CLIENT to TABLEPROC.</li> </ul>"},{"location":"Llama%203.2%203b/FUGR/Z_LLM_CLIENT/TABLEPROC_Z_LLM_CLIENT/#function-module-tableproc","title":"Function Module TABLEPROC","text":"<p>The function module TABLEPROC is not shown in this code snippet. However, it is assumed to contain the actual logic for performing operations on the table.</p>"},{"location":"Llama%203.2%203b/FUGR/Z_LLM_CLIENT/TABLEPROC_Z_LLM_CLIENT/#error-handling","title":"Error Handling","text":"<p>Error handling is not explicitly mentioned in the provided code snippet. However, it is recommended to include error handling in the TABLEPROC function module to handle any potential errors that may occur during the execution of the function.</p>"},{"location":"Llama%203.2%203b/FUGR/Z_LLM_CLIENT/TABLEPROC_Z_LLM_CLIENT/#performance-optimization","title":"Performance Optimization","text":"<p>Performance optimization is not explicitly mentioned in the provided code snippet. However, it is recommended to optimize the TABLEPROC function module to improve the performance of the TABLEPROC_Z_LLM_CLIENT function module.</p>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_ANTHROPIC/","title":"Package ZLLM_CLIENT_ANTHROPIC","text":"<p>AI Generated documentation.</p>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_ANTHROPIC/#overview","title":"Overview","text":"<p>Package overview The ZCL_LLM_CLIENT_ANTHROPIC package is designed to interact with the Anthropic LLM API, enabling the creation and management of requests to the API and the parsing of responses to facilitate the integration of Anthropic's language model capabilities into SAP applications. The package provides a structured approach to working with the Anthropic API, allowing developers to focus on the core functionality of the language model integration.</p>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_ANTHROPIC/ZCL_LLM_CLIENT_ANTHROPIC_CLAS/","title":"Class ZCL_LLM_CLIENT_ANTHROPIC","text":"<p>AI Generated documentation.</p>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_ANTHROPIC/ZCL_LLM_CLIENT_ANTHROPIC_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_client_anthropic</code> class is a subclass of <code>zcl_llm_client_base</code> and is designed to interact with the Anthropic LLM (Large Language Model) API. It provides a set of methods to create and manage requests to the Anthropic API, parse responses, and handle errors.</p>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_ANTHROPIC/ZCL_LLM_CLIENT_ANTHROPIC_CLAS/#dependencies","title":"Dependencies","text":"<p>The class depends on the following external objects:</p> <ul> <li><code>zcl_llm_client_base</code></li> <li><code>zcl_llm_http_client_wrapper</code></li> <li><code>zcl_llm_common</code></li> <li><code>zif_llm_client</code></li> <li><code>zif_llm_chat_request</code></li> <li><code>zcl_abap_format</code></li> </ul>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_ANTHROPIC/ZCL_LLM_CLIENT_ANTHROPIC_CLAS/#details","title":"Details","text":""},{"location":"Llama%203.2%203b/ZLLM_CLIENT_ANTHROPIC/ZCL_LLM_CLIENT_ANTHROPIC_CLAS/#class-structure-and-methods","title":"Class Structure and Methods","text":"<p>The class has the following public methods:</p> <ul> <li><code>get_client</code>: Creates a new instance of the <code>zcl_llm_client_anthropic</code> class and returns a reference to it.</li> <li><code>constructor</code>: Initializes the class with the provided client and provider configurations.</li> <li><code>zif_llm_client~new_request</code>: Redefines the method to support Anthropic-specific requirements.</li> <li><code>build_request_json</code>: Builds the JSON payload for the request, including structured output and tool definitions.</li> <li><code>parse_message</code>: Parses the message content and handles tool calls.</li> <li><code>handle_http_response</code>: Handles the HTTP response from the Anthropic API, including error handling and parsing the response structure.</li> </ul>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_ANTHROPIC/ZCL_LLM_CLIENT_ANTHROPIC_CLAS/#interaction-with-foreign-objects","title":"Interaction with Foreign Objects","text":"<p>The class interacts with the following foreign objects:</p> <pre><code>graph LR\n    A[Client Configuration] --&gt;|set| B[Provider Configuration]\n    B --&gt;|set| C[LLM Client Base]\n    C --&gt;|create| D[zcl_llm_client_anthropic]\n    D --&gt;|get_client| E[LLM Client]\n    E --&gt;|new_request| F[Anthropic API]\n    F --&gt;|build_request_json| G[Request Payload]\n    G --&gt;|parse_message| H[Message Content]\n    H --&gt;|handle_http_response| I[HTTP Response]</code></pre>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_ANTHROPIC/ZCL_LLM_CLIENT_ANTHROPIC_CLAS/#logic-flow","title":"Logic Flow","text":"<p>The class follows the following logic flow:</p> <ol> <li><code>get_client</code> creates a new instance of the class.</li> <li><code>constructor</code> initializes the class with the provided client and provider configurations.</li> <li><code>zif_llm_client~new_request</code> is called to create a new request to the Anthropic API.</li> <li><code>build_request_json</code> builds the JSON payload for the request.</li> <li><code>parse_message</code> parses the message content and handles tool calls.</li> <li><code>handle_http_response</code> handles the HTTP response from the Anthropic API.</li> <li>The class returns the parsed response to the caller.</li> </ol>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_AZUREOAI/","title":"Package ZLLM_CLIENT_AZUREOAI","text":"<p>AI Generated documentation.</p>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_AZUREOAI/#overview","title":"Overview","text":"<p>Package overview The provided ABAP development package consists of two classes: <code>ZCL_LLM_CLIENT_AZUREOAI</code> and <code>ZCL_LLM_SO_JS_AZUREOAI</code>. These classes enable integration with the Azure OpenAI API for text generation and completion tasks, as well as configuration and completion of schema definitions for data validation and processing purposes.</p> <p>The package provides a factory method for creating instances of the Azure OpenAI client, allowing for flexible and efficient integration with the Azure OpenAI API. Additionally, it offers a class for implementing the Azure OpenAI JSON schema, facilitating the configuration and completion of schema definitions for various use cases.</p> <p>The overall design of the package focuses on providing a robust and flexible framework for integrating with the Azure OpenAI API, enabling developers to leverage the power of AI-driven text generation and completion capabilities within their SAP applications.</p>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_CLIENT_AZUREOAI_CLAS/","title":"Class ZCL_LLM_CLIENT_AZUREOAI","text":"<p>AI Generated documentation.</p>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_CLIENT_AZUREOAI_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_client_azureoai</code> class is a subclass of <code>zcl_llm_client_base</code> and provides a factory method <code>get_client</code> to create a new instance of the Azure OpenAI client. The class is responsible for initializing the client with the provided configuration and handling authentication.</p>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_CLIENT_AZUREOAI_CLAS/#dependencies","title":"Dependencies","text":"<p>The class depends on the following:</p> <ul> <li><code>zcl_llm_client_base</code>: The base class that provides common functionality for all LLM clients.</li> <li><code>zcl_llm_http_client_wrapper</code>: A class that provides a wrapper for the HTTP client.</li> <li><code>zcl_llm_common</code>: A class that provides common functionality for LLM clients, including the <code>get_llm_badi</code> function.</li> <li><code>zcl_llm_so_js_azureoai</code>: A class that provides a structured output for the Azure OpenAI API.</li> </ul>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_CLIENT_AZUREOAI_CLAS/#details","title":"Details","text":""},{"location":"Llama%203.2%203b/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_CLIENT_AZUREOAI_CLAS/#factory-method-get_client","title":"Factory Method <code>get_client</code>","text":"<p>The <code>get_client</code> method creates a new instance of the <code>zcl_llm_client_azureoai</code> class and initializes it with the provided <code>client_config</code> and <code>provider_config</code>. The method returns the created client instance.</p> <pre><code>graph LR\n    A[client_config] --&gt;|set| B[provider_config]\n    B --&gt;|set| C[zcl_llm_client_azureoai]\n    C --&gt;|return| D[zcl_llm_client_azureoai]</code></pre>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_CLIENT_AZUREOAI_CLAS/#method-set_auth","title":"Method <code>set_auth</code>","text":"<p>The <code>set_auth</code> method is responsible for setting the authentication for the client. It checks if the <code>provider_config-auth_encrypted</code> field is set and if so, it decrypts the value using the <code>get_encryption_impl</code> function from the <code>zcl_llm_common</code> class. If the <code>provider_config-auth_type</code> is set to 'A', it sets the <code>api-key</code> header with the decrypted value.</p> <pre><code>graph LR\n    A[provider_config-auth_encrypted] --&gt;|decrypt| B[provider_config-auth_encrypted_decrypted]\n    B --&gt;|set| C[api-key]\n    C --&gt;|set| D[client]</code></pre>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_CLIENT_AZUREOAI_CLAS/#method-create_structured_output","title":"Method <code>create_structured_output</code>","text":"<p>The <code>create_structured_output</code> method creates a new instance of the <code>zcl_llm_so_js_azureoai</code> class and returns it.</p> <pre><code>graph LR\n    A[zcl_llm_client_azureoai] --&gt;|create| B[zcl_llm_so_js_azureoai]\n    B --&gt;|return| C[structured output]</code></pre>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_CLIENT_AZUREOAI_CLAS/#method-get_chat_endpoint","title":"Method <code>get_chat_endpoint</code>","text":"<p>The <code>get_chat_endpoint</code> method returns the URL for the chat endpoint of the Azure OpenAI API.</p> <pre><code>graph LR\n    A[zcl_llm_client_azureoai] --&gt;|get| B[chat endpoint URL]\n    B --&gt;|return| C[chat endpoint URL]</code></pre>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_SO_JS_AZUREOAI_CLAS/","title":"Class ZCL_LLM_SO_JS_AZUREOAI","text":"<p>AI Generated documentation.</p>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_SO_JS_AZUREOAI_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_so_js_azureoai</code> class is a subclass of <code>zcl_llm_so_js</code> and is designed to implement the Azure OpenAI JSON schema. It provides two main methods: <code>pre_schema</code> and <code>post_schema</code>, which are responsible for appending specific schema definitions to the overall schema.</p>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_SO_JS_AZUREOAI_CLAS/#dependencies","title":"Dependencies","text":"<p>The class does not have any explicit dependencies.</p>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_SO_JS_AZUREOAI_CLAS/#details","title":"Details","text":""},{"location":"Llama%203.2%203b/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_SO_JS_AZUREOAI_CLAS/#method-pre_schema","title":"Method <code>pre_schema</code>","text":"<p>The <code>pre_schema</code> method appends a specific schema definition to the overall schema. The schema definition includes the following properties:</p> <pre><code>graph LR\n    A[Schema] --&gt;|append_to_schema|&gt; B[Response]\n    B --&gt;|strict|&gt; C[true]\n    B --&gt;|schema|&gt; D[Object]\n    D --&gt;|key|&gt; E[Response]</code></pre> <p>This method is likely used to configure the schema before it is used to validate or process data.</p>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_SO_JS_AZUREOAI_CLAS/#method-post_schema","title":"Method <code>post_schema</code>","text":"<p>The <code>post_schema</code> method appends another schema definition to the overall schema. The schema definition includes a closing bracket to complete the schema:</p> <pre><code>graph LR\n    A[Schema] --&gt;|append_to_schema|&gt; B[Object]\n    B --&gt;|}|&gt; C[End of Schema]</code></pre> <p>This method is likely used to complete the schema after it has been partially defined by the <code>pre_schema</code> method.</p>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_SO_JS_AZUREOAI_CLAS/#interaction-with-zcl_llm_so_js","title":"Interaction with <code>zcl_llm_so_js</code>","text":"<p>The <code>zcl_llm_so_js_azureoai</code> class inherits from <code>zcl_llm_so_js</code>, which suggests that it may be used in conjunction with other classes or function modules that are part of the <code>zcl_llm_so_js</code> package. The exact interaction between these classes is not explicitly documented in the provided code.</p>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_OLLAMA/","title":"Package ZLLM_CLIENT_OLLAMA","text":"<p>AI Generated documentation.</p>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_OLLAMA/#overview","title":"Overview","text":"<p>Package overview The <code>ZCL_LLM_CLIENT_OLLAMA</code> package is designed to interact with the Ollama API, enabling chat functionality and handling requests and responses in a structured and secure manner. It provides a robust and maintainable solution for integrating Ollama API with SAP systems, leveraging ABAP programming language and SAP's robust security features.</p>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_OLLAMA/ZCL_LLM_CLIENT_OLLAMA_CLAS/","title":"Class ZCL_LLM_CLIENT_OLLAMA","text":"<p>AI Generated documentation.</p>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_OLLAMA/ZCL_LLM_CLIENT_OLLAMA_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_client_ollama</code> class is a subclass of <code>zcl_llm_client_base</code> and provides a client for interacting with the Ollama API. It is designed to handle chat requests and responses, and provides methods for building requests, handling HTTP responses, and parsing messages.</p>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_OLLAMA/ZCL_LLM_CLIENT_OLLAMA_CLAS/#dependencies","title":"Dependencies","text":"<p>The class depends on the following external objects:</p> <ul> <li><code>zcl_llm_http_client_wrapper</code>: for creating an HTTP client</li> <li><code>zcl_llm_common</code>: for encryption and decryption</li> <li><code>zif_llm_client</code>: for interacting with the Ollama API</li> <li><code>zif_llm_tool</code>: for interacting with tools</li> </ul>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_OLLAMA/ZCL_LLM_CLIENT_OLLAMA_CLAS/#details","title":"Details","text":""},{"location":"Llama%203.2%203b/ZLLM_CLIENT_OLLAMA/ZCL_LLM_CLIENT_OLLAMA_CLAS/#class-structure","title":"Class Structure","text":"<pre><code>class zcl_llm_client_ollama : zcl_llm_client_base\n  +-- constructor\n  +-- get_client\n  +-- get_http_client\n  +-- set_auth\n  +-- build_request_json\n  +-- get_chat_endpoint\n  +-- handle_http_response\n  +-- parse_message</code></pre>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_OLLAMA/ZCL_LLM_CLIENT_OLLAMA_CLAS/#main-interactions","title":"Main Interactions","text":"<p>The class interacts with the following external objects:</p> <ul> <li><code>zcl_llm_http_client_wrapper</code>: for creating an HTTP client</li> <li><code>zcl_llm_common</code>: for encryption and decryption</li> <li><code>zif_llm_client</code>: for interacting with the Ollama API</li> <li><code>zif_llm_tool</code>: for interacting with tools</li> </ul>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_OLLAMA/ZCL_LLM_CLIENT_OLLAMA_CLAS/#logic-flow","title":"Logic Flow","text":"<p>The class follows the following logic flow:</p> <ol> <li>The <code>get_client</code> method creates a new instance of the class and returns it.</li> <li>The <code>get_http_client</code> method creates an HTTP client using <code>zcl_llm_http_client_wrapper</code>.</li> <li>The <code>set_auth</code> method sets the authentication headers for the HTTP client.</li> <li>The <code>build_request_json</code> method builds the request JSON by modifying the request and adding Ollama-specific format parameters.</li> <li>The <code>get_chat_endpoint</code> method returns the chat endpoint URL.</li> <li>The <code>handle_http_response</code> method handles the HTTP response and parses the message.</li> <li>The <code>parse_message</code> method parses the message and returns the parsed data.</li> </ol>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_OLLAMA/ZCL_LLM_CLIENT_OLLAMA_CLAS/#expert-notes","title":"Expert Notes","text":"<ul> <li>The class uses a combination of encryption and decryption to secure the communication with the Ollama API.</li> <li>The class supports multiple tools and can handle tool-specific requests.</li> <li>The class uses a JSON-based format for the request and response data.</li> <li>The class provides a flexible way to handle chat requests and responses.</li> </ul>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_OPENAI/","title":"Package ZLLM_CLIENT_OPENAI","text":"<p>AI Generated documentation.</p>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_OPENAI/#overview","title":"Overview","text":"<p>The provided ABAP development package consists of two classes: <code>ZCL_LLM_CLIENT_OPENAI</code> and <code>ZCL_LLM_SO_JS_OA</code>. These classes aim to facilitate interaction with the OpenAI API, enabling the creation of structured output and HTTP requests with authentication headers. The package is designed to support the generation of schema definitions for OpenAI JSON Schema, extending the functionality of the <code>ZCL_LLM_SO_JS</code> class.</p>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_OPENAI/#package-overview","title":"Package Overview","text":"<p>The package provides a client for interacting with the OpenAI API, enabling the creation of structured output and HTTP requests with authentication headers. It also extends the functionality of the <code>ZCL_LLM_SO_JS</code> class to support OpenAI JSON Schema, allowing for the generation of schema definitions for this specific use case.</p>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_OPENAI/ZCL_LLM_CLIENT_OPENAI_CLAS/","title":"Class ZCL_LLM_CLIENT_OPENAI","text":"<p>AI Generated documentation.</p>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_OPENAI/ZCL_LLM_CLIENT_OPENAI_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_client_openai</code> class is a subclass of <code>zcl_llm_client_base</code> and provides a client for interacting with the OpenAI API. The class has two main public methods: <code>get_client</code> and <code>constructor</code>. The <code>get_client</code> method creates a new instance of the <code>zcl_llm_client_openai</code> class and returns it, while the <code>constructor</code> method initializes the class with client and provider configurations.</p>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_OPENAI/ZCL_LLM_CLIENT_OPENAI_CLAS/#dependencies","title":"Dependencies","text":"<p>The class depends on the following external objects:</p> <ul> <li><code>zcl_llm_client_base</code></li> <li><code>zcl_llm_common</code></li> <li><code>zcl_llm_http_client_wrapper</code></li> <li><code>zcl_llm_providers</code></li> <li><code>zcl_llm_so_js_oa</code></li> </ul>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_OPENAI/ZCL_LLM_CLIENT_OPENAI_CLAS/#details","title":"Details","text":""},{"location":"Llama%203.2%203b/ZLLM_CLIENT_OPENAI/ZCL_LLM_CLIENT_OPENAI_CLAS/#class-flow-diagram","title":"Class Flow Diagram","text":"<pre><code>graph LR\n    A[Client Config] --&gt;|set|&gt; B[Constructor]\n    B --&gt;|create|&gt; C[Get Client]\n    C --&gt;|create|&gt; D[Get Chat Endpoint]\n    D --&gt;|set|&gt; E[Set Auth]\n    E --&gt;|create|&gt; F[Create Structured Output]\n    F --&gt;|create|&gt; G[Get HTTP Client]</code></pre>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_OPENAI/ZCL_LLM_CLIENT_OPENAI_CLAS/#interaction-with-foreign-objects","title":"Interaction with Foreign Objects","text":"<p>The class interacts with the following foreign objects:</p> <ul> <li><code>zcl_llm_client_base</code>: The superclass provides a basic implementation for client interactions.</li> <li><code>zcl_llm_common</code>: The class uses the <code>get_llm_badi</code> function to retrieve the encryption implementation.</li> <li><code>zcl_llm_http_client_wrapper</code>: The class uses this object to create an HTTP client.</li> <li><code>zcl_llm_providers</code>: The class uses the provider configuration to set authentication headers.</li> <li><code>zcl_llm_so_js_oa</code>: The class uses this object to create a structured output.</li> </ul>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_OPENAI/ZCL_LLM_CLIENT_OPENAI_CLAS/#authentication","title":"Authentication","text":"<p>The class sets authentication headers using the <code>provider_config-auth_encrypted</code> and <code>provider_config-auth_type</code> fields. If <code>provider_config-auth_type</code> is set to 'A', the class sets the <code>Authorization</code> header with the decrypted authentication value.</p>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_OPENAI/ZCL_LLM_CLIENT_OPENAI_CLAS/#structured-output","title":"Structured Output","text":"<p>The class creates a structured output using the <code>zcl_llm_so_js_oa</code> object.</p>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_OPENAI/ZCL_LLM_CLIENT_OPENAI_CLAS/#http-client","title":"HTTP Client","text":"<p>The class creates an HTTP client using the <code>zcl_llm_http_client_wrapper</code> object.</p>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_OPENAI/ZCL_LLM_SO_JS_OA_CLAS/","title":"Class ZCL_LLM_SO_JS_OA","text":"<p>AI Generated documentation.</p>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_OPENAI/ZCL_LLM_SO_JS_OA_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_so_js_oa</code> class is an extension of the <code>zcl_llm_so_js</code> class, providing a specialized implementation for OpenAI JSON Schema. It inherits from the parent class and adds new functionality to the existing schema generation process.</p> <p>The class has two public methods: <code>pre_schema</code> and <code>post_schema</code>. These methods are used to append specific schema definitions to the existing schema.</p>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_OPENAI/ZCL_LLM_SO_JS_OA_CLAS/#dependencies","title":"Dependencies","text":"<p>None</p>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_OPENAI/ZCL_LLM_SO_JS_OA_CLAS/#details","title":"Details","text":""},{"location":"Llama%203.2%203b/ZLLM_CLIENT_OPENAI/ZCL_LLM_SO_JS_OA_CLAS/#interaction-with-parent-class","title":"Interaction with Parent Class","text":"<p>The <code>zcl_llm_so_js_oa</code> class inherits from <code>zcl_llm_so_js</code>, which is not shown in the provided code snippet. However, based on the <code>pre_schema</code> and <code>post_schema</code> methods, it can be inferred that the parent class provides some common schema generation functionality.</p> <pre><code>graph LR\n    zcl_llm_so_js -&gt;&gt; zcl_llm_so_js_oa: schema\n    zcl_llm_so_js_oa --&gt;|append_schema|&gt; zcl_llm_so_js: schema</code></pre>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_OPENAI/ZCL_LLM_SO_JS_OA_CLAS/#logic-flow","title":"Logic Flow","text":"<p>The <code>pre_schema</code> method appends a specific schema definition to the existing schema, indicating that the OpenAI JSON Schema implementation is being used. The <code>post_schema</code> method appends another schema definition, likely to complete the schema generation process.</p> <pre><code>graph LR\n    START\n        pre_schema\n        append_schema\n        post_schema\n    END</code></pre>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_OPENAI/ZCL_LLM_SO_JS_OA_CLAS/#interaction-with-external-objects","title":"Interaction with External Objects","text":"<p>The class does not interact with any external objects such as function modules or tables. The schema generation process appears to be self-contained within the class.</p>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_OPENROUTER/","title":"Package ZLLM_CLIENT_OPENROUTER","text":"<p>AI Generated documentation.</p>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_OPENROUTER/#overview","title":"Overview","text":"<p>Package overview The provided ABAP development package consists of two classes: <code>ZCL_LLM_CLIENT_OPENROUTER</code> and <code>ZCL_LLM_SO_JS_OR</code>. These classes are designed to interact with the OpenRouter API, providing a standardized interface for accessing chat completions and other OpenRouter features. The package aims to simplify the integration of OpenRouter into a larger SAP ABAP application.</p>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_CLIENT_OPENROUTER_CLAS/","title":"Class ZCL_LLM_CLIENT_OPENROUTER","text":"<p>AI Generated documentation.</p>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_CLIENT_OPENROUTER_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_client_openrouter</code> class is a subclass of <code>zcl_llm_client_base</code> and is responsible for creating an instance of the <code>zif_llm_client</code> interface. It provides methods for getting a client instance, initializing the client, and setting authentication headers.</p>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_CLIENT_OPENROUTER_CLAS/#dependencies","title":"Dependencies","text":"<p>The class depends on the following:</p> <ul> <li><code>zcl_llm_client_base</code>: The base class that <code>zcl_llm_client_openrouter</code> inherits from.</li> <li><code>zcl_llm_http_client_wrapper</code>: A class that provides a method for getting an HTTP client instance.</li> <li><code>zcl_llm_common</code>: A class that provides a method for getting the LLM BADI (Business Application Interface) implementation.</li> </ul>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_CLIENT_OPENROUTER_CLAS/#details","title":"Details","text":""},{"location":"Llama%203.2%203b/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_CLIENT_OPENROUTER_CLAS/#class-flow","title":"Class Flow","text":"<pre><code>graph LR\n    A[Client Config] --&gt;|Importing|&gt; B[Constructor]\n    B --&gt;|Calling|&gt; C[Initialize]\n    C --&gt;|Calling|&gt; D[Get Client]\n    D --&gt;|Creating|&gt; E[ZCL LLM Client]\n    E --&gt;|Setting|&gt; F[Authentication Headers]\n    F --&gt;|Returning|&gt; G[Client Instance]</code></pre>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_CLIENT_OPENROUTER_CLAS/#interaction-with-foreign-objects","title":"Interaction with Foreign Objects","text":"<p>The class interacts with the following foreign objects:</p> <ul> <li><code>zcl_llm_http_client_wrapper</code>: Used to get an HTTP client instance.</li> <li><code>zcl_llm_common</code>: Used to get the LLM BADI implementation.</li> <li><code>zcl_llm_client_base</code>: The base class that <code>zcl_llm_client_openrouter</code> inherits from.</li> </ul>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_CLIENT_OPENROUTER_CLAS/#authentication-flow","title":"Authentication Flow","text":"<p>The class sets authentication headers based on the <code>provider_config-auth_encrypted</code> and <code>provider_config-auth_type</code> fields.</p> <pre><code>graph LR\n    A[Provider Config] --&gt;|Auth Encrypted|&gt; B[Encryption Implementation]\n    B --&gt;|Decrypting|&gt; C[Auth Value]\n    C --&gt;|Setting Auth Type|&gt; D[Authorization Header]\n    D --&gt;|Setting|&gt; E[Authentication Headers]</code></pre>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_CLIENT_OPENROUTER_CLAS/#method-breakdown","title":"Method Breakdown","text":"<ul> <li><code>get_client</code>: Creates a new instance of the <code>zcl_llm_client_openrouter</code> class and returns a reference to the <code>zif_llm_client</code> interface.</li> <li><code>constructor</code>: Initializes the client instance with the provided <code>client_config</code> and <code>provider_config</code> fields.</li> <li><code>get_chat_endpoint</code>: Returns the chat endpoint URL.</li> <li><code>get_http_client</code>: Gets an HTTP client instance using the <code>zcl_llm_http_client_wrapper</code> class.</li> <li><code>set_auth</code>: Sets authentication headers based on the <code>provider_config-auth_encrypted</code> and <code>provider_config-auth_type</code> fields.</li> </ul>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_SO_JS_OR_CLAS/","title":"Class ZCL_LLM_SO_JS_OR","text":"<p>AI Generated documentation.</p>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_SO_JS_OR_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_so_js_or</code> class is a subclass of <code>zcl_llm_so_js</code> and is designed to extend the functionality of the parent class. It provides two public methods: <code>pre_schema</code> and <code>post_schema</code>, which are used to modify the schema of the class.</p>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_SO_JS_OR_CLAS/#dependencies","title":"Dependencies","text":"<p>The class depends on the parent class <code>zcl_llm_so_js</code>.</p>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_SO_JS_OR_CLAS/#details","title":"Details","text":""},{"location":"Llama%203.2%203b/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_SO_JS_OR_CLAS/#method-pre_schema","title":"Method <code>pre_schema</code>","text":"<p>The <code>pre_schema</code> method is used to append a schema definition to the class. It takes no parameters and appends the following schema definition:</p> <pre><code>graph LR\n    A[|name\":\"Response|] --&gt; B[|strict\":true|]\n    B --&gt; C[|schema\":{|\n    C --&gt; D[|}|]</code></pre> <p>This schema definition is appended to the class schema before any other schema definitions.</p>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_SO_JS_OR_CLAS/#method-post_schema","title":"Method <code>post_schema</code>","text":"<p>The <code>post_schema</code> method is used to append a schema definition to the class. It takes no parameters and appends the following schema definition:</p> <pre><code>graph LR\n    A[|}|]</code></pre> <p>This schema definition is appended to the class schema after all other schema definitions.</p>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_SO_JS_OR_CLAS/#interaction-with-parent-class","title":"Interaction with Parent Class","text":"<p>The <code>pre_schema</code> and <code>post_schema</code> methods are called by the parent class <code>zcl_llm_so_js</code> to modify the class schema. The <code>pre_schema</code> method is called before any other schema definitions are appended, while the <code>post_schema</code> method is called after all other schema definitions have been appended.</p>"},{"location":"Llama%203.2%203b/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_SO_JS_OR_CLAS/#interaction-with-foreign-objects","title":"Interaction with Foreign Objects","text":"<p>The class does not interact with any foreign objects, such as classes, function modules, or tables.</p>"},{"location":"Mistral%20Small%203/","title":"Package ZLLM_CLIENT","text":"<p>AI Generated documentation.</p>"},{"location":"Mistral%20Small%203/#overview","title":"Overview","text":"<p>The ABAP development package is designed to facilitate the integration and management of Large Language Models (LLMs) within an SAP environment. It provides a comprehensive suite of classes, interfaces, and packages that handle various aspects of LLM interactions, including authorization, encryption, logging, and HTTP communication. The package ensures secure and efficient data processing, with a focus on extensibility and modularity. Key features include custom authorization checks, call logging, chat request management, and JSON schema generation, all of which are designed to work seamlessly within the SAP ecosystem. The package also includes specialized clients for interacting with specific LLM providers, such as Anthropic, Azure OpenAI, and OpenAI, each with its own set of configurations and authentication mechanisms. Additionally, the package provides tools for template parsing, tool calculation, and statistical data management, ensuring a robust and flexible framework for LLM integration in SAP systems.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_AUTH_DISABLED_CLAS/","title":"Class ZCL_LLM_AUTH_DISABLED","text":"<p>AI Generated documentation.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_AUTH_DISABLED_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_auth_disabled</code> class is designed to implement a custom authorization check mechanism for various operations related to encryption, decryption, client retrieval, and provider maintenance. This class is a final class, meaning it cannot be inherited, and it implements the <code>zif_llm_auth</code> interface. The primary purpose of this class is to ensure that specific authorization checks do not raise exceptions when authorization is disabled.</p> <p>The class provides the following public methods:</p> <ul> <li><code>check_decrypt</code>: Checks the authorization for decryption operations.</li> <li><code>check_encrypt</code>: Checks the authorization for encryption operations.</li> <li><code>check_get_client</code>: Checks the authorization for retrieving client information.</li> <li><code>check_provider_maintenance</code>: Checks the authorization for provider maintenance operations.</li> </ul> <p>Each of these methods is designed to raise a <code>zcx_llm_authorization</code> exception if the operation is not allowed, but in this implementation, they are left empty, indicating that no authorization checks are performed.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_AUTH_DISABLED_CLAS/#dependencies","title":"Dependencies","text":"<p>The class depends on the <code>zif_llm_auth</code> interface, which it implements. Additionally, it is expected to interact with the BADI <code>ZLLM_DEFAULTS</code> for custom implementations and exception handling.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_AUTH_DISABLED_CLAS/#details","title":"Details","text":"<p>The <code>zcl_llm_auth_disabled</code> class is structured to handle authorization checks for various operations in a way that ensures no exceptions are raised when authorization is disabled. This is achieved by implementing the methods from the <code>zif_llm_auth</code> interface and leaving them empty, effectively bypassing any authorization checks.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_AUTH_DISABLED_CLAS/#method-details","title":"Method Details","text":""},{"location":"Mistral%20Small%203/ZCL_LLM_AUTH_DISABLED_CLAS/#check_decrypt","title":"<code>check_decrypt</code>","text":"<p>This method is intended to check the authorization for decryption operations. In the current implementation, it does not perform any checks and simply returns without raising an exception.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_AUTH_DISABLED_CLAS/#check_encrypt","title":"<code>check_encrypt</code>","text":"<p>This method is intended to check the authorization for encryption operations. Similar to <code>check_decrypt</code>, it does not perform any checks and simply returns without raising an exception.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_AUTH_DISABLED_CLAS/#check_get_client","title":"<code>check_get_client</code>","text":"<p>This method is intended to check the authorization for retrieving client information. It takes a parameter (e.g., <code>'TEST'</code>) and does not perform any checks, returning without raising an exception.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_AUTH_DISABLED_CLAS/#check_provider_maintenance","title":"<code>check_provider_maintenance</code>","text":"<p>This method is intended to check the authorization for provider maintenance operations. It does not perform any checks and simply returns without raising an exception.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_AUTH_DISABLED_CLAS/#interaction-with-badi-zllm_defaults","title":"Interaction with BADI <code>ZLLM_DEFAULTS</code>","text":"<p>The class is designed to be registered in the BADI <code>ZLLM_DEFAULTS</code>, allowing for custom implementations of the authorization checks. This registration is crucial for integrating the class into the broader system and ensuring that the custom authorization logic is applied correctly.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_AUTH_DISABLED_CLAS/#logic-flow","title":"Logic Flow","text":"<p>The following Mermaid diagram illustrates the logic flow of the class methods:</p> <pre><code>graph TD\n    A[Call check_decrypt] --&gt; B[No Authorization Check]\n    B --&gt; C[Return without Exception]\n\n    D[Call check_encrypt] --&gt; E[No Authorization Check]\n    E --&gt; F[Return without Exception]\n\n    G[Call check_get_client] --&gt; H[No Authorization Check]\n    H --&gt; I[Return without Exception]\n\n    J[Call check_provider_maintenance] --&gt; K[No Authorization Check]\n    K --&gt; L[Return without Exception]</code></pre> <p>This diagram shows that each method call results in a return without performing any authorization checks, ensuring that no exceptions are raised.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_CALL_LOGGER_CLAS/","title":"Class ZCL_LLM_CALL_LOGGER","text":"<p>AI Generated documentation.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_CALL_LOGGER_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_call_logger</code> class is designed to log call entries based on the system's active state and user filter settings. It implements the <code>zif_llm_call_logger</code> interface and provides a constructor to initialize the system settings. The class has a public method <code>add</code> that logs entries if the system is active and the user filter matches the current user.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_CALL_LOGGER_CLAS/#dependencies","title":"Dependencies","text":"<p>The class depends on the following:</p> <ul> <li>Interface: <code>zif_llm_call_logger</code></li> <li>Table: <code>zllm_system</code></li> <li>Table: <code>zllm_call_log</code></li> </ul>"},{"location":"Mistral%20Small%203/ZCL_LLM_CALL_LOGGER_CLAS/#details","title":"Details","text":"<p>The <code>zcl_llm_call_logger</code> class interacts with the <code>zllm_system</code> table to determine if the system is active and whether the user filter matches the current user. The class uses the <code>zllm_call_log</code> table to store log entries.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_CALL_LOGGER_CLAS/#class-structure-and-logic-flow","title":"Class Structure and Logic Flow","text":"<pre><code>classDiagram\n    class zcl_llm_call_logger {\n        +constructor()\n        +add(entry)\n        -active: sap_bool\n    }\n\n    zcl_llm_call_logger --|&gt; zif_llm_call_logger : implements\n\n    class zif_llm_call_logger {\n        +add(entry)\n    }\n\n    class zllm_system {\n        -save_calls: sap_bool\n        -call_filter_uname: string\n    }\n\n    class zllm_call_log {\n        -log_entry: string\n    }\n\n    zcl_llm_call_logger --&gt; zllm_system : reads system settings\n    zcl_llm_call_logger --&gt; zllm_call_log : logs entries</code></pre>"},{"location":"Mistral%20Small%203/ZCL_LLM_CALL_LOGGER_CLAS/#constructor","title":"Constructor","text":"<p>The constructor initializes the <code>active</code> attribute based on the system settings:</p> <ul> <li>It reads the <code>zllm_system</code> table to get the <code>save_calls</code> and <code>call_filter_uname</code> values.</li> <li>If <code>save_calls</code> is <code>true</code> and the <code>call_filter_uname</code> matches either '*' or the current user (<code>sy-uname</code>), the <code>active</code> attribute is set to <code>true</code>.</li> </ul>"},{"location":"Mistral%20Small%203/ZCL_LLM_CALL_LOGGER_CLAS/#add-method","title":"<code>add</code> Method","text":"<p>The <code>add</code> method logs an entry if the system is active:</p> <ul> <li>It checks the <code>active</code> attribute.</li> <li>If <code>active</code> is <code>false</code>, the method returns immediately.</li> <li>If <code>active</code> is <code>true</code>, it inserts the log entry into the <code>zllm_call_log</code> table.</li> </ul>"},{"location":"Mistral%20Small%203/ZCL_LLM_CALL_LOGGER_CLAS/#test-cases","title":"Test Cases","text":"<p>The class is tested using a series of methods that set up the environment, add log entries, and verify the logging behavior:</p> <ul> <li><code>add_when_active</code>: Verifies that an entry is logged when the system is active.</li> <li><code>add_when_inactive</code>: Verifies that no entry is logged when the system is inactive.</li> <li><code>add_with_user_filter</code>: Verifies that an entry is logged only for a specific user when the user filter is set.</li> </ul>"},{"location":"Mistral%20Small%203/ZCL_LLM_CALL_LOGGER_CLAS/#interaction-with-tables","title":"Interaction with Tables","text":"<ul> <li><code>zllm_system</code>: Used to determine the system's active state and user filter.</li> <li><code>zllm_call_log</code>: Used to store log entries.</li> </ul>"},{"location":"Mistral%20Small%203/ZCL_LLM_CALL_LOGGER_CLAS/#important-aspects","title":"Important Aspects","text":"<ul> <li>The class ensures that log entries are only added when the system is active and the user filter matches the current user.</li> <li>The <code>active</code> attribute is a key factor in determining whether log entries are added.</li> <li>The class provides a clear and concise way to manage logging based on system settings and user filters.</li> </ul>"},{"location":"Mistral%20Small%203/ZCL_LLM_CHAT_REQUEST_CLAS/","title":"Class ZCL_LLM_CHAT_REQUEST","text":"<p>AI Generated documentation.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_CHAT_REQUEST_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_chat_request</code> class is designed to manage chat requests, including adding and clearing messages, tools, and tool results. It implements the <code>zif_llm_chat_request</code> interface and provides a comprehensive set of methods to handle various aspects of a chat request. The class is particularly useful for managing interactions within a chat system, ensuring that messages, tools, and tool results are correctly added, cleared, and retrieved.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_CHAT_REQUEST_CLAS/#public-methods","title":"Public Methods","text":"<ul> <li>add_choice: Adds a choice to the chat request.</li> <li>add_tool_result: Adds a tool result to the chat request.</li> <li>add_message: Adds a single message to the chat request.</li> <li>add_messages: Adds multiple messages to the chat request.</li> <li>add_tool: Adds a single tool to the chat request.</li> <li>add_tools: Adds multiple tools to the chat request.</li> <li>clear_messages: Clears all messages from the chat request.</li> <li>clear_tools: Clears all tools from the chat request.</li> <li>get_messages: Retrieves all messages from the chat request.</li> <li>get_tools: Retrieves all tools from the chat request.</li> <li>set_structured_output: Sets the structured output schema and description.</li> <li>set_structured_output_active: Sets the structured output active flag.</li> <li>set_tool_choice: Sets the tool choice for the chat request.</li> <li>get_internal_request: Retrieves the internal request object.</li> <li>options: Retrieves the options of the chat request.</li> <li>add_tool_choices: Adds tool choices to the chat request.</li> <li>constructor: Initializes the chat request with a given request object.</li> </ul>"},{"location":"Mistral%20Small%203/ZCL_LLM_CHAT_REQUEST_CLAS/#dependencies","title":"Dependencies","text":"<p>The class depends on the <code>zif_llm_chat_request</code> interface and the <code>zllm_request</code> type. It also interacts with the <code>zif_llm_client</code> and <code>zcl_llm_common</code> classes for role definitions and JSON conversion, respectively.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_CHAT_REQUEST_CLAS/#details","title":"Details","text":"<p>The <code>zcl_llm_chat_request</code> class is designed to handle the intricacies of a chat request, ensuring that messages, tools, and tool results are managed efficiently. The class uses a protected section to store the internal request object, which is initialized via the constructor. The methods in the class interact with this internal request object to perform various operations.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_CHAT_REQUEST_CLAS/#interaction-flow","title":"Interaction Flow","text":"<p>The following Mermaid diagram illustrates the interaction flow within the <code>zcl_llm_chat_request</code> class:</p> <pre><code>graph TD\n    A[Constructor] --&gt; B[Initialize request]\n    B --&gt; C[add_message]\n    B --&gt; D[add_messages]\n    B --&gt; E[add_tool]\n    B --&gt; F[add_tools]\n    B --&gt; G[add_tool_result]\n    B --&gt; H[add_tool_choices]\n    B --&gt; I[clear_messages]\n    B --&gt; J[clear_tools]\n    B --&gt; K[set_structured_output]\n    B --&gt; L[set_structured_output_active]\n    B --&gt; M[set_tool_choice]\n    B --&gt; N[get_internal_request]\n    B --&gt; O[options]\n    B --&gt; P[get_messages]\n    B --&gt; Q[get_tools]</code></pre>"},{"location":"Mistral%20Small%203/ZCL_LLM_CHAT_REQUEST_CLAS/#key-aspects","title":"Key Aspects","text":"<ul> <li>Message Management: The class provides methods to add, clear, and retrieve messages, ensuring that the chat request can handle multiple messages efficiently.</li> <li>Tool Management: Tools can be added, cleared, and retrieved, allowing for dynamic tool management within the chat request.</li> <li>Tool Result Management: Tool results can be added to the chat request, ensuring that the results of tool executions are properly recorded.</li> <li>Structured Output: The class supports setting and activating structured output, which is useful for formatting the chat request output in a structured manner.</li> <li>Tool Choices: Tool choices can be added to the chat request, allowing for flexible tool selection during the chat interaction.</li> </ul> <p>This class is a crucial component in a chat system, providing a robust framework for managing chat requests and ensuring that all interactions are handled efficiently and correctly.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_CLIENT_BASE_CLAS/","title":"Class ZCL_LLM_CLIENT_BASE","text":"<p>AI Generated documentation.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_CLIENT_BASE_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_client_base</code> class is an abstract base class designed to provide a foundation for LLM (Large Language Model) clients. It implements the <code>zif_llm_client</code> interface and defines a set of public methods that must be implemented by derived classes. The class handles the construction of HTTP requests, processing of HTTP responses, and managing tool calls. It also includes methods for initializing the client, setting authentication, and handling structured output.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_CLIENT_BASE_CLAS/#public-methods","title":"Public Methods","text":"<ul> <li>Constructor: Initializes the client with the provided configuration and sets up necessary components.</li> <li>get_http_client: Abstract method to be implemented by derived classes to get the HTTP client.</li> <li>set_auth: Abstract method to be implemented by derived classes to set authentication.</li> <li>get_chat_endpoint: Abstract method to be implemented by derived classes to get the chat endpoint.</li> <li>build_request_json: Constructs the JSON request payload from the given request object.</li> <li>handle_http_response: Processes the HTTP response and handles errors, tool calls, and structured output.</li> <li>parse_message: Converts a message object into a JSON string.</li> <li>create_structured_output: Creates a structured output object.</li> <li>parse_structured_output: Parses the structured output from a JSON string.</li> <li>handle_tool_calls: Handles tool calls in the response and updates the result.</li> <li>initialize: Initializes the client by setting up the HTTP client and authentication.</li> <li>chat: Executes a chat request, handles the response, and updates statistics.</li> <li>new_request: Creates a new request object with default options and structured output.</li> <li>get_client: Retrieves the client instance using the provider's class.</li> </ul>"},{"location":"Mistral%20Small%203/ZCL_LLM_CLIENT_BASE_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li>zif_llm_client: Interface that defines the methods to be implemented by the LLM client.</li> <li>zif_llm_http_client_wrapper: Interface for the HTTP client wrapper.</li> <li>zif_llm_tool_parser: Interface for parsing tool details.</li> <li>zif_llm_statistics: Interface for handling statistics.</li> <li>zllm_clnt_config: Configuration type for the client.</li> <li>zllm_providers: Configuration type for the provider.</li> <li>zllm_request: Type for the request object.</li> <li>zllm_response: Type for the response object.</li> <li>zllm_msg: Type for the message object.</li> <li>zllm_so: Type for the structured output.</li> <li>zcx_llm_validation: Exception for validation errors.</li> <li>zcx_llm_authorization: Exception for authorization errors.</li> <li>zcx_llm_http_error: Exception for HTTP errors.</li> <li>zcl_llm_tool_parser: Class for parsing tool details.</li> <li>zcl_llm_common: Class for common utility methods.</li> <li>zcl_llm_so_js: Class for structured output in JSON format.</li> <li>zcl_llm_chat_request: Class for chat request.</li> <li>zcl_llm_options: Class for request options.</li> <li>zif_llm_chat_request: Interface for chat request.</li> <li>zif_llm_tool: Interface for tool details.</li> </ul>"},{"location":"Mistral%20Small%203/ZCL_LLM_CLIENT_BASE_CLAS/#details","title":"Details","text":""},{"location":"Mistral%20Small%203/ZCL_LLM_CLIENT_BASE_CLAS/#class-structure","title":"Class Structure","text":"<p>The class is structured into three main sections: public, protected, and private. The public section defines the interface methods and additional methods for handling requests and responses. The protected section includes constants, type definitions, and data declarations. The private section is not used in this class.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_CLIENT_BASE_CLAS/#interaction-flow","title":"Interaction Flow","text":"<p>The following diagram illustrates the interaction flow between the main methods and components of the <code>zcl_llm_client_base</code> class:</p> <pre><code>graph TD\n    A[Constructor] --&gt; B[Initialize Components]\n    B --&gt; C[Set Client Config]\n    B --&gt; D[Set Provider Config]\n    B --&gt; E[Create Tool Parser]\n    B --&gt; F[Generate UUID]\n    B --&gt; G[Get Statistics]\n\n    H[chat] --&gt; I[Set URL]\n    H --&gt; J[Build Request JSON]\n    H --&gt; K[Communicate with Client]\n    H --&gt; L[Handle HTTP Response]\n    H --&gt; M[Update Statistics]\n\n    N[new_request] --&gt; O[Initialize Options]\n    N --&gt; P[Create Structured Output]\n    N --&gt; Q[Set Default Parameters]\n    N --&gt; R[Create Chat Request]\n\n    S[handle_http_response] --&gt; T[Check HTTP Status]\n    S --&gt; U[Parse JSON Response]\n    S --&gt; V[Handle Tool Calls]\n    S --&gt; W[Parse Structured Output]\n\n    X[handle_tool_calls] --&gt; Y[Loop Through Tools]\n    X --&gt; Z[Parse Tool Calls]\n    X --&gt; AA[Handle Tool Call Errors]\n\n    BB[build_request_json] --&gt; CC[Add Messages]\n    BB --&gt; DD[Add Structured Output]\n    BB --&gt; EE[Add Tools]\n    BB --&gt; FF[Add Options]\n\n    GG[parse_message] --&gt; HH[Check for Tool Calls]\n    GG --&gt; II[Format Message]</code></pre>"},{"location":"Mistral%20Small%203/ZCL_LLM_CLIENT_BASE_CLAS/#key-components","title":"Key Components","text":"<ul> <li>Constants: Define standard HTTP status codes for OK, too many requests, and timeout.</li> <li>Types: Define structures for function, tool call, message, choice, usage, and response.</li> <li>Data: Include references to the HTTP client, client configuration, provider configuration, tool parser, statistics, timestamps, and UUID.</li> <li>Abstract Methods: Define methods that must be implemented by derived classes for getting the HTTP client, setting authentication, and getting the chat endpoint.</li> <li>Common Methods: Provide default implementations for building request JSON, handling HTTP responses, parsing messages, creating structured output, and handling tool calls.</li> <li>Helper Methods: Include methods for initializing the client and handling tool calls.</li> </ul>"},{"location":"Mistral%20Small%203/ZCL_LLM_CLIENT_BASE_CLAS/#error-handling","title":"Error Handling","text":"<p>The class includes robust error handling mechanisms, such as checking HTTP status codes, handling tool call errors, and catching exceptions. This ensures that the client can gracefully handle various error scenarios and provide meaningful error messages.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_COMMON_CLAS/","title":"Class ZCL_LLM_COMMON","text":"<p>AI Generated documentation.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_COMMON_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_common</code> class is designed to handle the serialization and deserialization of data structures to and from JSON format. It provides public methods for converting data structures to JSON strings and vice versa. The class also includes methods for interacting with a Business Add-In (BADI) to retrieve the JSON implementation class.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_COMMON_CLAS/#public-methods","title":"Public Methods","text":"<ol> <li>class_constructor: Initializes the class by retrieving the JSON implementation class from a BADI.</li> <li>to_json: Converts a data structure to a JSON string. It accepts a data structure and an optional compression flag.</li> <li>from_json: Converts a JSON string back to a data structure.</li> <li>get_llm_badi: Returns the reference to the BADI implementation.</li> </ol>"},{"location":"Mistral%20Small%203/ZCL_LLM_COMMON_CLAS/#dependencies","title":"Dependencies","text":"<p>The class depends on the following:</p> <ul> <li>BADI <code>llm_badi</code>: Used to retrieve the JSON implementation class.</li> <li>Class <code>json_class</code>: The class responsible for serialization and deserialization of JSON.</li> </ul>"},{"location":"Mistral%20Small%203/ZCL_LLM_COMMON_CLAS/#details","title":"Details","text":"<p>The <code>zcl_llm_common</code> class leverages the BADI <code>llm_badi</code> to dynamically retrieve the JSON implementation class during its initialization. This allows for flexible and modular JSON handling. The class methods <code>to_json</code> and <code>from_json</code> utilize the <code>json_class</code> for serialization and deserialization, respectively.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_COMMON_CLAS/#logic-flow","title":"Logic Flow","text":"<p>The following Mermaid diagram illustrates the interaction and logic flow within the class:</p> <pre><code>graph TD\n    A[Class Initialization] --&gt; B[Retrieve BADI Implementation]\n    B --&gt; C[Call BADI Method]\n    C --&gt; D[Get JSON Implementation Class]\n    D --&gt; E[Store JSON Implementation Class]\n\n    E --&gt; F[to_json Method]\n    F --&gt; G[Serialize Data to JSON]\n    G --&gt; H[Return JSON String]\n\n    E --&gt; I[from_json Method]\n    I --&gt; J[Deserialize JSON to Data]\n    J --&gt; K[Return Data Structure]\n\n    E --&gt; L[get_llm_badi Method]\n    L --&gt; M[Return BADI Reference]</code></pre>"},{"location":"Mistral%20Small%203/ZCL_LLM_COMMON_CLAS/#interaction-with-foreign-objects","title":"Interaction with Foreign Objects","text":"<ul> <li>BADI <code>llm_badi</code>: The class interacts with the BADI to get the JSON implementation class. This interaction is crucial for the dynamic retrieval of the serialization and deserialization logic.</li> <li>Class <code>json_class</code>: This class is responsible for the actual serialization and deserialization of data. It is dynamically assigned during the class initialization and used in the <code>to_json</code> and <code>from_json</code> methods.</li> </ul>"},{"location":"Mistral%20Small%203/ZCL_LLM_COMMON_CLAS/#important-aspects","title":"Important Aspects","text":"<ul> <li>Dynamic JSON Handling: The class uses a BADI to dynamically retrieve the JSON implementation class, making it flexible and adaptable to different JSON handling requirements.</li> <li>Serialization and Deserialization: The core functionality revolves around converting data structures to JSON strings and vice versa, ensuring data can be easily exchanged and stored in a standardized format.</li> <li>Compression Option: The <code>to_json</code> method includes an optional compression flag, allowing for compact JSON strings when needed.</li> </ul>"},{"location":"Mistral%20Small%203/ZCL_LLM_DEFAULT_IMPL_CLAS/","title":"Class ZCL_LLM_DEFAULT_IMPL","text":"<p>AI Generated documentation.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_DEFAULT_IMPL_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_default_impl</code> class is a public implementation class that provides default implementations for various interfaces. It serves as a central point for managing different functionalities related to encryption, JSON handling, call logging, statistics, and authorization. The class adheres to the Singleton pattern, ensuring that only one instance of each managed class is created.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_DEFAULT_IMPL_CLAS/#public-methods","title":"Public Methods","text":"<ul> <li><code>get_encryption_impl</code>: Returns an instance of the encryption class. If the instance is not already created, it initializes a new instance of <code>zcl_llm_encryption</code>.</li> <li><code>get_json_impl</code>: Returns a constant string representing the JSON class.</li> <li><code>get_call_logger_impl</code>: Returns an instance of the call logger class. If the instance is not already created, it initializes a new instance of <code>zcl_llm_call_logger</code>.</li> <li><code>get_statistics_impl</code>: Returns an instance of the statistics class. If the instance is not already created, it initializes a new instance of <code>zcl_llm_statistics</code>.</li> <li><code>get_authorization_impl</code>: Returns an instance of the authorization class. If the instance is not already created, it initializes a new instance of <code>zcl_llm_auth_disabled</code>.</li> </ul>"},{"location":"Mistral%20Small%203/ZCL_LLM_DEFAULT_IMPL_CLAS/#dependencies","title":"Dependencies","text":"<p>The class depends on the following interfaces and classes:</p> <ul> <li><code>if_badi_interface</code></li> <li><code>zif_llm_default_impl</code></li> <li><code>zif_llm_encryption</code></li> <li><code>zif_llm_statistics</code></li> <li><code>zif_llm_call_logger</code></li> <li><code>zif_llm_auth</code></li> <li><code>zcl_llm_encryption</code></li> <li><code>zcl_llm_call_logger</code></li> <li><code>zcl_llm_statistics</code></li> <li><code>zcl_llm_auth_disabled</code></li> </ul>"},{"location":"Mistral%20Small%203/ZCL_LLM_DEFAULT_IMPL_CLAS/#details","title":"Details","text":"<p>The class utilizes the Singleton pattern to manage instances of the dependent classes. This ensures that only one instance of each class is created and reused throughout the application. The following diagram illustrates the interaction between the <code>zcl_llm_default_impl</code> class and its dependent classes:</p> <pre><code>classDiagram\n    class zcl_llm_default_impl {\n        +get_encryption_impl()\n        +get_json_impl()\n        +get_call_logger_impl()\n        +get_statistics_impl()\n        +get_authorization_impl()\n    }\n\n    class zif_llm_encryption {\n        &lt;&lt;Interface&gt;&gt;\n    }\n\n    class zif_llm_statistics {\n        &lt;&lt;Interface&gt;&gt;\n    }\n\n    class zif_llm_call_logger {\n        &lt;&lt;Interface&gt;&gt;\n    }\n\n    class zif_llm_auth {\n        &lt;&lt;Interface&gt;&gt;\n    }\n\n    class zcl_llm_encryption {\n        +zcl_llm_encryption()\n    }\n\n    class zcl_llm_call_logger {\n        +zcl_llm_call_logger()\n    }\n\n    class zcl_llm_statistics {\n        +zcl_llm_statistics()\n    }\n\n    class zcl_llm_auth_disabled {\n        +zcl_llm_auth_disabled()\n    }\n\n    zcl_llm_default_impl --&gt; zif_llm_encryption\n    zcl_llm_default_impl --&gt; zif_llm_statistics\n    zcl_llm_default_impl --&gt; zif_llm_call_logger\n    zcl_llm_default_impl --&gt; zif_llm_auth\n    zcl_llm_default_impl --&gt; zcl_llm_encryption\n    zcl_llm_default_impl --&gt; zcl_llm_call_logger\n    zcl_llm_default_impl --&gt; zcl_llm_statistics\n    zcl_llm_default_impl --&gt; zcl_llm_auth_disabled</code></pre>"},{"location":"Mistral%20Small%203/ZCL_LLM_DEFAULT_IMPL_CLAS/#singleton-pattern-implementation","title":"Singleton Pattern Implementation","text":"<p>The class ensures that each dependent class is instantiated only once. This is achieved by checking if the class instance is already bound before creating a new instance. The following diagram illustrates the logic flow for the <code>get_encryption_impl</code> method, which is representative of the other methods:</p> <pre><code>graph TD\n    A[Start] --&gt; B{Is enc_class bound?}\n    B -- Yes --&gt; C[Return enc_class]\n    B -- No --&gt; D[Create new zcl_llm_encryption instance]\n    D --&gt; E[Bind enc_class to new instance]\n    E --&gt; C\n    C --&gt; F[End]</code></pre> <p>This pattern is applied consistently across all methods that return instances of dependent classes, ensuring efficient memory usage and consistent behavior throughout the application.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_ENCRYPTION_CLAS/","title":"Class ZCL_LLM_ENCRYPTION","text":"<p>AI Generated documentation.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_ENCRYPTION_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_encryption</code> class is designed to handle encryption and decryption operations using the SSF (Secure Storage Facility) framework in SAP. The class implements the <code>zif_llm_encryption</code> interface and provides methods for encrypting and decrypting data. The primary public methods include <code>encrypt</code> and <code>decrypt</code>, which are used to perform the encryption and decryption operations, respectively. The class also includes a <code>class_constructor</code> method that initializes the necessary components for encryption and decryption.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_ENCRYPTION_CLAS/#dependencies","title":"Dependencies","text":"<p>The class depends on several SAP function modules and interfaces:</p> <ul> <li><code>zif_llm_encryption</code>: Interface that defines the encryption and decryption methods.</li> <li><code>zif_llm_auth</code>: Interface for authorization checks.</li> <li><code>SSF_KRN_DEVELOPE</code>: Function module used for decrypting data.</li> <li><code>SSF_KRN_ENVELOPE</code>: Function module used for encrypting data.</li> <li><code>SSFPSE_FILENAME</code>: Function module used to get the profile filename.</li> <li><code>SSFC_GET_CERTIFICATE</code>: Function module used to get the certificate.</li> <li><code>SSFC_PARSE_CERTIFICATE</code>: Function module used to parse the certificate.</li> </ul>"},{"location":"Mistral%20Small%203/ZCL_LLM_ENCRYPTION_CLAS/#details","title":"Details","text":"<p>The <code>zcl_llm_encryption</code> class interacts with various SAP function modules and handles encryption and decryption using the SSF framework. Below is a detailed breakdown of the class's internal workings and interactions:</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_ENCRYPTION_CLAS/#class-structure","title":"Class Structure","text":"<p>The class is divided into three sections: <code>PUBLIC</code>, <code>PROTECTED</code>, and <code>PRIVATE</code>.</p> <ul> <li>PUBLIC Section:</li> <li> <p>Methods:</p> <ul> <li><code>class_constructor</code>: Initializes the encryption object, including setting up the authorization class and retrieving the necessary profile and certificate.</li> <li><code>encrypt</code>: Encrypts the given unencrypted data.</li> <li><code>decrypt</code>: Decrypts the given encrypted data.</li> </ul> </li> <li> <p>PROTECTED Section:</p> </li> <li>Class Data:<ul> <li><code>subject</code>: Stores the subject of the encryption.</li> <li><code>addrbook</code>: Stores the address book profile.</li> <li><code>auth_class</code>: Reference to the authorization class.</li> </ul> </li> <li> <p>Constants:</p> <ul> <li><code>application</code>: Application identifier.</li> <li><code>bin_line</code>: Size of the binary line (255 bytes).</li> </ul> </li> <li> <p>PRIVATE Section:</p> </li> <li>No additional data or methods are defined in this section.</li> </ul>"},{"location":"Mistral%20Small%203/ZCL_LLM_ENCRYPTION_CLAS/#encryption-and-decryption-flow","title":"Encryption and Decryption Flow","text":"<p>The encryption and decryption processes involve several steps, including authorization checks, data conversion, and interaction with SSF function modules. Below is a Mermaid diagram illustrating the flow of the <code>encrypt</code> method:</p> <pre><code>graph TD\n    A[Start] --&gt; B[Check if unencrypted data is initial]\n    B -- No --&gt; C[Convert unencrypted data to xstring]\n    C --&gt; D[Check authorization]\n    D --&gt; E[Split data into 255-byte chunks]\n    E --&gt; F[Call SSF_KRN_ENVELOPE function module]\n    F --&gt; G[Concatenate enveloped data]\n    G --&gt; H[Return encrypted data]\n    B -- Yes --&gt; H</code></pre>"},{"location":"Mistral%20Small%203/ZCL_LLM_ENCRYPTION_CLAS/#decryption-flow","title":"Decryption Flow","text":"<p>The decryption process is similar but involves the <code>SSF_KRN_DEVELOPE</code> function module. Below is a Mermaid diagram illustrating the flow of the <code>decrypt</code> method:</p> <pre><code>graph TD\n    A[Start] --&gt; B[Check if encrypted data is initial]\n    B -- No --&gt; C[Check authorization]\n    C --&gt; D[Split encrypted data into 255-byte chunks]\n    D --&gt; E[Call SSF_KRN_DEVELOPE function module]\n    E --&gt; F[Convert output data to string]\n    F --&gt; G[Return decrypted data]\n    B -- Yes --&gt; G</code></pre>"},{"location":"Mistral%20Small%203/ZCL_LLM_ENCRYPTION_CLAS/#error-handling","title":"Error Handling","text":"<p>The class includes robust error handling for various scenarios, such as memory issues, invalid parameters, and function module errors. Exceptions are raised using the <code>zcx_llm_validation</code> class, with specific text IDs and attributes to indicate the nature of the error.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_ENCRYPTION_CLAS/#authorization","title":"Authorization","text":"<p>The <code>class_constructor</code> method initializes the authorization class by calling the <code>get_authorization_impl</code> method of the <code>llm_badi</code> BAdI (Business Add-In). This ensures that the encryption and decryption operations are performed with the necessary permissions.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_ENCRYPTION_CLAS/#profile-and-certificate-management","title":"Profile and Certificate Management","text":"<p>The class retrieves the profile and certificate using the <code>SSFPSE_FILENAME</code>, <code>SSFC_GET_CERTIFICATE</code>, and <code>SSFC_PARSE_CERTIFICATE</code> function modules. These steps are crucial for setting up the encryption environment and ensuring that the correct certificate is used for encryption and decryption operations.</p> <p>This detailed overview provides a comprehensive understanding of the <code>zcl_llm_encryption</code> class, its interactions, and its internal workings.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_FACTORY_CLAS/","title":"Class ZCL_LLM_FACTORY","text":"<p>AI Generated documentation.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_FACTORY_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_factory</code> class is designed to manage the creation and validation of clients for Large Language Models (LLMs). It provides a public interface for obtaining client configurations and handles various validation and authorization checks. The class interacts with database tables to retrieve necessary configurations and ensures that the correct exceptions are raised for invalid inputs.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_FACTORY_CLAS/#public-methods","title":"Public Methods","text":"<ul> <li><code>zif_llm_factory~get_client</code>: This method is the core functionality of the class. It checks the authorization for getting a client, retrieves the client configuration from the <code>ZLLM_CLNT_CONFIG</code> table, and then retrieves the provider configuration from the <code>ZLLM_PROVIDERS</code> table. If any of these steps fail, it raises appropriate exceptions. Finally, it calls the provider class to get the client.</li> <li><code>class_constructor</code>: This method initializes the class by obtaining the authorization implementation from a Business Add-In (BADI).</li> </ul>"},{"location":"Mistral%20Small%203/ZCL_LLM_FACTORY_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li>Interfaces: <code>zif_llm_factory</code>, <code>zif_llm_auth</code>, <code>zif_llm_client</code></li> <li>Exceptions: <code>zcx_llm_validation</code>, <code>zcx_llm_authorization</code></li> <li>Database Tables: <code>ZLLM_CLNT_CONFIG</code>, <code>ZLLM_PROVIDERS</code></li> <li>Classes: <code>zcl_llm_common</code></li> </ul>"},{"location":"Mistral%20Small%203/ZCL_LLM_FACTORY_CLAS/#details","title":"Details","text":"<p>The <code>zcl_llm_factory</code> class is responsible for ensuring that clients are created and validated correctly. The class interacts with several components to achieve this:</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_FACTORY_CLAS/#logic-flow","title":"Logic Flow","text":"<p>The logic flow of the <code>zif_llm_factory~get_client</code> method can be visualized as follows:</p> <pre><code>graph TD\n    A[Start] --&gt; B[Check Authorization]\n    B --&gt; C[Retrieve Client Configuration]\n    C --&gt; D{Client Configuration Found?}\n    D -- Yes --&gt; E[Retrieve Provider Configuration]\n    D -- No --&gt; F[Raise zcx_llm_validation (model_does_not_exist)]\n    E --&gt; G{Provider Configuration Found?}\n    G -- Yes --&gt; H[Call Provider Class to Get Client]\n    G -- No --&gt; I[Raise zcx_llm_validation (provider_does_not_exist)]\n    H --&gt; J[End]\n    F --&gt; J\n    I --&gt; J</code></pre>"},{"location":"Mistral%20Small%203/ZCL_LLM_FACTORY_CLAS/#interaction-with-foreign-objects","title":"Interaction with Foreign Objects","text":"<p>The class interacts with several foreign objects, including interfaces, exceptions, and database tables. The main interactions are as follows:</p> <ul> <li>Interfaces:</li> <li><code>zif_llm_factory</code>: Provides the public method <code>get_client</code>.</li> <li><code>zif_llm_auth</code>: Used for authorization checks.</li> <li> <p><code>zif_llm_client</code>: Called to get the client.</p> </li> <li> <p>Exceptions:</p> </li> <li><code>zcx_llm_validation</code>: Raised for validation errors such as model or provider not found.</li> <li> <p><code>zcx_llm_authorization</code>: Raised for authorization errors.</p> </li> <li> <p>Database Tables:</p> </li> <li><code>ZLLM_CLNT_CONFIG</code>: Stores client configurations.</li> <li><code>ZLLM_PROVIDERS</code>: Stores provider configurations.</li> </ul>"},{"location":"Mistral%20Small%203/ZCL_LLM_FACTORY_CLAS/#class-diagram","title":"Class Diagram","text":"<p>The class diagram provides a visual representation of the class and its interactions:</p> <pre><code>classDiagram\n  class zcl_llm_factory {\n    -auth_class: REF TO zif_llm_auth\n    +zif_llm_factory~get_client(model)\n    +class_constructor()\n  }\n\n  class zif_llm_factory {\n    +get_client(model)\n  }\n\n  class zif_llm_auth {\n    +check_get_client(model)\n  }\n\n  class zif_llm_client {\n    +get_client(client_config, provider_config)\n  }\n\n  class zcx_llm_validation {\n    +model_does_not_exist\n    +provider_does_not_exist\n  }\n\n  class zcx_llm_authorization {\n  }\n\n  zcl_llm_factory --&gt; zif_llm_factory : Implements\n  zcl_llm_factory --&gt; zif_llm_auth : Uses\n  zcl_llm_factory --&gt; zif_llm_client : Calls\n  zcl_llm_factory --&gt; zcx_llm_validation : Catches\n  zcl_llm_factory --&gt; zcx_llm_authorization : Catches\n  zcl_llm_factory --&gt; ZLLM_CLNT_CONFIG : Queries\n  zcl_llm_factory --&gt; ZLLM_PROVIDERS : Queries</code></pre> <p>This detailed overview provides a comprehensive understanding of the <code>zcl_llm_factory</code> class, its functionality, and its interactions with other components.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_HTTP_CLIENT_WRAPPER_CLAS/","title":"Class ZCL_LLM_HTTP_CLIENT_WRAPPER","text":"<p>AI Generated documentation.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_HTTP_CLIENT_WRAPPER_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_http_client_wrapper</code> class is designed to encapsulate the functionality of an HTTP client, providing a wrapper around the SAP HTTP client. This class is part of a larger system that handles HTTP communication, logging, and error handling. The class implements the <code>zif_llm_http_client_wrapper</code> interface, which defines the public methods for interacting with the HTTP client.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_HTTP_CLIENT_WRAPPER_CLAS/#public-methods","title":"Public Methods","text":"<ol> <li>Constructor:</li> <li>Purpose: Initializes the HTTP client wrapper with the provided <code>client_config</code> and <code>provider_config</code>.</li> <li>Parameters:<ul> <li><code>client_config</code>: Configuration for the client.</li> <li><code>provider_config</code>: Configuration for the provider.</li> </ul> </li> <li> <p>Exceptions: Raises <code>zcx_llm_validation</code> if there is an error during initialization.</p> </li> <li> <p>get_client:</p> </li> <li>Purpose: Returns a new instance of the HTTP client wrapper.</li> <li>Parameters: None.</li> <li> <p>Returns: A new instance of <code>zcl_llm_http_client_wrapper</code>.</p> </li> <li> <p>set_header:</p> </li> <li>Purpose: Sets a header on the HTTP request.</li> <li>Parameters:<ul> <li><code>name</code>: The name of the header.</li> <li><code>value</code>: The value of the header.</li> </ul> </li> <li> <p>Returns: None.</p> </li> <li> <p>set_url:</p> </li> <li>Purpose: Sets the URL for the HTTP request.</li> <li>Parameters:<ul> <li><code>url</code>: The URL to be set.</li> </ul> </li> <li> <p>Returns: None.</p> </li> <li> <p>communicate:</p> </li> <li>Purpose: Sends an HTTP request and handles the response.</li> <li>Parameters: None.</li> <li>Returns: None.</li> <li> <p>Exceptions: Raises <code>zcx_llm_http_error</code> if there is an error during communication.</p> </li> <li> <p>close_client:</p> </li> <li>Purpose: Closes the HTTP client.</li> <li>Parameters: None.</li> <li>Returns: None.</li> </ol>"},{"location":"Mistral%20Small%203/ZCL_LLM_HTTP_CLIENT_WRAPPER_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li>zif_llm_http_client_wrapper: Interface that defines the public methods for the HTTP client wrapper.</li> <li>zcl_llm_common: Provides utility methods, such as <code>get_llm_badi</code>.</li> <li>zcx_llm_validation: Exception class for validation errors.</li> <li>zcx_llm_http_error: Exception class for HTTP communication errors.</li> <li>cl_http_client: SAP HTTP client class.</li> <li>cl_http_utility: Utility class for HTTP operations.</li> <li>zif_llm_call_logger: Interface for logging HTTP calls.</li> </ul>"},{"location":"Mistral%20Small%203/ZCL_LLM_HTTP_CLIENT_WRAPPER_CLAS/#details","title":"Details","text":"<p>The <code>zcl_llm_http_client_wrapper</code> class is designed to handle HTTP communication in a structured and error-resistant manner. It uses the SAP HTTP client to send and receive HTTP requests and responses. The class also includes logging functionality to record the details of each HTTP call, which is crucial for debugging and monitoring.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_HTTP_CLIENT_WRAPPER_CLAS/#class-structure","title":"Class Structure","text":"<p>The class is divided into three sections: public, protected, and private.</p> <ul> <li>Public Section: Contains the interface methods and the constructor.</li> <li>Protected Section: Contains data members for configuration, URL, client, and call logger.</li> <li>Private Section: Contains the implementation details of the methods.</li> </ul>"},{"location":"Mistral%20Small%203/ZCL_LLM_HTTP_CLIENT_WRAPPER_CLAS/#key-interactions","title":"Key Interactions","text":"<ol> <li>Initialization:</li> <li>The constructor initializes the client and provider configurations.</li> <li>It retrieves the call logger implementation using a Business Add-In (BADI).</li> <li>It creates an HTTP client using the destination specified in the provider configuration.</li> <li> <p>If the destination is not found or there is an error, it raises a validation exception.</p> </li> <li> <p>Header and URL Setting:</p> </li> <li>The <code>set_header</code> method sets a header on the HTTP request.</li> <li> <p>The <code>set_url</code> method sets the URL for the HTTP request.</p> </li> <li> <p>Communication:</p> </li> <li>The <code>communicate</code> method sends an HTTP POST request with a JSON content type.</li> <li>It sets the request URI if a URL is provided.</li> <li>It sends the request and receives the response.</li> <li>It logs the request and response details using the call logger.</li> <li> <p>If there is an error during communication, it raises an HTTP error exception.</p> </li> <li> <p>Client Management:</p> </li> <li>The <code>get_client</code> method returns a new instance of the HTTP client wrapper.</li> <li>The <code>close_client</code> method closes the HTTP client, ignoring any exceptions that occur during the process.</li> </ol>"},{"location":"Mistral%20Small%203/ZCL_LLM_HTTP_CLIENT_WRAPPER_CLAS/#logic-flow","title":"Logic Flow","text":"<p>The following Mermaid diagram illustrates the logic flow of the <code>communicate</code> method:</p> <pre><code>graph TD\n    A[Start] --&gt; B[Set HTTP Method to POST]\n    B --&gt; C[Set Content-Type Header]\n    C --&gt; D[Check if URL is set]\n    D --&gt;|Yes| E[Set Request URI]\n    D --&gt;|No| F[Skip Setting URI]\n    E --&gt; F\n    F --&gt; G[Set Request Data]\n    G --&gt; H[Send Request]\n    H --&gt; I[Check Response Code]\n    I --&gt;|Success| J[Receive Response]\n    I --&gt;|Failure| K[Get Last Error]\n    J --&gt; L[Log Request and Response]\n    K --&gt; M[Raise HTTP Error]\n    L --&gt; N[End]\n    M --&gt; N</code></pre> <p>This diagram shows the sequence of operations performed during an HTTP communication, including setting headers, sending the request, receiving the response, and handling errors.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_OPTIONS_CLAS/","title":"Class ZCL_LLM_OPTIONS","text":"<p>AI Generated documentation.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_OPTIONS_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_options</code> class is designed to manage and validate various parameters for a language model. It provides a set of public methods to set and get different configuration options, ensuring that the values fall within specified ranges. The class implements the <code>zif_llm_options</code> interface, which defines the methods for setting and getting parameters.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_OPTIONS_CLAS/#public-methods","title":"Public Methods","text":"<ul> <li>set_temperature: Sets the temperature value, ensuring it falls within the range [0, 2].</li> <li>set_top_p: Sets the top_p value, ensuring it falls within the range [0, 1].</li> <li>set_top_k: Sets the top_k value, ensuring it is at least 1.</li> <li>set_seed: Sets the seed value, ensuring it is non-negative.</li> <li>set_frequency_penalty: Sets the frequency penalty value, ensuring it falls within the range [-2, 2].</li> <li>set_presence_penalty: Sets the presence penalty value, ensuring it falls within the range [-2, 2].</li> <li>set_min_p: Sets the min_p value, ensuring it falls within the range [0, 1].</li> <li>set_top_a: Sets the top_a value, ensuring it falls within the range [0, 1].</li> <li>set_custom_parameters: Sets custom parameters, allowing for multiple key-value pairs.</li> <li>get_parameters: Retrieves all parameters set in the class.</li> </ul>"},{"location":"Mistral%20Small%203/ZCL_LLM_OPTIONS_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li>zif_llm_options: Interface that defines the methods for setting and getting parameters.</li> <li>zcx_llm_validation: Exception class used for validation errors.</li> <li>zllm_keyvalues: Internal table type used to store key-value pairs of parameters.</li> </ul>"},{"location":"Mistral%20Small%203/ZCL_LLM_OPTIONS_CLAS/#details","title":"Details","text":"<p>The <code>zcl_llm_options</code> class uses internal methods to validate and set parameters, ensuring that the values adhere to specified constraints. The class maintains a table of parameters (<code>int_parameters</code>) to store key-value pairs.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_OPTIONS_CLAS/#internal-methods","title":"Internal Methods","text":"<ul> <li>validate_range_float: Validates a floating-point value to ensure it falls within a specified range.</li> <li>validate_range_int: Validates an integer value to ensure it falls within a specified range.</li> <li>set_parameter: Adds or updates a parameter in the <code>int_parameters</code> table.</li> </ul>"},{"location":"Mistral%20Small%203/ZCL_LLM_OPTIONS_CLAS/#logic-flow","title":"Logic Flow","text":"<p>The class follows a straightforward logic flow for setting parameters:</p> <ol> <li>Validation: Each parameter is validated using <code>validate_range_float</code> or <code>validate_range_int</code> methods.</li> <li>Setting Parameter: If the value is valid, it is set using the <code>set_parameter</code> method.</li> <li>Exception Handling: If the value is invalid, an exception of type <code>zcx_llm_validation</code> is raised.</li> </ol>"},{"location":"Mistral%20Small%203/ZCL_LLM_OPTIONS_CLAS/#interaction-with-foreign-objects","title":"Interaction with Foreign Objects","text":"<p>The class interacts with the <code>zif_llm_options</code> interface to define its public methods. It also uses the <code>zcx_llm_validation</code> exception class for validation errors and the <code>zllm_keyvalues</code> table type to store parameters.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_OPTIONS_CLAS/#mermaid-diagram-logic-flow-for-setting-a-parameter","title":"Mermaid Diagram: Logic Flow for Setting a Parameter","text":"<pre><code>graph TD\n    A[Start] --&gt; B[Validate Parameter]\n    B --&gt;|Valid| C[Set Parameter]\n    B --&gt;|Invalid| D[Raise Exception]\n    C --&gt; E[End]\n    D --&gt; E[End]</code></pre>"},{"location":"Mistral%20Small%203/ZCL_LLM_OPTIONS_CLAS/#mermaid-diagram-class-structure","title":"Mermaid Diagram: Class Structure","text":"<pre><code>classDiagram\n    class zcl_llm_options {\n        +set_temperature(temperature: decfloat16)\n        +set_top_p(top_p: decfloat16)\n        +set_top_k(top_k: i)\n        +set_seed(seed: i)\n        +set_frequency_penalty(frequency_penalty: decfloat16)\n        +set_presence_penalty(presence_penalty: decfloat16)\n        +set_min_p(min_p: decfloat16)\n        +set_top_a(top_a: decfloat16)\n        +set_custom_parameters(parameters: zllm_keyvalues)\n        +get_parameters(): zllm_keyvalues\n        -validate_range_float(value: decfloat16, min: decfloat16, max: decfloat16)\n        -validate_range_int(value: i, min: i, max: i)\n        -set_parameter(key: string, value: string)\n        -int_parameters: zllm_keyvalues\n    }\n\n    zcl_llm_options --|&gt; zif_llm_options\n    zcl_llm_options --&gt; zcx_llm_validation\n    zcl_llm_options --&gt; zllm_keyvalues</code></pre> <p>This documentation provides a comprehensive overview of the <code>zcl_llm_options</code> class, its public methods, dependencies, and internal logic flow.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_SO_JS_CLAS/","title":"Class ZCL_LLM_SO_JS","text":"<p>AI Generated documentation.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_SO_JS_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_so_js</code> class is designed to generate JSON schemas from ABAP data structures. It implements the <code>zif_llm_so</code> interface and provides methods to handle various data types, including elements, structures, tables, and arrays. The class is structured to process different types of data descriptors and generate corresponding JSON schema representations.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_SO_JS_CLAS/#public-methods","title":"Public Methods","text":"<ul> <li><code>zif_llm_so~get_datatype</code>: Returns the data descriptor.</li> <li><code>zif_llm_so~get_schema</code>: Returns the generated JSON schema.</li> <li><code>zif_llm_so~set_schema</code>: Sets the schema and initializes the process to generate the JSON schema.</li> </ul>"},{"location":"Mistral%20Small%203/ZCL_LLM_SO_JS_CLAS/#dependencies","title":"Dependencies","text":"<p>The class depends on the following:</p> <ul> <li><code>zif_llm_so</code>: Interface that defines the methods for schema generation.</li> <li><code>cl_abap_typedescr</code>: Class for type descriptors in ABAP.</li> <li><code>cl_abap_structdescr</code>: Class for structure descriptors in ABAP.</li> <li><code>cl_abap_tabledescr</code>: Class for table descriptors in ABAP.</li> <li><code>cl_abap_elemdescr</code>: Class for element descriptors in ABAP.</li> <li><code>cl_abap_datadescr</code>: Class for data descriptors in ABAP.</li> <li><code>cl_abap_format</code>: Class for formatting in ABAP.</li> <li><code>zcx_llm_validation</code>: Exception class for validation errors.</li> </ul>"},{"location":"Mistral%20Small%203/ZCL_LLM_SO_JS_CLAS/#details","title":"Details","text":"<p>The class <code>zcl_llm_so_js</code> is designed to handle the generation of JSON schemas from ABAP data structures. It processes different types of data descriptors and generates the corresponding JSON schema. The main interactions and logic flow can be visualized using a Mermaid diagram.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_SO_JS_CLAS/#logic-flow","title":"Logic Flow","text":"<pre><code>graph TD\n    A[zif_llm_so~set_schema] --&gt; B[Initialize Descriptions and Data Descriptor]\n    B --&gt; C[Start Schema Generation]\n    C --&gt; D[Process Type Descriptor]\n    D --&gt; E[Process Structure Descriptor]\n    E --&gt; F[Process Table Descriptor]\n    F --&gt; G[Process Element Descriptor]\n    G --&gt; H[Generate JSON Schema]\n    H --&gt; I[Return JSON Schema]</code></pre>"},{"location":"Mistral%20Small%203/ZCL_LLM_SO_JS_CLAS/#interaction-with-foreign-objects","title":"Interaction with Foreign Objects","text":"<p>The class interacts with various ABAP classes to handle different types of data descriptors:</p> <ul> <li><code>cl_abap_typedescr</code>: Used to determine the kind of type descriptor (structure, table, element).</li> <li><code>cl_abap_structdescr</code>: Used to process structure descriptors and their components.</li> <li><code>cl_abap_tabledescr</code>: Used to process table descriptors and their line types.</li> <li><code>cl_abap_elemdescr</code>: Used to process element descriptors and their types.</li> <li><code>cl_abap_datadescr</code>: Used to get the data descriptor for the schema generation process.</li> <li><code>cl_abap_format</code>: Used for formatting JSON strings.</li> <li><code>zcx_llm_validation</code>: Raised for unsupported types or invalid elements.</li> </ul>"},{"location":"Mistral%20Small%203/ZCL_LLM_SO_JS_CLAS/#key-methods","title":"Key Methods","text":"<ul> <li><code>process_type</code>: Determines the type of descriptor and calls the appropriate method (<code>process_structure</code>, <code>process_table</code>, <code>process_element</code>).</li> <li><code>process_structure</code>: Handles structure descriptors, processes each component, and generates the JSON schema for the structure.</li> <li><code>process_table</code>: Handles table descriptors, processes the line type, and generates the JSON schema for the table.</li> <li><code>process_element</code>: Handles element descriptors, determines the type (integer, number, string, boolean), and generates the JSON schema for the element.</li> <li><code>append_to_schema</code>: Appends content to the schema string.</li> <li><code>get_enum_values</code>: Generates a string of enum values for the JSON schema.</li> <li><code>get_field_info</code>: Retrieves field information based on name and path.</li> <li><code>get_path</code>: Generates the path for a field.</li> </ul>"},{"location":"Mistral%20Small%203/ZCL_LLM_SO_JS_CLAS/#error-handling","title":"Error Handling","text":"<p>The class raises <code>zcx_llm_validation</code> exceptions for unsupported types or invalid elements. This ensures that only valid data types are processed and included in the JSON schema.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_SO_JS_CLAS/#example-use-case","title":"Example Use Case","text":"<p>An example use case would involve setting the schema with a data descriptor and retrieving the generated JSON schema. This process involves initializing the descriptions and data descriptor, processing the type descriptor, and generating the JSON schema.</p> <pre><code>DATA: lo_schema TYPE REF TO zcl_llm_so_js,\n      lo_data_desc TYPE REF TO cl_abap_datadescr,\n      lv_schema TYPE string.\n\n\" Initialize data descriptor\nlo_data_desc = ... \" (some initialization code)\n\n\" Create schema object\nCREATE OBJECT lo_schema.\n\n\" Set schema\nlo_schema-&gt;set_schema( descriptions = ... data_desc = lo_data_desc ).\n\n\" Get schema\nlv_schema = lo_schema-&gt;get_schema( ).\n</code></pre> <p>This overview provides a comprehensive understanding of the <code>zcl_llm_so_js</code> class, its public methods, dependencies, and detailed interactions with foreign objects.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_STATISTICS_CLAS/","title":"Class ZCL_LLM_STATISTICS","text":"<p>AI Generated documentation.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_STATISTICS_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_statistics</code> class is designed to manage and add statistical data, implementing the <code>zif_llm_statistics</code> interface. The class provides a public method <code>add</code> to insert statistical records and a constructor to initialize the class with the active status from the <code>zllm_system</code> table.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_STATISTICS_CLAS/#public-methods","title":"Public Methods","text":"<ul> <li>add: This method inserts a statistical record into the <code>zllm_statistics</code> table. It checks the <code>active</code> status before performing the insertion.</li> <li>constructor: This method initializes the class by retrieving the <code>stat_active</code> value from the <code>zllm_system</code> table and setting the <code>active</code> attribute accordingly.</li> </ul>"},{"location":"Mistral%20Small%203/ZCL_LLM_STATISTICS_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li>Interface: <code>zif_llm_statistics</code></li> <li>Tables: <code>zllm_statistics</code>, <code>zllm_system</code></li> </ul>"},{"location":"Mistral%20Small%203/ZCL_LLM_STATISTICS_CLAS/#details","title":"Details","text":"<p>The class <code>zcl_llm_statistics</code> interacts with the <code>zllm_system</code> table to determine if statistical data should be processed. The <code>active</code> attribute, which is set during the class initialization, controls whether the <code>add</code> method performs its insertion operation.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_STATISTICS_CLAS/#class-diagram","title":"Class Diagram","text":"<pre><code>classDiagram\n    class zcl_llm_statistics {\n        -active: sap_bool\n        +constructor()\n        +add(record: zllm_statistics)\n    }\n\n    zcl_llm_statistics --&gt; zif_llm_statistics : implements\n    zcl_llm_statistics --&gt; zllm_system : reads\n    zcl_llm_statistics --&gt; zllm_statistics : writes</code></pre>"},{"location":"Mistral%20Small%203/ZCL_LLM_STATISTICS_CLAS/#logic-flow","title":"Logic Flow","text":"<p>The logic flow of the <code>zcl_llm_statistics</code> class can be visualized as follows:</p> <pre><code>graph TD\n    A[Constructor] --&gt; B[Read stat_active from zllm_system]\n    B --&gt; C[Set active attribute]\n    D[add Method] --&gt; E[Check if active]\n    E -- No --&gt; F[Return]\n    E -- Yes --&gt; G[Insert record into zllm_statistics]</code></pre>"},{"location":"Mistral%20Small%203/ZCL_LLM_STATISTICS_CLAS/#interaction-with-tables","title":"Interaction with Tables","text":"<p>The class interacts with two main tables:</p> <ul> <li>zllm_system: Read operation to retrieve the <code>stat_active</code> value during class initialization.</li> <li>zllm_statistics: Write operation to insert statistical records when the <code>add</code> method is called and the <code>active</code> status is true.</li> </ul>"},{"location":"Mistral%20Small%203/ZCL_LLM_TEMPLATE_PARSER_CLAS/","title":"Class ZCL_LLM_TEMPLATE_PARSER","text":"<p>AI Generated documentation.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_TEMPLATE_PARSER_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_template_parser</code> class is designed to parse and render templates based on a limited Jinja2-like syntax. It provides methods to add templates, render them with a given context, and handle various control structures and variable substitutions. The class is particularly useful for generating dynamic content by embedding variables and control logic within templates.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_TEMPLATE_PARSER_CLAS/#public-methods","title":"Public Methods","text":"<ol> <li>Constructor:</li> <li> <p>Initializes the template parser with an empty list of templates.</p> </li> <li> <p>add_template:</p> </li> <li>Purpose: Adds or replaces a template with a given name and content.</li> <li>Parameters:<ul> <li><code>name</code>: Name of the template.</li> <li><code>content</code>: Content of the template.</li> <li><code>replace</code>: Boolean flag to determine if an existing template with the same name should be replaced.</li> </ul> </li> <li> <p>Raises: <code>zcx_llm_template_parser</code> if template parsing fails.</p> </li> <li> <p>render:</p> </li> <li>Purpose: Renders a template with the given name using the provided context.</li> <li>Parameters:<ul> <li><code>template_name</code>: Name of the template to render.</li> <li><code>context</code>: Data context for variable resolution.</li> </ul> </li> <li>Returns: Rendered template string.</li> <li>Raises: <code>zcx_llm_template_parser</code> if rendering fails.</li> </ol>"},{"location":"Mistral%20Small%203/ZCL_LLM_TEMPLATE_PARSER_CLAS/#dependencies","title":"Dependencies","text":"<p>The class does not have any external dependencies beyond standard ABAP types and classes. It relies on internal methods and data structures to manage templates and their rendering.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_TEMPLATE_PARSER_CLAS/#details","title":"Details","text":""},{"location":"Mistral%20Small%203/ZCL_LLM_TEMPLATE_PARSER_CLAS/#internal-workflow","title":"Internal Workflow","text":"<p>The internal workflow of the <code>zcl_llm_template_parser</code> class involves several key steps:</p> <ol> <li>Template Addition:</li> <li> <p>Templates are added using the <code>add_template</code> method. If a template with the same name already exists and the <code>replace</code> flag is set to <code>true</code>, the existing template is replaced.</p> </li> <li> <p>Tokenization:</p> </li> <li> <p>The <code>tokenize</code> method converts the template content into a sequence of tokens. It handles different types of tokens such as text, variables, control structures, and comments.</p> </li> <li> <p>Parsing:</p> </li> <li> <p>The <code>parse_tokens</code> method processes the tokens and replaces variables with values from the provided context. It handles control structures like loops and conditionals.</p> </li> <li> <p>Variable Resolution:</p> </li> <li> <p>The <code>resolve_variable</code> method resolves variable paths to their values. It supports nested structures and table indices.</p> </li> <li> <p>Control Structures:</p> </li> <li>The class handles various control structures such as <code>if</code>, <code>else</code>, <code>elif</code>, <code>for</code>, and <code>endfor</code>. These are managed using a control stack to keep track of the current state of the parsing process.</li> </ol>"},{"location":"Mistral%20Small%203/ZCL_LLM_TEMPLATE_PARSER_CLAS/#key-methods","title":"Key Methods","text":"<ol> <li>tokenize:</li> <li>Converts the template string into a sequence of tokens.</li> <li> <p>Handles different token types and removes comments.</p> </li> <li> <p>parse_tokens:</p> </li> <li>Processes the tokens and replaces variables with values from the context.</li> <li> <p>Manages control structures and handles nested loops.</p> </li> <li> <p>resolve_variable:</p> </li> <li>Resolves variable paths to their values.</li> <li> <p>Supports nested structures and table indices.</p> </li> <li> <p>evaluate_condition_true:</p> </li> <li>Evaluates conditions in control structures.</li> <li> <p>Supports logical operators and comparison operators.</p> </li> <li> <p>apply_filter:</p> </li> <li>Applies filters to variable values.</li> <li> <p>Supports filters like <code>upper</code>, <code>lower</code>, <code>capitalize</code>, and <code>default</code>.</p> </li> <li> <p>format_table:</p> </li> <li>Formats tables as strings.</li> <li>Supports elementary types, structures, and nested tables.</li> </ol>"},{"location":"Mistral%20Small%203/ZCL_LLM_TEMPLATE_PARSER_CLAS/#logic-flow","title":"Logic Flow","text":"<p>The following Mermaid diagram illustrates the logic flow of the <code>zcl_llm_template_parser</code> class:</p> <pre><code>graph TD\n    A[add_template] --&gt; B[tokenize]\n    B --&gt; C[parse_tokens]\n    C --&gt; D[resolve_variable]\n    C --&gt; E[evaluate_condition_true]\n    C --&gt; F[apply_filter]\n    C --&gt; G[format_table]\n    C --&gt; H[handle_conditional]\n    C --&gt; I[handle_for_loop]\n    C --&gt; J[handle_endfor]\n    C --&gt; K[process_token]\n    C --&gt; L[check_control_stack_conditions]\n    C --&gt; M[handle_nested_for_loop]\n    C --&gt; N[handle_endif]\n    C --&gt; O[process_loop_content]\n    C --&gt; P[render]</code></pre>"},{"location":"Mistral%20Small%203/ZCL_LLM_TEMPLATE_PARSER_CLAS/#interaction-with-foreign-objects","title":"Interaction with Foreign Objects","text":"<p>The class interacts with the following foreign objects:</p> <ul> <li>ABAP Data Types: The class uses standard ABAP data types to define templates and tokens.</li> <li>ABAP Classes: The class uses internal methods and data structures to manage templates and their rendering.</li> <li>ABAP Tables: The class uses internal tables to store templates and tokens.</li> </ul>"},{"location":"Mistral%20Small%203/ZCL_LLM_TEMPLATE_PARSER_CLAS/#error-handling","title":"Error Handling","text":"<p>The class raises exceptions of type <code>zcx_llm_template_parser</code> for various error conditions, including unclosed tokens, invalid paths, unclosed control structures, and variable resolution errors. This ensures that any issues during template parsing or rendering are properly handled and reported.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_TOOL_CALCULATOR_CLAS/","title":"Class ZCL_LLM_TOOL_CALCULATOR","text":"<p>AI Generated documentation.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_TOOL_CALCULATOR_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_tool_calculator</code> class is designed to evaluate mathematical expressions. It provides a robust interface for parsing and evaluating expressions involving addition, subtraction, multiplication, division, power, and modulo operations. The class implements the <code>zif_llm_tool</code> interface, which defines the structure and behavior of the calculator tool.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_TOOL_CALCULATOR_CLAS/#public-methods","title":"Public Methods","text":"<ol> <li><code>get_tool_details</code>: Returns details about the calculator tool, including its name, type, description, and parameters.</li> <li><code>execute</code>: Evaluates a given mathematical expression and returns the result. It handles exceptions for invalid expressions and division by zero.</li> <li><code>get_result</code>: Retrieves the result of the last executed calculation.</li> </ol>"},{"location":"Mistral%20Small%203/ZCL_LLM_TOOL_CALCULATOR_CLAS/#main-interactions","title":"Main Interactions","text":"<ul> <li>Expression Evaluation: The class tokenizes the input expression, processes it using the Shunting Yard algorithm, and evaluates the resulting Reverse Polish Notation (RPN).</li> <li>Error Handling: The class raises specific exceptions for invalid expressions, division by zero, and other arithmetic errors.</li> <li>Tool Details: Provides metadata about the calculator tool, including its name, type, and description.</li> </ul>"},{"location":"Mistral%20Small%203/ZCL_LLM_TOOL_CALCULATOR_CLAS/#dependencies","title":"Dependencies","text":"<p>The class depends on the <code>zif_llm_tool</code> interface for defining the structure and behavior of the calculator tool. It also uses standard ABAP exceptions like <code>cx_sy_zerodivide</code>, <code>cx_sy_arithmetic_error</code>, and <code>cx_sy_conversion_no_number</code> for error handling.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_TOOL_CALCULATOR_CLAS/#details","title":"Details","text":""},{"location":"Mistral%20Small%203/ZCL_LLM_TOOL_CALCULATOR_CLAS/#internal-methods-and-logic-flow","title":"Internal Methods and Logic Flow","text":"<p>The class employs several internal methods to handle the evaluation of mathematical expressions. Below is a detailed breakdown of the key methods and their interactions:</p> <ol> <li><code>evaluate_expression</code>:</li> <li>Cleans the input expression by removing spaces.</li> <li>Tokenizes the expression.</li> <li> <p>Evaluates the tokens to produce the final result.</p> </li> <li> <p><code>tokenize</code>:</p> </li> <li>Converts the input expression into a list of tokens, distinguishing between numbers and operators.</li> <li> <p>Handles special cases like negative numbers and the <code>MOD</code> operator.</p> </li> <li> <p><code>get_operator_precedence</code>:</p> </li> <li> <p>Determines the precedence of operators for correct evaluation order.</p> </li> <li> <p><code>evaluate_tokens</code>:</p> </li> <li>Implements the Shunting Yard algorithm to convert the infix expression to RPN.</li> <li> <p>Evaluates the RPN expression to produce the final result.</p> </li> <li> <p><code>process_operator</code>:</p> </li> <li> <p>Manages the operator stack during the Shunting Yard algorithm.</p> </li> <li> <p><code>evaluate_rpn</code>:</p> </li> <li> <p>Evaluates the RPN expression using a value stack.</p> </li> <li> <p><code>apply_operator</code>:</p> </li> <li>Applies the specified operator to two operands, handling special cases like division by zero and negative exponents.</li> </ol>"},{"location":"Mistral%20Small%203/ZCL_LLM_TOOL_CALCULATOR_CLAS/#mermaid-diagram-logic-flow","title":"Mermaid Diagram: Logic Flow","text":"<pre><code>graph TD\n    A[Input Expression] --&gt; B[Clean Expression]\n    B --&gt; C[Tokenize Expression]\n    C --&gt; D[Evaluate Tokens]\n    D --&gt; E[Evaluate RPN]\n    E --&gt; F[Result]\n\n    subgraph Shunting Yard Algorithm\n        D --&gt; G[Process Operator]\n        G --&gt; H[Operator Stack]\n        G --&gt; I[Output Queue]\n    end\n\n    subgraph Error Handling\n        C --&gt; J[Invalid Expression]\n        J --&gt; K[Raise Exception]\n        E --&gt; L[Division by Zero]\n        L --&gt; K\n    end</code></pre>"},{"location":"Mistral%20Small%203/ZCL_LLM_TOOL_CALCULATOR_CLAS/#interaction-with-foreign-objects","title":"Interaction with Foreign Objects","text":"<ul> <li><code>zif_llm_tool</code> Interface: The class implements this interface to define the calculator tool's behavior and structure.</li> <li>ABAP Exceptions: The class uses standard ABAP exceptions to handle errors gracefully, ensuring robust error handling.</li> </ul>"},{"location":"Mistral%20Small%203/ZCL_LLM_TOOL_CALCULATOR_CLAS/#data-structures","title":"Data Structures","text":"<ul> <li><code>calculation_input</code>: Defines the input structure for the calculator, containing the expression to be evaluated.</li> <li><code>calculation_output</code>: Defines the output structure, containing the result of the evaluation.</li> <li><code>token</code>: Represents a token in the expression, distinguishing between numbers and operators.</li> <li><code>tokens</code>: A table of tokens used during the evaluation process.</li> </ul> <p>This detailed overview provides a comprehensive understanding of the <code>zcl_llm_tool_calculator</code> class, its functionality, and its interactions with other components.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_TOOL_ECHO_CLAS/","title":"Class ZCL_LLM_TOOL_ECHO","text":"<p>AI Generated documentation.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_TOOL_ECHO_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_tool_echo</code> class is a final, public class that implements the <code>zif_llm_tool</code> interface. It provides functionality for handling tool details and executing operations related to a tool. The class includes the following public methods:</p> <ul> <li>Constructor: Initializes the class with tool details.</li> <li>get_tool_details: Returns the tool details.</li> <li>execute: Executes the tool and returns the result.</li> </ul>"},{"location":"Mistral%20Small%203/ZCL_LLM_TOOL_ECHO_CLAS/#dependencies","title":"Dependencies","text":"<p>The class depends on the <code>zif_llm_tool</code> interface, which defines the methods that must be implemented.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_TOOL_ECHO_CLAS/#details","title":"Details","text":"<p>The <code>zcl_llm_tool_echo</code> class is designed to echo tool details and execute operations. The class uses the following internal data:</p> <ul> <li><code>tool_details</code>: Stores the details of the tool.</li> <li><code>response_data</code>: Holds the response data after execution.</li> <li><code>name</code>: The name of the tool.</li> <li><code>tool_call_id</code>: The ID of the tool call.</li> </ul>"},{"location":"Mistral%20Small%203/ZCL_LLM_TOOL_ECHO_CLAS/#class-diagram","title":"Class Diagram","text":"<pre><code>classDiagram\n    class zcl_llm_tool_echo {\n        +constructor(tool_details: zif_llm_tool=&gt;tool_details)\n        +get_tool_details() zif_llm_tool=&gt;tool_details\n        +execute() zif_llm_tool=&gt;result\n        -tool_details: zif_llm_tool=&gt;tool_details\n        -response_data: REF TO data\n        -name: string\n        -tool_call_id: string\n    }\n\n    zcl_llm_tool_echo --|&gt; zif_llm_tool</code></pre>"},{"location":"Mistral%20Small%203/ZCL_LLM_TOOL_ECHO_CLAS/#method-details","title":"Method Details","text":""},{"location":"Mistral%20Small%203/ZCL_LLM_TOOL_ECHO_CLAS/#constructor","title":"Constructor","text":"<p>The constructor initializes the class with the provided tool details.</p> <pre><code>graph TD\n    A[Constructor] --&gt; B[Initialize tool_details]</code></pre>"},{"location":"Mistral%20Small%203/ZCL_LLM_TOOL_ECHO_CLAS/#get_tool_details","title":"get_tool_details","text":"<p>This method returns the tool details stored in the class.</p> <pre><code>graph TD\n    A[get_tool_details] --&gt; B[Return tool_details]</code></pre>"},{"location":"Mistral%20Small%203/ZCL_LLM_TOOL_ECHO_CLAS/#execute","title":"execute","text":"<p>This method executes the tool and returns the result, including the response data, tool name, and tool call ID.</p> <pre><code>graph TD\n    A[execute] --&gt; B[Set response_data]\n    B --&gt; C[Set tool_call_id]\n    C --&gt; D[Return result-data, result-name, result-tool_call_id]</code></pre> <p>The <code>execute</code> method sets the <code>response_data</code> and <code>tool_call_id</code>, and then returns these values along with the tool name.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_TOOL_PARSER_CLAS/","title":"Class ZCL_LLM_TOOL_PARSER","text":"<p>AI Generated documentation.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_TOOL_PARSER_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_tool_parser</code> class is designed to parse various data structures and generate a JSON schema representation. This class implements the <code>zif_llm_tool_parser</code> interface and provides methods to handle different types of data structures, including single elements, simple structures, nested structures, tables, and arrays. The class is particularly useful for converting ABAP data types into a JSON schema format, which can be used for various purposes such as data validation, documentation, or integration with other systems.</p>"},{"location":"Mistral%20Small%203/ZCL_LLM_TOOL_PARSER_CLAS/#public-methods","title":"Public Methods","text":"<ul> <li><code>pre_schema</code>: Called before the schema generation process starts.</li> <li><code>post_schema</code>: Called after the schema generation process is completed.</li> <li><code>pre_object</code>: Called before processing an object.</li> <li><code>post_object</code>: Called after processing an object.</li> <li><code>pre_array</code>: Called before processing an array.</li> <li><code>post_array</code>: Called after processing an array.</li> <li><code>process_type</code>: Processes a given type descriptor and generates the corresponding JSON schema.</li> <li><code>process_structure</code>: Processes a structure descriptor and generates the corresponding JSON schema.</li> <li><code>process_table</code>: Processes a table descriptor and generates the corresponding JSON schema.</li> <li><code>process_element</code>: Processes an element descriptor and generates the corresponding JSON schema.</li> <li><code>get_field_info</code>: Retrieves field information based on the provided name and path.</li> <li><code>append_to_schema</code>: Appends content to the schema string.</li> <li><code>get_path</code>: Generates a path string based on the current path and field name.</li> <li><code>get_enum_values</code>: Retrieves enum values from a description and formats them as a JSON string.</li> <li><code>zif_llm_tool_parser~parse</code>: Main method to parse the data and generate the JSON schema.</li> </ul>"},{"location":"Mistral%20Small%203/ZCL_LLM_TOOL_PARSER_CLAS/#dependencies","title":"Dependencies","text":"<p>The class depends on several ABAP types and classes, including:</p> <ul> <li><code>cl_abap_typedescr</code>: Used for type descriptors.</li> <li><code>cl_abap_structdescr</code>: Used for structure descriptors.</li> <li><code>cl_abap_tabledescr</code>: Used for table descriptors.</li> <li><code>cl_abap_elemdescr</code>: Used for element descriptors.</li> <li><code>zif_llm_tool_parser</code>: Interface that the class implements.</li> <li><code>zcx_llm_validation</code>: Exception class used for validation errors.</li> <li><code>cl_abap_format</code>: Used for formatting strings.</li> </ul>"},{"location":"Mistral%20Small%203/ZCL_LLM_TOOL_PARSER_CLAS/#details","title":"Details","text":"<p>The <code>zcl_llm_tool_parser</code> class is designed to handle various data structures and convert them into a JSON schema. The class uses a series of methods to process different types of data descriptors and generate the corresponding JSON schema. The main logic flow can be visualized using the following Mermaid diagram:</p> <pre><code>graph TD\n    A[zif_llm_tool_parser~parse] --&gt; B[pre_schema]\n    B --&gt; C[process_type]\n    C --&gt; D[process_structure]\n    C --&gt; E[process_table]\n    C --&gt; F[process_element]\n    D --&gt; G[pre_object]\n    D --&gt; H[process_type]\n    D --&gt; I[post_object]\n    E --&gt; J[pre_array]\n    E --&gt; K[process_type]\n    E --&gt; L[post_array]\n    F --&gt; M[process_element]\n    M --&gt; N[append_to_schema]\n    N --&gt; O[post_schema]\n    O --&gt; P[append_to_schema]\n    P --&gt; Q[return schema]</code></pre>"},{"location":"Mistral%20Small%203/ZCL_LLM_TOOL_PARSER_CLAS/#key-aspects","title":"Key Aspects","text":"<ol> <li>Type Handling: The class handles different types of ABAP data descriptors, including structures, tables, and elements. It raises exceptions for unsupported types.</li> <li>Field Information: The class retrieves and processes field information, including names, paths, and descriptions.</li> <li>Enum Values: The class supports enum values and formats them correctly in the JSON schema.</li> <li>Schema Generation: The class generates a JSON schema by appending content to a schema string. It ensures proper formatting and structure.</li> <li>Exception Handling: The class raises exceptions for unsupported types and invalid data, ensuring robust error handling.</li> </ol>"},{"location":"Mistral%20Small%203/ZCL_LLM_TOOL_PARSER_CLAS/#interaction-with-foreign-objects","title":"Interaction with Foreign Objects","text":"<p>The class interacts with several ABAP classes and types to process different data structures. The main interactions include:</p> <ul> <li><code>cl_abap_typedescr</code>: Used to determine the type of the data descriptor.</li> <li><code>cl_abap_structdescr</code>: Used to process structure descriptors and retrieve components.</li> <li><code>cl_abap_tabledescr</code>: Used to process table descriptors and retrieve table line types.</li> <li><code>cl_abap_elemdescr</code>: Used to process element descriptors and retrieve type information.</li> <li><code>zif_llm_tool_parser</code>: Interface methods are implemented to provide the parsing functionality.</li> <li><code>zcx_llm_validation</code>: Used to raise exceptions for validation errors.</li> </ul> <p>This detailed overview provides a comprehensive understanding of the <code>zcl_llm_tool_parser</code> class, its functionality, and its interactions with other ABAP components.</p>"},{"location":"Mistral%20Small%203/ZCX_LLM_AUTHORIZATION_CLAS/","title":"Class ZCX_LLM_AUTHORIZATION","text":"<p>AI Generated documentation.</p>"},{"location":"Mistral%20Small%203/ZCX_LLM_AUTHORIZATION_CLAS/#overview","title":"Overview","text":"<p>The <code>ZCX_LLM_AUTHORIZATION</code> class is a final, public class that inherits from <code>CX_STATIC_CHECK</code>. It implements two interfaces: <code>IF_T100_DYN_MSG</code> and <code>IF_T100_MESSAGE</code>. The class is designed to handle authorization-related operations, likely within the context of a custom authorization framework. The main public method is the constructor, which initializes the object with optional parameters.</p>"},{"location":"Mistral%20Small%203/ZCX_LLM_AUTHORIZATION_CLAS/#dependencies","title":"Dependencies","text":"<p>The class depends on the following interfaces and classes:</p> <ul> <li><code>CX_STATIC_CHECK</code>: The base class from which <code>ZCX_LLM_AUTHORIZATION</code> inherits.</li> <li><code>IF_T100_DYN_MSG</code>: An interface that the class implements.</li> <li><code>IF_T100_MESSAGE</code>: Another interface that the class implements.</li> </ul>"},{"location":"Mistral%20Small%203/ZCX_LLM_AUTHORIZATION_CLAS/#details","title":"Details","text":"<p>The <code>ZCX_LLM_AUTHORIZATION</code> class contains several constants that define message IDs and numbers, which are likely used for error handling or logging. These constants are grouped into different categories, such as <code>PROVIDER_MAINTENANCE</code>, <code>GET_CLIENT</code>, <code>DECRYPT</code>, and <code>ENCRYPT</code>.</p> <p>The class also defines two data attributes, <code>MSGV1</code> and <code>MSGV2</code>, which are of type <code>SYMSGV</code>. These attributes are likely used to store message values related to the authorization process.</p> <p>The constructor method initializes the object and sets the <code>textid</code> attribute. If the <code>textid</code> parameter is not provided, it defaults to the default text ID defined in the <code>IF_T100_MESSAGE</code> interface.</p> <pre><code>classDiagram\n    class ZCX_LLM_AUTHORIZATION {\n        -PROVIDER_MAINTENANCE: constants\n        -GET_CLIENT: constants\n        -DECRYPT: constants\n        -ENCRYPT: constants\n        -MSGV1: SYMSGV\n        -MSGV2: SYMSGV\n        +constructor(TEXTID, PREVIOUS)\n    }\n\n    ZCX_LLM_AUTHORIZATION --|&gt; CX_STATIC_CHECK\n    ZCX_LLM_AUTHORIZATION ..|&gt; IF_T100_DYN_MSG\n    ZCX_LLM_AUTHORIZATION ..|&gt; IF_T100_MESSAGE</code></pre> <p>The constructor method's logic can be visualized as follows:</p> <pre><code>graph TD\n    A[Start] --&gt; B[Call Super Constructor]\n    B --&gt; C{Is textid Initial?}\n    C -- Yes --&gt; D[Set textid to default]\n    C -- No --&gt; E[Set textid to provided value]\n    D --&gt; F[End]\n    E --&gt; F[End]</code></pre> <p>This diagram illustrates the flow of the constructor method, showing how it initializes the object and sets the <code>textid</code> attribute based on the provided parameters.</p>"},{"location":"Mistral%20Small%203/ZCX_LLM_HTTP_ERROR_CLAS/","title":"Class ZCX_LLM_HTTP_ERROR","text":"<p>AI Generated documentation.</p>"},{"location":"Mistral%20Small%203/ZCX_LLM_HTTP_ERROR_CLAS/#overview","title":"Overview","text":"<p>The <code>ZCX_LLM_HTTP_ERROR</code> class is a final, public class that inherits from <code>CX_STATIC_CHECK</code>. It is designed to handle HTTP-related errors in an SAP ABAP environment. The class implements the <code>IF_T100_MESSAGE</code> interface, which suggests it is used for generating and managing error messages.</p>"},{"location":"Mistral%20Small%203/ZCX_LLM_HTTP_ERROR_CLAS/#public-methods","title":"Public Methods","text":"<ul> <li>CONSTRUCTOR: The constructor method initializes the error object. It accepts optional parameters for the text ID and attributes (ATTR1, ATTR2, ATTR3, ATTR4), and a previous error object.</li> </ul>"},{"location":"Mistral%20Small%203/ZCX_LLM_HTTP_ERROR_CLAS/#details","title":"Details","text":"<p>The <code>ZCX_LLM_HTTP_ERROR</code> class defines several constants that represent different types of HTTP errors. These constants are used to categorize and manage specific error scenarios. The class also includes data attributes (<code>MV_ATTR1</code>, <code>MV_ATTR2</code>, <code>MV_ATTR3</code>, <code>MV_ATTR4</code>) to store additional information related to the error.</p>"},{"location":"Mistral%20Small%203/ZCX_LLM_HTTP_ERROR_CLAS/#error-constants","title":"Error Constants","text":"<p>The class defines four main error constants:</p> <ol> <li>HTTP_CLIENT_NOT_INITIALIZED: Represents an error where the HTTP client is not initialized.</li> <li>HTTP_COMMUNICATION_FAILURE: Represents a failure in HTTP communication.</li> <li>HTTP_PROCESSING_FAILED: Represents a failure in processing an HTTP request.</li> <li>HTTP_OTHERS: A catch-all for other HTTP-related errors.</li> </ol>"},{"location":"Mistral%20Small%203/ZCX_LLM_HTTP_ERROR_CLAS/#constructor-logic","title":"Constructor Logic","text":"<p>The constructor method initializes the error object by calling the superclass constructor and setting the attribute values. If the <code>textid</code> parameter is not provided, it defaults to the default text ID defined in the <code>IF_T100_MESSAGE</code> interface.</p> <pre><code>graph TD\n    A[Constructor Called] --&gt; B[Call Superclass Constructor]\n    B --&gt; C[Set Attribute Values]\n    C --&gt; D[Check textid]\n    D -- Yes --&gt; E[Set Default Text ID]\n    D -- No --&gt; F[Set Provided Text ID]</code></pre>"},{"location":"Mistral%20Small%203/ZCX_LLM_HTTP_ERROR_CLAS/#interaction-with-if_t100_message","title":"Interaction with <code>IF_T100_MESSAGE</code>","text":"<p>The class implements the <code>IF_T100_MESSAGE</code> interface, which is used for generating and managing error messages. This interface likely provides methods for setting and retrieving message details, which are utilized within the <code>ZCX_LLM_HTTP_ERROR</code> class to handle HTTP error messages effectively.</p>"},{"location":"Mistral%20Small%203/ZCX_LLM_TEMPLATE_PARSER_CLAS/","title":"Class ZCX_LLM_TEMPLATE_PARSER","text":"<p>AI Generated documentation.</p>"},{"location":"Mistral%20Small%203/ZCX_LLM_TEMPLATE_PARSER_CLAS/#overview","title":"Overview","text":"<p>The <code>ZCX_LLM_TEMPLATE_PARSER</code> class is a final, public class that inherits from <code>CX_STATIC_CHECK</code>. It implements the interfaces <code>IF_T100_DYN_MSG</code> and <code>IF_T100_MESSAGE</code>. The class is designed to handle template parsing and validation, providing a structured way to manage and report errors during the parsing process. The main public method is the constructor, which initializes the object with optional parameters.</p>"},{"location":"Mistral%20Small%203/ZCX_LLM_TEMPLATE_PARSER_CLAS/#dependencies","title":"Dependencies","text":"<p>The class depends on the following interfaces:</p> <ul> <li><code>IF_T100_DYN_MSG</code></li> <li><code>IF_T100_MESSAGE</code></li> </ul>"},{"location":"Mistral%20Small%203/ZCX_LLM_TEMPLATE_PARSER_CLAS/#details","title":"Details","text":"<p>The class defines a set of constants that represent various error messages, each with a unique message ID and number. These constants are used to standardize error reporting within the class. The class also defines several data attributes (<code>MSGV1</code>, <code>MSGV2</code>, <code>MSGV3</code>, <code>MSGV4</code>) of type <code>SYMSGV</code>, which are likely used to store error messages or related information.</p> <p>The constructor method initializes the object and sets up the error message handling. It takes several optional parameters, including <code>TEXTID</code>, <code>PREVIOUS</code>, <code>MSGV1</code>, and <code>MSGV2</code>. The constructor calls the superclass constructor and then sets the <code>TEXTID</code> and message variables accordingly.</p> <pre><code>classDiagram\n    class ZCX_LLM_TEMPLATE_PARSER {\n        +CONSTRUCTOR(TEXTID: like IF_T100_MESSAGE=&gt;T100KEY, PREVIOUS: like PREVIOUS, MSGV1: type SYMSGV, MSGV2: type SYMSGV)\n        -MSGV1: SYMSGV\n        -MSGV2: SYMSGV\n        -MSGV3: SYMSGV\n        -MSGV4: SYMSGV\n        -zcx_llm_template_parser: CONSTANT\n        -unclosed_token: CONSTANT\n        -unclosed_control_structure: CONSTANT\n        -invalid_variable_path: CONSTANT\n        -invalid_table_index: CONSTANT\n        -unsupported_variable_type: CONSTANT\n        -variable_resolution_error: CONSTANT\n        -condition_evaluation_error: CONSTANT\n        -unknown_filter: CONSTANT\n        -invalid_condition: CONSTANT\n        -invalid_operator: CONSTANT\n        -invalid_loop_syntax: CONSTANT\n        -invalid_loop_collection: CONSTANT\n        -unclosed_loop: CONSTANT\n        -INVALID_ESCAPE_SEQUENCE: CONSTANT\n        -MISMATCHED_TOKEN: CONSTANT\n        -LOOP_INITIALIZATION_ERROR: CONSTANT\n        -UNEXPECTED_ENDFOR: CONSTANT\n        -UNEXPECTED_ELSE: CONSTANT\n        -UNEXPECTED_ENDIF: CONSTANT\n        -UNEXPECTED_ELIF: CONSTANT\n    }\n\n    ZCX_LLM_TEMPLATE_PARSER --|&gt; CX_STATIC_CHECK\n    ZCX_LLM_TEMPLATE_PARSER ..|&gt; IF_T100_DYN_MSG\n    ZCX_LLM_TEMPLATE_PARSER ..|&gt; IF_T100_MESSAGE</code></pre> <p>The constructor logic can be visualized as follows:</p> <pre><code>graph TD\n    A[Start] --&gt; B[Call Superclass Constructor]\n    B --&gt; C{Check if TEXTID is Initial}\n    C -- Yes --&gt; D[Set Default TEXTID]\n    C -- No --&gt; E[Set Provided TEXTID]\n    D --&gt; F[Set MSGV1 and MSGV2]\n    E --&gt; F\n    F --&gt; G[End]</code></pre> <p>This diagram illustrates the flow of the constructor method, showing how it initializes the object and sets the necessary attributes based on the provided parameters.</p>"},{"location":"Mistral%20Small%203/ZCX_LLM_VALIDATION_CLAS/","title":"Class ZCX_LLM_VALIDATION","text":"<p>AI Generated documentation.</p>"},{"location":"Mistral%20Small%203/ZCX_LLM_VALIDATION_CLAS/#overview","title":"Overview","text":"<p>The <code>ZCX_LLM_VALIDATION</code> class is a final class that inherits from <code>CX_DYNAMIC_CHECK</code> and implements the <code>IF_T100_MESSAGE</code> interface. It is designed to handle various validation scenarios and message handling within the SAP system. The class provides a constructor method to initialize its attributes and set up the message handling.</p>"},{"location":"Mistral%20Small%203/ZCX_LLM_VALIDATION_CLAS/#public-methods","title":"Public Methods","text":"<ul> <li>Constructor: Initializes the class with optional parameters for message text ID and attributes. It sets up the message key and attributes based on the provided inputs.</li> </ul>"},{"location":"Mistral%20Small%203/ZCX_LLM_VALIDATION_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li>CX_DYNAMIC_CHECK: The base class from which <code>ZCX_LLM_VALIDATION</code> inherits.</li> <li>IF_T100_MESSAGE: The interface implemented by <code>ZCX_LLM_VALIDATION</code> for message handling.</li> </ul>"},{"location":"Mistral%20Small%203/ZCX_LLM_VALIDATION_CLAS/#details","title":"Details","text":"<p>The <code>ZCX_LLM_VALIDATION</code> class is designed to handle specific validation scenarios and message handling. It defines several constants that represent different error messages, each with a unique message ID and attributes. These constants are used to standardize the error messages and their attributes within the class.</p>"},{"location":"Mistral%20Small%203/ZCX_LLM_VALIDATION_CLAS/#class-structure","title":"Class Structure","text":"<p>The class structure can be visualized as follows:</p> <pre><code>classDiagram\n    class ZCX_LLM_VALIDATION {\n        +CONSTRUCTOR(TEXTID, ATTR1, ATTR2, ATTR3, ATTR4, PREVIOUS)\n        -MV_ATTR1: STRING\n        -MV_ATTR2: STRING\n        -MV_ATTR3: STRING\n        -MV_ATTR4: STRING\n        -UNSUPPORTED_TYPE: CONSTANT\n        -VALUE_OUT_OF_RANGE: CONSTANT\n        -MODEL_DOES_NOT_EXIST: CONSTANT\n        -CLIENT_MODEL_NOT_FOUND: CONSTANT\n        -HTTP_DESTINATION_ERROR: CONSTANT\n        -ENCRYPTION_SETUP: CONSTANT\n        -ENCRYPTION_FAILED: CONSTANT\n        -DECRYPTION_FAILED: CONSTANT\n        -PROVIDER_DOES_NOT_EXIST: CONSTANT\n    }\n\n    ZCX_LLM_VALIDATION --|&gt; CX_DYNAMIC_CHECK\n    ZCX_LLM_VALIDATION ..|&gt; IF_T100_MESSAGE</code></pre>"},{"location":"Mistral%20Small%203/ZCX_LLM_VALIDATION_CLAS/#constructor-details","title":"Constructor Details","text":"<p>The constructor method initializes the class with optional parameters for the message text ID and attributes. It sets up the message key and attributes based on the provided inputs. If the text ID is not provided, it defaults to the default text ID defined in the <code>IF_T100_MESSAGE</code> interface.</p> <pre><code>graph TD\n    A[Constructor] --&gt; B[Initialize Attributes]\n    B --&gt; C[Set Message Key]\n    C --&gt; D[Return]</code></pre>"},{"location":"Mistral%20Small%203/ZCX_LLM_VALIDATION_CLAS/#error-message-constants","title":"Error Message Constants","text":"<p>The class defines several constants that represent different error messages. Each constant includes a message ID, message number, and attributes. These constants are used to standardize the error messages and their attributes within the class.</p> <ul> <li>UNSUPPORTED_TYPE: Represents an unsupported type error.</li> <li>VALUE_OUT_OF_RANGE: Represents a value out of range error.</li> <li>MODEL_DOES_NOT_EXIST: Represents a model does not exist error.</li> <li>CLIENT_MODEL_NOT_FOUND: Represents a client model not found error.</li> <li>HTTP_DESTINATION_ERROR: Represents an HTTP destination error.</li> <li>ENCRYPTION_SETUP: Represents an encryption setup error.</li> <li>ENCRYPTION_FAILED: Represents an encryption failed error.</li> <li>DECRYPTION_FAILED: Represents a decryption failed error.</li> <li>PROVIDER_DOES_NOT_EXIST: Represents a provider does not exist error.</li> </ul> <p>These constants ensure that the error messages are consistent and easily identifiable within the system.</p>"},{"location":"Mistral%20Small%203/ZIF_LLM_AUTH_INTF/","title":"Interface ZIF_LLM_AUTH","text":"<p>AI Generated documentation.</p>"},{"location":"Mistral%20Small%203/ZIF_LLM_AUTH_INTF/#overview","title":"Overview","text":"<p>The <code>ZIF_LLM_AUTH</code> interface provides a set of public methods for performing authorization checks related to provider maintenance, model client retrieval, and secret encryption/decryption. Below is an overview of the public methods:</p> <ul> <li> <p><code>CHECK_PROVIDER_MAINTENANCE</code>: This method performs an authorization check for the call of provider maintenance. It raises an exception of type <code>ZCX_LLM_AUTHORIZATION</code> if the check fails.</p> </li> <li> <p><code>CHECK_GET_CLIENT</code>: This method performs an authorization check for retrieving a model client. It takes a model of type <code>ZLLM_MODEL</code> as an input parameter and raises an exception of type <code>ZCX_LLM_AUTHORIZATION</code> if the check fails.</p> </li> <li> <p><code>CHECK_DECRYPT</code>: This method performs an authorization check to determine if the user is allowed to decrypt a secret. It raises an exception of type <code>ZCX_LLM_AUTHORIZATION</code> if the check fails.</p> </li> <li> <p><code>CHECK_ENCRYPT</code>: This method performs an authorization check to determine if the user is allowed to encrypt a secret. It raises an exception of type <code>ZCX_LLM_AUTHORIZATION</code> if the check fails.</p> </li> </ul>"},{"location":"Mistral%20Small%203/ZIF_LLM_AUTH_INTF/#dependencies","title":"Dependencies","text":"<p>The interface depends on the following exception class:</p> <ul> <li><code>ZCX_LLM_AUTHORIZATION</code>: This exception is raised by the methods in the interface when an authorization check fails.</li> </ul>"},{"location":"Mistral%20Small%203/ZIF_LLM_CALL_LOGGER_INTF/","title":"Interface ZIF_LLM_CALL_LOGGER","text":"<p>AI Generated documentation.</p>"},{"location":"Mistral%20Small%203/ZIF_LLM_CALL_LOGGER_INTF/#overview","title":"Overview","text":"<p>The <code>ZIF_LLM_CALL_LOGGER</code> interface provides a public method for logging calls. This interface is designed to facilitate the addition of log entries, which can be useful for tracking and auditing purposes.</p>"},{"location":"Mistral%20Small%203/ZIF_LLM_CALL_LOGGER_INTF/#public-methods","title":"Public Methods","text":"<ul> <li><code>ADD</code>: This method is used to add an entry to the log. It takes a single import parameter of type <code>ZLLM_CALL_LOG</code>.</li> </ul>"},{"location":"Mistral%20Small%203/ZIF_LLM_CALL_LOGGER_INTF/#dependencies","title":"Dependencies","text":"<p>None</p>"},{"location":"Mistral%20Small%203/ZIF_LLM_CHAT_REQUEST_INTF/","title":"Interface ZIF_LLM_CHAT_REQUEST","text":"<p>AI Generated documentation.</p>"},{"location":"Mistral%20Small%203/ZIF_LLM_CHAT_REQUEST_INTF/#overview","title":"Overview","text":"<p>The <code>ZIF_LLM_CHAT_REQUEST</code> interface provides a structured way to manage chat requests, including adding, retrieving, and clearing messages and tools. It also supports setting tool choices, structured output details, and handling tool results and choices. Below is an overview of the public methods:</p>"},{"location":"Mistral%20Small%203/ZIF_LLM_CHAT_REQUEST_INTF/#message-management","title":"Message Management","text":"<ul> <li>add_message: Adds a single message to the chat request.</li> <li> <p>Importing: <code>message</code> of type <code>ZLLM_MSG</code>.</p> </li> <li> <p>add_messages: Adds multiple messages to the chat request.</p> </li> <li> <p>Importing: <code>messages</code> of type <code>ZLLM_MSGS</code>.</p> </li> <li> <p>get_messages: Retrieves all messages from the chat request.</p> </li> <li> <p>Returning: <code>result</code> of type <code>ZLLM_MSGS</code>.</p> </li> <li> <p>clear_messages: Clears all messages from the chat request.</p> </li> </ul>"},{"location":"Mistral%20Small%203/ZIF_LLM_CHAT_REQUEST_INTF/#tool-management","title":"Tool Management","text":"<ul> <li>add_tool: Adds a single tool to the chat request with an optional tool choice.</li> <li> <p>Importing: <code>tool</code> of type <code>REF TO ZIF_LLM_TOOL</code>, <code>tool_choice</code> of type <code>STRING</code> (default: <code>auto</code>).</p> </li> <li> <p>add_tools: Adds multiple tools to the chat request with an optional tool choice.</p> </li> <li> <p>Importing: <code>tools</code> of type <code>ZLLM_TOOLS</code>, <code>tool_choice</code> of type <code>STRING</code> (default: <code>auto</code>).</p> </li> <li> <p>get_tools: Retrieves all tools from the chat request.</p> </li> <li> <p>Returning: <code>result</code> of type <code>ZLLM_TOOLS</code>.</p> </li> <li> <p>clear_tools: Clears all tools from the chat request.</p> </li> <li> <p>set_tool_choice: Sets the tool choice for the chat request.</p> </li> <li>Importing: <code>tool_choice</code> of type <code>STRING</code>.</li> </ul>"},{"location":"Mistral%20Small%203/ZIF_LLM_CHAT_REQUEST_INTF/#tool-result-and-choice-management","title":"Tool Result and Choice Management","text":"<ul> <li>add_tool_result: Adds the result of a tool to the message.</li> <li> <p>Importing: <code>tool</code> of type <code>REF TO ZIF_LLM_TOOL</code>.</p> </li> <li> <p>add_tool_choices: Adds tool calls to the message list.</p> </li> <li>Importing: <code>choices</code> of type <code>ZLLM_TOOL_CALLS</code>.</li> </ul>"},{"location":"Mistral%20Small%203/ZIF_LLM_CHAT_REQUEST_INTF/#structured-output-management","title":"Structured Output Management","text":"<ul> <li>set_structured_output: Sets structured output details for the chat request.</li> <li> <p>Importing: <code>data_desc</code> of type <code>REF TO CL_ABAP_DATADESCR</code>, <code>descriptions</code> of type <code>ZIF_LLM_SO=&gt;DEF_DESCRIPTIONS</code>, <code>use_structured_output</code> of type <code>SAP_BOOL</code> (default: <code>ABAP_TRUE</code>).</p> </li> <li> <p>set_structured_output_active: Enables or disables the use of structured output.</p> </li> <li>Importing: <code>active</code> of type <code>SAP_BOOL</code>.</li> </ul>"},{"location":"Mistral%20Small%203/ZIF_LLM_CHAT_REQUEST_INTF/#choice-management","title":"Choice Management","text":"<ul> <li>add_choice: Appends an LLM choice to the message list.</li> <li>Importing: <code>choice</code> of type <code>ZLLM_CHOICE</code>.</li> </ul>"},{"location":"Mistral%20Small%203/ZIF_LLM_CHAT_REQUEST_INTF/#internal-and-options-methods","title":"Internal and Options Methods","text":"<ul> <li>get_internal_request: Retrieves the full request details internally.</li> <li> <p>Returning: <code>result</code> of type <code>ZLLM_REQUEST</code>.</p> </li> <li> <p>options: Provides options implementation to set options.</p> </li> <li>Returning: <code>result</code> of type <code>REF TO ZIF_LLM_OPTIONS</code>.</li> </ul>"},{"location":"Mistral%20Small%203/ZIF_LLM_CHAT_REQUEST_INTF/#dependencies","title":"Dependencies","text":"<p>The interface depends on the following types and classes:</p> <ul> <li><code>ZLLM_MSG</code></li> <li><code>ZLLM_MSGS</code></li> <li><code>ZIF_LLM_TOOL</code></li> <li><code>ZLLM_TOOLS</code></li> <li><code>ZLLM_TOOL_CALLS</code></li> <li><code>ZLLM_CHOICE</code></li> <li><code>ZLLM_REQUEST</code></li> <li><code>ZIF_LLM_OPTIONS</code></li> <li><code>ZIF_LLM_SO</code></li> <li><code>CL_ABAP_DATADESCR</code></li> <li><code>SAP_BOOL</code></li> </ul>"},{"location":"Mistral%20Small%203/ZIF_LLM_CLIENT_INTF/","title":"Interface ZIF_LLM_CLIENT","text":"<p>AI Generated documentation.</p>"},{"location":"Mistral%20Small%203/ZIF_LLM_CLIENT_INTF/#overview","title":"Overview","text":"<p>The <code>zif_llm_client</code> interface provides a structured way to interact with a Language Learning Model (LLM) client. It includes public constants defining various roles and public methods for obtaining a new client instance and executing chat requests.</p>"},{"location":"Mistral%20Small%203/ZIF_LLM_CLIENT_INTF/#public-constants","title":"Public Constants","text":"<p>The interface defines four public constants to represent different roles:</p> <ul> <li><code>role_user</code>: Represents a user role.</li> <li><code>role_system</code>: Represents a system role.</li> <li><code>role_assistant</code>: Represents an assistant role.</li> <li><code>role_tool</code>: Represents a tool role.</li> </ul>"},{"location":"Mistral%20Small%203/ZIF_LLM_CLIENT_INTF/#public-methods","title":"Public Methods","text":""},{"location":"Mistral%20Small%203/ZIF_LLM_CLIENT_INTF/#class-methods","title":"Class Methods","text":"<ul> <li>get_client</li> <li>Purpose: Obtains a new client instance based on the provided configuration.</li> <li>Parameters:<ul> <li><code>client_config</code>: Configuration for the client.</li> <li><code>provider_config</code>: Configuration for the provider.</li> </ul> </li> <li>Returns: A reference to an instance of <code>zif_llm_client</code>.</li> <li>Exceptions:<ul> <li><code>zcx_llm_validation</code>: Raised for validation errors.</li> <li><code>zcx_llm_authorization</code>: Raised for authorization errors.</li> </ul> </li> </ul>"},{"location":"Mistral%20Small%203/ZIF_LLM_CLIENT_INTF/#instance-methods","title":"Instance Methods","text":"<ul> <li>chat</li> <li>Purpose: Executes a chat request.</li> <li>Parameters:<ul> <li><code>request</code>: A reference to a <code>zif_llm_chat_request</code> object containing the chat request details.</li> </ul> </li> <li> <p>Returns: A <code>zllm_response</code> object containing the response from the chat execution.</p> </li> <li> <p>new_request</p> </li> <li>Purpose: Creates a new chat request.</li> <li>Returns: A reference to a new <code>zif_llm_chat_request</code> object.</li> </ul>"},{"location":"Mistral%20Small%203/ZIF_LLM_CLIENT_INTF/#dependencies","title":"Dependencies","text":"<p>The interface depends on the following types and exceptions:</p> <ul> <li><code>zllm_role</code>: Type used for role constants.</li> <li><code>zllm_clnt_config</code>: Type for client configuration.</li> <li><code>zllm_providers</code>: Type for provider configuration.</li> <li><code>zif_llm_client</code>: The interface itself, used for returning client instances.</li> <li><code>zif_llm_chat_request</code>: Type for chat request objects.</li> <li><code>zllm_response</code>: Type for chat response objects.</li> <li><code>zcx_llm_validation</code>: Exception for validation errors.</li> <li><code>zcx_llm_authorization</code>: Exception for authorization errors.</li> </ul>"},{"location":"Mistral%20Small%203/ZIF_LLM_CLIENT_JSON_SCHEMA_INTF/","title":"Interface ZIF_LLM_CLIENT_JSON_SCHEMA","text":"<p>AI Generated documentation.</p>"},{"location":"Mistral%20Small%203/ZIF_LLM_CLIENT_JSON_SCHEMA_INTF/#overview","title":"Overview","text":"<p>The <code>ZIF_LLM_CLIENT_JSON_SCHEMA</code> interface defines a structured approach to creating and managing JSON schemas. It includes public methods for creating a new schema instance, adding properties, arrays, and objects, and generating the final schema. The interface supports only one level of nesting for properties, arrays, and objects.</p>"},{"location":"Mistral%20Small%203/ZIF_LLM_CLIENT_JSON_SCHEMA_INTF/#public-methods","title":"Public Methods","text":"<ul> <li><code>new_format</code>: Creates a new instance of the JSON schema.</li> <li>Parameters:<ul> <li><code>title</code> (TYPE <code>string</code>): The title of the JSON schema.</li> </ul> </li> <li> <p>Returns:</p> <ul> <li><code>result</code> (TYPE <code>REF TO zif_llm_client_json_schema</code>): A reference to the newly created JSON schema instance.</li> </ul> </li> <li> <p><code>add_property</code>: Adds a property to the JSON schema. Only one level of nesting is supported.</p> </li> <li>Parameters:<ul> <li><code>property</code> (TYPE <code>property_def</code>): The property to add.</li> </ul> </li> <li> <p>Exceptions:</p> <ul> <li><code>zcx_llm_validation</code>: Raised if the property addition fails validation.</li> </ul> </li> <li> <p><code>add_array</code>: Adds an array of a specific object to the JSON schema. Only one level of nesting is supported.</p> </li> <li>Parameters:<ul> <li><code>array</code> (TYPE <code>array_def</code>): The array to add.</li> </ul> </li> <li> <p>Exceptions:</p> <ul> <li><code>zcx_llm_validation</code>: Raised if the array addition fails validation.</li> </ul> </li> <li> <p><code>add_object</code>: Adds an object with parameters to the JSON schema. Only one level of nesting is supported.</p> </li> <li>Parameters:<ul> <li><code>object</code> (TYPE <code>object_def</code>): The object with parameters to add.</li> </ul> </li> <li> <p>Exceptions:</p> <ul> <li><code>zcx_llm_validation</code>: Raised if the object addition fails validation.</li> </ul> </li> <li> <p><code>generate_schema</code>: Generates the final JSON schema.</p> </li> <li>Returns:<ul> <li><code>result</code> (TYPE <code>string</code>): The generated JSON schema as a string.</li> </ul> </li> </ul>"},{"location":"Mistral%20Small%203/ZIF_LLM_CLIENT_JSON_SCHEMA_INTF/#dependencies","title":"Dependencies","text":"<p>None.</p>"},{"location":"Mistral%20Small%203/ZIF_LLM_DEFAULT_IMPL_INTF/","title":"Interface ZIF_LLM_DEFAULT_IMPL","text":"<p>AI Generated documentation.</p>"},{"location":"Mistral%20Small%203/ZIF_LLM_DEFAULT_IMPL_INTF/#overview","title":"Overview","text":"<p>The <code>zif_llm_default_impl</code> interface provides a set of public methods to retrieve various implementations and configurations for the LLM (Language Learning Model) system. The interface extends the <code>if_badi_interface</code> and includes the following methods:</p> <ul> <li><code>get_json_impl</code>: Retrieves the name of the JSON class. If not default, refer to the documentation on requirements.</li> <li><code>get_encryption_impl</code>: Retrieves the encryption provider.</li> <li><code>get_call_logger_impl</code>: Retrieves the call logger implementation.</li> <li><code>get_statistics_impl</code>: Retrieves the statistics implementation.</li> <li><code>get_authorization_impl</code>: Retrieves the authorization implementation. Authorization errors should raise <code>zcx_llm_authorization</code>.</li> </ul>"},{"location":"Mistral%20Small%203/ZIF_LLM_DEFAULT_IMPL_INTF/#dependencies","title":"Dependencies","text":"<p>The <code>zif_llm_default_impl</code> interface depends on the following interfaces and classes:</p> <ul> <li><code>if_badi_interface</code>: The base interface that <code>zif_llm_default_impl</code> extends.</li> <li><code>zif_llm_encryption</code>: The interface for the encryption provider.</li> <li><code>zif_llm_call_logger</code>: The interface for the call logger implementation.</li> <li><code>zif_llm_statistics</code>: The interface for the statistics implementation.</li> <li><code>zif_llm_auth</code>: The interface for the authorization implementation.</li> <li><code>zcx_llm_authorization</code>: The exception class for authorization errors.</li> </ul>"},{"location":"Mistral%20Small%203/ZIF_LLM_ENCRYPTION_INTF/","title":"Interface ZIF_LLM_ENCRYPTION","text":"<p>AI Generated documentation.</p>"},{"location":"Mistral%20Small%203/ZIF_LLM_ENCRYPTION_INTF/#overview","title":"Overview","text":"<p>The <code>zif_llm_encryption</code> interface provides two public methods for encrypting and decrypting secrets. These methods are designed to handle sensitive data securely, with appropriate error handling for validation and authorization issues.</p>"},{"location":"Mistral%20Small%203/ZIF_LLM_ENCRYPTION_INTF/#public-methods","title":"Public Methods","text":"<ol> <li>decrypt</li> <li>Purpose: Decrypts an encrypted secret.</li> <li>Parameters:<ul> <li><code>encrypted</code> (IMPORTING): The encrypted data to be decrypted (TYPE <code>xstring</code>).</li> </ul> </li> <li>Returns:<ul> <li><code>result</code> (RETURNING VALUE): The decrypted secret (TYPE <code>string</code>).</li> </ul> </li> <li> <p>Exceptions:</p> <ul> <li><code>zcx_llm_validation</code>: Raised for validation errors.</li> <li><code>zcx_llm_authorization</code>: Raised for authorization errors.</li> </ul> </li> <li> <p>encrypt</p> </li> <li>Purpose: Encrypts an unencrypted secret.</li> <li>Parameters:<ul> <li><code>unencrypted</code> (IMPORTING): The unencrypted data to be encrypted (TYPE <code>string</code>).</li> </ul> </li> <li>Returns:<ul> <li><code>result</code> (RETURNING VALUE): The encrypted secret (TYPE <code>xstring</code>).</li> </ul> </li> <li>Exceptions:<ul> <li><code>zcx_llm_validation</code>: Raised for validation errors.</li> <li><code>zcx_llm_authorization</code>: Raised for authorization errors.</li> </ul> </li> </ol>"},{"location":"Mistral%20Small%203/ZIF_LLM_FACTORY_INTF/","title":"Interface ZIF_LLM_FACTORY","text":"<p>AI Generated documentation.</p>"},{"location":"Mistral%20Small%203/ZIF_LLM_FACTORY_INTF/#overview","title":"Overview","text":"<p>The <code>ZIF_LLM_FACTORY</code> interface provides a public method for obtaining a model client. This method is designed to interact with language models and handle specific exceptions related to validation and authorization.</p>"},{"location":"Mistral%20Small%203/ZIF_LLM_FACTORY_INTF/#public-methods","title":"Public Methods","text":"<ul> <li><code>GET_CLIENT</code></li> <li>Purpose: Retrieves a client for a specified model.</li> <li>Parameters:<ul> <li><code>model</code> (Importing): The model for which the client is to be retrieved. This parameter is of type <code>ZLLM_MODEL</code>.</li> </ul> </li> <li>Return Value:<ul> <li><code>response</code> (Returning): A reference to an object of type <code>ZIF_LLM_CLIENT</code> that represents the client for the specified model.</li> </ul> </li> <li>Exceptions:<ul> <li><code>ZCX_LLM_VALIDATION</code>: Raised if there is a validation error related to the model or client.</li> <li><code>ZCX_LLM_AUTHORIZATION</code>: Raised if there is an authorization error related to accessing the model or client.</li> </ul> </li> </ul>"},{"location":"Mistral%20Small%203/ZIF_LLM_FACTORY_INTF/#dependencies","title":"Dependencies","text":"<ul> <li><code>ZLLM_MODEL</code>: The type of the model parameter.</li> <li><code>ZIF_LLM_CLIENT</code>: The type of the client returned by the method.</li> <li><code>ZCX_LLM_VALIDATION</code>: Exception raised for validation errors.</li> <li><code>ZCX_LLM_AUTHORIZATION</code>: Exception raised for authorization errors.</li> </ul>"},{"location":"Mistral%20Small%203/ZIF_LLM_HTTP_CLIENT_WRAPPER_INTF/","title":"Interface ZIF_LLM_HTTP_CLIENT_WRAPPER","text":"<p>AI Generated documentation.</p>"},{"location":"Mistral%20Small%203/ZIF_LLM_HTTP_CLIENT_WRAPPER_INTF/#overview","title":"Overview","text":"<p>The <code>zif_llm_http_client_wrapper</code> interface provides a structured way to interact with HTTP clients, encapsulating the configuration, header management, URL setting, and communication processes. Below is an overview of the public methods:</p>"},{"location":"Mistral%20Small%203/ZIF_LLM_HTTP_CLIENT_WRAPPER_INTF/#class-methods","title":"Class Methods","text":"<ul> <li>get_client</li> <li>Purpose: Retrieves an instance of the HTTP client wrapper.</li> <li>Parameters:<ul> <li><code>client_config</code> (TYPE <code>zllm_clnt_config</code>): Configuration settings for the client.</li> <li><code>provider_config</code> (TYPE <code>zllm_providers</code>): Configuration settings for the provider.</li> </ul> </li> <li>Returns: A reference to an instance of <code>zif_llm_http_client_wrapper</code>.</li> <li>Exceptions: Raises <code>zcx_llm_validation</code> if validation fails.</li> </ul>"},{"location":"Mistral%20Small%203/ZIF_LLM_HTTP_CLIENT_WRAPPER_INTF/#instance-methods","title":"Instance Methods","text":"<ul> <li>set_header</li> <li>Purpose: Sets a header value. If the same header is set multiple times, the previous value is overwritten.</li> <li>Parameters:<ul> <li><code>name</code> (TYPE <code>string</code>): The name of the header.</li> <li><code>value</code> (TYPE <code>string</code>): The value of the header.</li> </ul> </li> <li> <p>Exceptions: Raises <code>zcx_llm_validation</code> if validation fails.</p> </li> <li> <p>set_url</p> </li> <li>Purpose: Sets the URL to be called. The SM59 destination path will be prepended to the URL.</li> <li>Parameters:<ul> <li><code>url</code> (TYPE <code>string</code>): The URL to be set.</li> </ul> </li> <li> <p>Exceptions: Raises <code>zcx_llm_validation</code> if validation fails.</p> </li> <li> <p>communicate</p> </li> <li>Purpose: Calls the endpoint with the specified request and session ID.</li> <li>Parameters:<ul> <li><code>request</code> (TYPE <code>string</code>): The request payload.</li> <li><code>session_id</code> (TYPE <code>zllm_session_id</code>): The session ID for the request.</li> <li><code>msg</code> (TYPE <code>i</code>): A message indicator.</li> </ul> </li> <li>Returns: A <code>response</code> structure containing the HTTP response details.</li> <li> <p>Exceptions: Raises <code>zcx_llm_http_error</code> if an HTTP error occurs.</p> </li> <li> <p>close_client</p> </li> <li>Purpose: Closes the HTTP client.</li> </ul>"},{"location":"Mistral%20Small%203/ZIF_LLM_HTTP_CLIENT_WRAPPER_INTF/#dependencies","title":"Dependencies","text":"<ul> <li><code>zllm_clnt_config</code>: Configuration settings for the client.</li> <li><code>zllm_providers</code>: Configuration settings for the provider.</li> <li><code>zllm_session_id</code>: Session ID for the request.</li> <li><code>zcx_llm_validation</code>: Exception raised for validation errors.</li> <li><code>zcx_llm_http_error</code>: Exception raised for HTTP errors.</li> <li><code>if_http_response</code>: Interface for HTTP response handling.</li> </ul>"},{"location":"Mistral%20Small%203/ZIF_LLM_OPTIONS_INTF/","title":"Interface ZIF_LLM_OPTIONS","text":"<p>AI Generated documentation.</p>"},{"location":"Mistral%20Small%203/ZIF_LLM_OPTIONS_INTF/#overview","title":"Overview","text":"<p>The <code>ZIF_LLM_OPTIONS</code> interface provides a set of public methods to configure various options for a Large Language Model (LLM) call. These methods allow for the adjustment of parameters that influence the behavior and output of the LLM. The interface includes methods to set and get parameters, ensuring flexibility and control over the LLM's operation.</p>"},{"location":"Mistral%20Small%203/ZIF_LLM_OPTIONS_INTF/#public-methods","title":"Public Methods","text":"<p>The interface defines the following public methods:</p> <ul> <li>set_temperature: Sets the temperature parameter, which controls the randomness of the model's output. The value must be in the range [0, 2].</li> <li>set_max_tokens: Sets the maximum number of tokens allowed in the model's output. The value must be greater than 0.</li> <li>set_top_p: Sets the top-p parameter, which controls the diversity of the model's output. The value must be in the range [0, 1].</li> <li>set_top_k: Sets the top-k parameter, which controls the number of top probabilities to consider. The value must be in the range [1, infinity].</li> <li>set_seed: Sets the seed parameter, which ensures more repeatable output. The value must be an integer.</li> <li>set_frequency_penalty: Sets the frequency penalty parameter, which controls the penalty for frequent tokens. The value must be in the range [-2, 2].</li> <li>set_presence_penalty: Sets the presence penalty parameter, which controls the penalty for present tokens. The value must be in the range [-2, 2].</li> <li>set_min_p: Sets the min-p parameter, which controls the minimum probability threshold. The value must be in the range [0, 1].</li> <li>set_top_a: Sets the top-a parameter, which controls the top-a sampling. The value must be in the range [0, 1].</li> <li>set_custom_parameters: Sets a key-value list of custom parameters to be passed to the model.</li> <li>get_parameters: Retrieves all parameters set for the LLM call.</li> </ul> <pre><code>classDiagram\n    class ZIF_LLM_OPTIONS {\n        +set_temperature(temperature: decfloat16)\n        +set_max_tokens(tokens: i)\n        +set_top_p(top_p: decfloat16)\n        +set_top_k(top_k: i)\n        +set_seed(seed: i)\n        +set_frequency_penalty(frequency_penalty: decfloat16)\n        +set_presence_penalty(presence_penalty: decfloat16)\n        +set_min_p(min_p: decfloat16)\n        +set_top_a(top_a: decfloat16)\n        +set_custom_parameters(parameters: zllm_keyvalues)\n        +get_parameters() zllm_keyvalues\n    }</code></pre>"},{"location":"Mistral%20Small%203/ZIF_LLM_OPTIONS_INTF/#dependencies","title":"Dependencies","text":"<p>The interface relies on the following main dependencies:</p> <ul> <li>zcx_llm_validation: An exception class used for validation purposes.</li> <li>zllm_keyvalues: A data type used for key-value pairs of parameters.</li> </ul>"},{"location":"Mistral%20Small%203/ZIF_LLM_SO_INTF/","title":"Interface ZIF_LLM_SO","text":"<p>AI Generated documentation.</p>"},{"location":"Mistral%20Small%203/ZIF_LLM_SO_INTF/#overview","title":"Overview","text":"<p>The <code>ZIF_LLM_SO</code> interface provides methods to manage and retrieve structured output schemas. It includes the following public methods:</p> <ul> <li> <p><code>SET_SCHEMA</code>: Sets the schema for the structured output. This method takes a reference to a data description object and an optional table of field descriptions. It raises an exception if validation fails.</p> </li> <li> <p><code>GET_SCHEMA</code>: Retrieves the converted schema as a string. This method is used to get the schema that has been set using the <code>SET_SCHEMA</code> method.</p> </li> <li> <p><code>GET_DATATYPE</code>: Retrieves the data type definition. This method is primarily used internally to get the data type definition based on the schema.</p> </li> </ul>"},{"location":"Mistral%20Small%203/ZIF_LLM_SO_INTF/#dependencies","title":"Dependencies","text":"<p>The interface depends on the following main components:</p> <ul> <li><code>CL_ABAP_DATDESCR</code>: A reference to the data description object used to define the data type for the structured output.</li> <li><code>ZCX_LLM_VALIDATION</code>: An exception class raised by the <code>SET_SCHEMA</code> method if validation fails.</li> </ul>"},{"location":"Mistral%20Small%203/ZIF_LLM_STATISTICS_INTF/","title":"Interface ZIF_LLM_STATISTICS","text":"<p>AI Generated documentation.</p>"},{"location":"Mistral%20Small%203/ZIF_LLM_STATISTICS_INTF/#overview","title":"Overview","text":"<p>The <code>zif_llm_statistics</code> interface provides a public method for adding a statistic record. This interface is designed to facilitate the management of statistics within the system.</p>"},{"location":"Mistral%20Small%203/ZIF_LLM_STATISTICS_INTF/#public-methods","title":"Public Methods","text":"<ul> <li>add</li> <li>Purpose: Adds a statistic record to the system.</li> <li>Parameters:<ul> <li><code>record</code> (TYPE <code>zllm_statistics</code>): The statistic record to be added.</li> </ul> </li> </ul>"},{"location":"Mistral%20Small%203/ZIF_LLM_STATISTICS_INTF/#dependencies","title":"Dependencies","text":"<p>None.</p>"},{"location":"Mistral%20Small%203/ZIF_LLM_TOOL_INTF/","title":"Interface ZIF_LLM_TOOL","text":"<p>AI Generated documentation.</p>"},{"location":"Mistral%20Small%203/ZIF_LLM_TOOL_INTF/#overview","title":"Overview","text":"<p>The <code>zif_llm_tool</code> interface defines a set of methods for interacting with a tool within the context of a Large Language Model (LLM). The interface includes methods for retrieving tool details, executing the tool, and obtaining the result of a tool call. Below is an overview of the public methods:</p>"},{"location":"Mistral%20Small%203/ZIF_LLM_TOOL_INTF/#methods","title":"Methods","text":"<ul> <li>get_result: This method returns the result of a tool call. The result includes the data, tool call ID, and the name of the tool.</li> </ul> <pre><code>METHODS get_result RETURNING VALUE(result) TYPE tool_result.\n</code></pre> <ul> <li>get_tool_details: This method returns the details of the tool, which are required to parse it as a tool for the LLM. The details include the name, description, type, and parameters of the tool.</li> </ul> <pre><code>METHODS get_tool_details RETURNING VALUE(result) TYPE tool_details.\n</code></pre> <ul> <li>execute: This method executes the tool. It takes the LLM Model Tool Call response, the tool call ID, and returns the execution result, which includes the data, tool call ID, and the name of the tool.</li> </ul> <pre><code>METHODS execute IMPORTING data         TYPE REF TO data\n                        tool_call_id  TYPE string\n                  RETURNING VALUE(result) TYPE tool_result.\n</code></pre>"},{"location":"Mistral%20Small%203/ZIF_LLM_TOOL_INTF/#dependencies","title":"Dependencies","text":"<p>The interface depends on the following types and classes:</p> <ul> <li><code>cl_abap_datadescr</code>: A standard ABAP class used for data description.</li> <li><code>zif_llm_tool_parser=&gt;def_descriptions</code>: A type defined within the <code>zif_llm_tool_parser</code> class, which is not explicitly documented here but is assumed to be a description type.</li> </ul>"},{"location":"Mistral%20Small%203/ZIF_LLM_TOOL_PARSER_INTF/","title":"Interface ZIF_LLM_TOOL_PARSER","text":"<p>AI Generated documentation.</p>"},{"location":"Mistral%20Small%203/ZIF_LLM_TOOL_PARSER_INTF/#overview","title":"Overview","text":"<p>The <code>ZIF_LLM_TOOL_PARSER</code> interface defines a public method for parsing tool definitions. The primary method, <code>PARSE</code>, is designed to process data descriptions and optional descriptions, returning a result string. This method can raise an exception of type <code>ZCX_LLM_VALIDATION</code> if validation fails.</p>"},{"location":"Mistral%20Small%203/ZIF_LLM_TOOL_PARSER_INTF/#dependencies","title":"Dependencies","text":"<p>The interface depends on the following main components:</p> <ul> <li><code>CL_ABAP_DATDESCR</code>: This class is used for data description in ABAP.</li> <li><code>ZCX_LLM_VALIDATION</code>: This is a custom exception class used for validation errors.</li> </ul>"},{"location":"Mistral%20Small%203/ZLLM_PROVIDER_MAINTENANCE_PROG/","title":"Report ZLLM_PROVIDER_MAINTENANCE","text":"<p>AI Generated documentation.</p>"},{"location":"Mistral%20Small%203/ZLLM_PROVIDER_MAINTENANCE_PROG/#overview","title":"Overview","text":"<p>The report <code>zllm_provider_maintenance</code> is an ABAP program designed for maintaining provider configurations. The main functionality includes displaying a list of providers in an ALV grid, adding new providers, updating existing providers, and deleting providers. The program utilizes a class-based approach to encapsulate the business logic and user interactions.</p> <p>The main code objects are:</p> <ul> <li>Class <code>lcl_app</code>: This class handles the core functionality of the application, including loading providers, displaying them in an ALV grid, and handling user actions such as adding, changing, and deleting providers.</li> <li>Class <code>lcl_screen</code>: This class manages the screen flow and user interactions, calling the appropriate methods in <code>lcl_app</code> based on user commands.</li> </ul>"},{"location":"Mistral%20Small%203/ZLLM_PROVIDER_MAINTENANCE_PROG/#dependencies","title":"Dependencies","text":"<p>The report depends on the following main objects:</p> <ul> <li>Table <code>zllm_providers</code>: Stores the provider configurations.</li> <li>Class <code>zif_llm_encryption</code>: Provides encryption and decryption methods for authentication values.</li> <li>BADI <code>llm_badi</code>: Used to get the encryption implementation.</li> <li>Function Modules <code>LVC_FIELDCATALOG_MERGE</code>, <code>POPUP_GET_VALUES</code>, <code>POPUP_TO_CONFIRM</code>: Used for building the ALV field catalog, displaying input popups, and confirmation popups respectively.</li> </ul>"},{"location":"Mistral%20Small%203/ZLLM_PROVIDER_MAINTENANCE_PROG/#details","title":"Details","text":""},{"location":"Mistral%20Small%203/ZLLM_PROVIDER_MAINTENANCE_PROG/#class-lcl_app","title":"Class <code>lcl_app</code>","text":"<p>The <code>lcl_app</code> class is the core of the application, handling all the business logic and user interactions. Below is a detailed breakdown of its methods and internal logic.</p>"},{"location":"Mistral%20Small%203/ZLLM_PROVIDER_MAINTENANCE_PROG/#methods","title":"Methods","text":"<ul> <li>Constructor: Initializes the application by loading providers and setting up the encryption class.</li> <li><code>load_providers</code>: Loads the provider list from the database table <code>zllm_providers</code>.</li> <li><code>display_providers</code>: Displays the providers in an ALV grid. If the grid is not bound, it initializes the grid and sets up the field catalog and layout. If the grid is already bound, it refreshes the display.</li> <li><code>handle_action_add</code>: Handles the addition of a new provider. It shows a popup for user input, encrypts the authentication value, and saves the new provider.</li> <li><code>handle_action_change</code>: Handles the updating of an existing provider. It shows a popup for user input, decrypts the authentication value, updates the provider, and saves the changes.</li> <li><code>handle_action_delete</code>: Handles the deletion of a provider. It shows a confirmation popup and deletes the provider from the database if confirmed.</li> <li><code>save_provider</code>: Saves a provider configuration to the database.</li> <li><code>encrypt_auth_value</code>: Encrypts an authentication value using the encryption class.</li> <li><code>decrypt_auth_value</code>: Decrypts an encrypted authentication value using the encryption class.</li> <li><code>build_field_catalog</code>: Builds the field catalog for the ALV grid.</li> <li><code>refresh_display</code>: Refreshes the ALV grid display.</li> <li><code>show_popup</code>: Shows a user input popup and returns the configuration.</li> <li><code>show_confirm_popup</code>: Shows a confirmation popup and returns the user's choice.</li> </ul>"},{"location":"Mistral%20Small%203/ZLLM_PROVIDER_MAINTENANCE_PROG/#class-lcl_screen","title":"Class <code>lcl_screen</code>","text":"<p>The <code>lcl_screen</code> class manages the screen flow and user interactions. It calls the appropriate methods in <code>lcl_app</code> based on user commands.</p>"},{"location":"Mistral%20Small%203/ZLLM_PROVIDER_MAINTENANCE_PROG/#methods_1","title":"Methods","text":"<ul> <li><code>start</code>: Initializes the application and calls the initial screen.</li> <li><code>pai</code>: Processes user commands and calls the appropriate methods in <code>lcl_app</code>.</li> <li><code>pbo</code>: Sets the screen status and title, and displays the providers.</li> </ul>"},{"location":"Mistral%20Small%203/ZLLM_PROVIDER_MAINTENANCE_PROG/#interaction-flow","title":"Interaction Flow","text":"<p>The interaction flow between the main components can be visualized as follows:</p> <pre><code>graph TD\n    A[User] --&gt;|Start| B[lcl_screen]\n    B --&gt;|start| C[lcl_app]\n    C --&gt;|load_providers| D[zllm_providers]\n    C --&gt;|display_providers| E[ALV Grid]\n    A --&gt;|Command| B\n    B --&gt;|pai| C\n    C --&gt;|handle_action_add| F[Popup]\n    C --&gt;|handle_action_change| F\n    C --&gt;|handle_action_delete| G[Confirmation Popup]\n    C --&gt;|save_provider| D\n    C --&gt;|encrypt_auth_value| H[zif_llm_encryption]\n    C --&gt;|decrypt_auth_value| H</code></pre>"},{"location":"Mistral%20Small%203/ZLLM_PROVIDER_MAINTENANCE_PROG/#encryption-and-decryption","title":"Encryption and Decryption","text":"<p>The encryption and decryption of authentication values are handled by the <code>zif_llm_encryption</code> class. The <code>encrypt_auth_value</code> and <code>decrypt_auth_value</code> methods in <code>lcl_app</code> use this class to perform the encryption and decryption operations.</p>"},{"location":"Mistral%20Small%203/ZLLM_PROVIDER_MAINTENANCE_PROG/#error-handling","title":"Error Handling","text":"<p>The program includes error handling for encryption and decryption operations. If an error occurs, an appropriate message is displayed to the user.</p>"},{"location":"Mistral%20Small%203/ZLLM_PROVIDER_MAINTENANCE_PROG/#user-interface","title":"User Interface","text":"<p>The user interface is managed through the <code>lcl_screen</code> class, which handles screen flow and user commands. The main screen displays the providers in an ALV grid and provides options to add, change, and delete providers.</p>"},{"location":"Mistral%20Small%203/Z_LLM_CLIENT_FUGR/","title":"Function Group Z_LLM_CLIENT","text":""},{"location":"Mistral%20Small%203/FUGR/Z_LLM_CLIENT/TABLEFRAME_Z_LLM_CLIENT/","title":"Function Module TABLEFRAME_Z_LLM_CLIENT","text":"<p>AI Generated documentation.</p>"},{"location":"Mistral%20Small%203/FUGR/Z_LLM_CLIENT/TABLEFRAME_Z_LLM_CLIENT/#overview","title":"Overview","text":"<p>The function module <code>TABLEFRAME_Z_LLM_CLIENT</code> is designed to generate a table frame for a specific client within the SAP system. The primary functionality involves performing a series of operations encapsulated within the <code>TABLEFRAME</code> perform statement. This perform statement processes various tables and parameters, including <code>X_HEADER</code>, <code>X_NAMTAB</code>, <code>DBA_SELLIST</code>, <code>DPL_SELLIST</code>, and <code>EXCL_CUA_FUNCT</code>. The function module utilizes the parameters <code>CORR_NUMBER</code>, <code>VIEW_ACTION</code>, and <code>VIEW_NAME</code> to execute its operations.</p>"},{"location":"Mistral%20Small%203/FUGR/Z_LLM_CLIENT/TABLEFRAME_Z_LLM_CLIENT/#dependencies","title":"Dependencies","text":"<p>No dependencies are explicitly listed in the provided code.</p>"},{"location":"Mistral%20Small%203/FUGR/Z_LLM_CLIENT/TABLEFRAME_Z_LLM_CLIENT/#details","title":"Details","text":"<p>The function module <code>TABLEFRAME_Z_LLM_CLIENT</code> performs a single <code>PERFORM</code> statement that calls the <code>TABLEFRAME</code> subroutine. This subroutine is responsible for handling the table frame generation process. The subroutine processes multiple tables and parameters, which are passed to it as arguments.</p> <p>The logic flow of the function module can be visualized as follows:</p> <pre><code>graph TD\n    A[Start] --&gt; B[FUNCTION TABLEFRAME_Z_LLM_CLIENT]\n    B --&gt; C[PERFORM TABLEFRAME]\n    C --&gt; D[Process X_HEADER]\n    C --&gt; E[Process X_NAMTAB]\n    C --&gt; F[Process DBA_SELLIST]\n    C --&gt; G[Process DPL_SELLIST]\n    C --&gt; H[Process EXCL_CUA_FUNCT]\n    D --&gt; I[Using CORR_NUMBER]\n    E --&gt; I\n    F --&gt; I\n    G --&gt; I\n    H --&gt; I\n    I --&gt; J[Using VIEW_ACTION]\n    J --&gt; K[Using VIEW_NAME]\n    K --&gt; L[End]</code></pre> <p>The <code>TABLEFRAME</code> subroutine is called with the following parameters:</p> <ul> <li><code>X_HEADER</code>: A table containing header information.</li> <li><code>X_NAMTAB</code>: A table containing name information.</li> <li><code>DBA_SELLIST</code>: A table containing database selection list information.</li> <li><code>DPL_SELLIST</code>: A table containing display selection list information.</li> <li><code>EXCL_CUA_FUNCT</code>: A table containing exclusion criteria for CUA functions.</li> <li><code>CORR_NUMBER</code>: A parameter used for correlation purposes.</li> <li><code>VIEW_ACTION</code>: A parameter specifying the action to be performed on the view.</li> <li><code>VIEW_NAME</code>: A parameter specifying the name of the view.</li> </ul> <p>The subroutine processes these parameters to generate the table frame for the specified client. The exact details of the processing logic within the <code>TABLEFRAME</code> subroutine are not provided in the given code, but it is clear that the subroutine plays a crucial role in the functionality of the function module.</p>"},{"location":"Mistral%20Small%203/FUGR/Z_LLM_CLIENT/TABLEPROC_Z_LLM_CLIENT/","title":"Function Module TABLEPROC_Z_LLM_CLIENT","text":"<p>AI Generated documentation.</p>"},{"location":"Mistral%20Small%203/FUGR/Z_LLM_CLIENT/TABLEPROC_Z_LLM_CLIENT/#overview","title":"Overview","text":"<p>The function module <code>TABLEPROC_Z_LLM_CLIENT</code> is designed to handle table processing for a specific client-related logic. The main functionality of this module is encapsulated within the <code>TABLEPROC</code> perform statement. This perform statement likely calls a subroutine or a set of subroutines that execute the necessary table processing logic.</p>"},{"location":"Mistral%20Small%203/FUGR/Z_LLM_CLIENT/TABLEPROC_Z_LLM_CLIENT/#dependencies","title":"Dependencies","text":"<p>There are no explicit dependencies listed in the provided code. However, the <code>TABLEPROC</code> perform statement suggests that there might be a subroutine or a set of subroutines defined elsewhere in the codebase that this function module relies on.</p>"},{"location":"Mistral%20Small%203/FUGR/Z_LLM_CLIENT/TABLEPROC_Z_LLM_CLIENT/#details","title":"Details","text":"<p>The function module <code>TABLEPROC_Z_LLM_CLIENT</code> is a straightforward module that primarily calls a subroutine named <code>TABLEPROC</code>. This subroutine is responsible for the actual table processing logic. Below is a Mermaid diagram to visualize the flow of the function module:</p> <pre><code>graph TD\n    A[Start] --&gt; B[Function Module TABLEPROC_Z_LLM_CLIENT]\n    B --&gt; C[Perform TABLEPROC]\n    C --&gt; D[End of Function Module]\n    D --&gt; E[End]</code></pre>"},{"location":"Mistral%20Small%203/FUGR/Z_LLM_CLIENT/TABLEPROC_Z_LLM_CLIENT/#key-points","title":"Key Points","text":"<ol> <li>Function Module Initialization: The function module <code>TABLEPROC_Z_LLM_CLIENT</code> is initialized with a standard header that includes metadata such as the program name, generation date, and version information.</li> <li>Perform Statement: The core functionality is handled by the <code>PERFORM TABLEPROC</code> statement. This statement calls a subroutine named <code>TABLEPROC</code>, which is expected to contain the logic for processing the table.</li> <li>End of Function Module: The function module concludes with the <code>ENDFUNCTION</code> statement, marking the end of the function module definition.</li> </ol>"},{"location":"Mistral%20Small%203/FUGR/Z_LLM_CLIENT/TABLEPROC_Z_LLM_CLIENT/#assumptions","title":"Assumptions","text":"<ul> <li>The <code>TABLEPROC</code> subroutine is defined elsewhere in the codebase and contains the actual logic for table processing.</li> <li>The function module is part of a larger application or system that handles client-related data and processes.</li> </ul>"},{"location":"Mistral%20Small%203/FUGR/Z_LLM_CLIENT/TABLEPROC_Z_LLM_CLIENT/#potential-enhancements","title":"Potential Enhancements","text":"<ul> <li>Error Handling: Adding error handling mechanisms to manage exceptions or errors that might occur during the table processing.</li> <li>Logging: Implementing logging to track the execution flow and any issues that arise during the processing.</li> <li>Documentation: Providing detailed documentation for the <code>TABLEPROC</code> subroutine to ensure clarity and maintainability.</li> </ul> <p>This overview provides a high-level understanding of the function module's purpose and its interaction with the <code>TABLEPROC</code> subroutine. For a more detailed understanding, the implementation of the <code>TABLEPROC</code> subroutine would need to be reviewed.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_ANTHROPIC/","title":"Package ZLLM_CLIENT_ANTHROPIC","text":"<p>AI Generated documentation.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_ANTHROPIC/#overview","title":"Overview","text":"<p>The package is designed to facilitate interactions with the Anthropic LLM (Large Language Model) service. It includes a class, <code>ZCL_LLM_CLIENT_ANTHROPIC</code>, which handles specific configurations, authentication, and request/response processing tailored to the Anthropic API. The package enables seamless integration with the Anthropic service, allowing for efficient management of LLM interactions within an SAP environment.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_ANTHROPIC/ZCL_LLM_CLIENT_ANTHROPIC_CLAS/","title":"Class ZCL_LLM_CLIENT_ANTHROPIC","text":"<p>AI Generated documentation.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_ANTHROPIC/ZCL_LLM_CLIENT_ANTHROPIC_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_client_anthropic</code> class is a specialized client for interacting with the Anthropic LLM (Large Language Model) service. It inherits from the base class <code>zcl_llm_client_base</code> and provides methods to configure, authenticate, and handle requests to the Anthropic API. The class is designed to manage the specifics of the Anthropic API, including message formatting, authentication, and response handling.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_ANTHROPIC/ZCL_LLM_CLIENT_ANTHROPIC_CLAS/#public-methods","title":"Public Methods","text":"<ul> <li><code>get_client</code>: Factory method to create and return an instance of <code>zcl_llm_client_anthropic</code>.</li> <li>Parameters:<ul> <li><code>client_config</code>: Configuration settings for the client.</li> <li><code>provider_config</code>: Configuration settings for the provider.</li> </ul> </li> <li> <p>Returns: An instance of <code>zif_llm_client</code>.</p> </li> <li> <p><code>constructor</code>: Initializes the client with the provided configuration settings.</p> </li> <li> <p>Parameters:</p> <ul> <li><code>client_config</code>: Configuration settings for the client.</li> <li><code>provider_config</code>: Configuration settings for the provider.</li> </ul> </li> <li> <p><code>zif_llm_client~new_request</code>: Redefines the method to create a new request, setting specific options for the Anthropic model.</p> </li> <li>Returns: The modified request object.</li> </ul>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_ANTHROPIC/ZCL_LLM_CLIENT_ANTHROPIC_CLAS/#dependencies","title":"Dependencies","text":"<p>The class depends on the following:</p> <ul> <li><code>zcl_llm_client_base</code>: The base class for LLM clients.</li> <li><code>zif_llm_client</code>: Interface for LLM clients.</li> <li><code>zcx_llm_validation</code>: Exception class for validation errors.</li> <li><code>zcx_llm_authorization</code>: Exception class for authorization errors.</li> <li><code>zcl_llm_http_client_wrapper</code>: Wrapper for HTTP client operations.</li> <li><code>zcl_llm_common</code>: Common utility methods for LLM operations.</li> <li><code>zllm_clnt_config</code>: Configuration settings for the client.</li> <li><code>zllm_providers</code>: Configuration settings for the provider.</li> <li><code>zllm_msgs</code>: Messages for LLM interactions.</li> <li><code>zif_llm_chat_request</code>: Interface for chat request handling.</li> <li><code>zif_llm_client</code>: Interface for LLM client operations.</li> <li><code>zcl_llm_common</code>: Common utility methods for LLM operations.</li> <li><code>zcl_llm_http_client_wrapper</code>: Wrapper for HTTP client operations.</li> <li><code>zcl_llm_common</code>: Common utility methods for LLM operations.</li> <li><code>zcl_llm_common</code>: Common utility methods for LLM operations.</li> </ul>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_ANTHROPIC/ZCL_LLM_CLIENT_ANTHROPIC_CLAS/#details","title":"Details","text":""},{"location":"Mistral%20Small%203/ZLLM_CLIENT_ANTHROPIC/ZCL_LLM_CLIENT_ANTHROPIC_CLAS/#class-structure","title":"Class Structure","text":"<p>The class is structured into public, protected, and private sections. The public section includes the constructor and methods for interacting with the Anthropic API. The protected section includes methods for handling HTTP requests, authentication, and building request JSON. The private section defines internal data structures for handling Anthropic-specific message formats and response parsing.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_ANTHROPIC/ZCL_LLM_CLIENT_ANTHROPIC_CLAS/#interaction-flow","title":"Interaction Flow","text":"<p>The interaction flow of the class can be visualized as follows:</p> <pre><code>graph TD\n    A[Client Configuration] --&gt; B[Constructor]\n    B --&gt; C[Initialize HTTP Client]\n    C --&gt; D[Set Authentication]\n    D --&gt; E[Build Request JSON]\n    E --&gt; F[Handle HTTP Response]\n    F --&gt; G[Parse Message]\n    G --&gt; H[Return Response]</code></pre>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_ANTHROPIC/ZCL_LLM_CLIENT_ANTHROPIC_CLAS/#key-methods","title":"Key Methods","text":"<ul> <li><code>get_http_client</code>: Initializes and configures the HTTP client for Anthropic API requests.</li> <li> <p>Sets the <code>anthropic-version</code> header to <code>2023-06-01</code>.</p> </li> <li> <p><code>set_auth</code>: Handles authentication by decrypting the encrypted authentication value and setting the appropriate header.</p> </li> <li> <p>Uses the <code>zcl_llm_common</code> class to get the encryption implementation and decrypt the authentication value.</p> </li> <li> <p><code>build_request_json</code>: Constructs the JSON request body for the Anthropic API.</p> </li> <li>Handles system and non-system messages differently.</li> <li>Includes tool definitions if required.</li> <li> <p>Adds options and tool choices as needed.</p> </li> <li> <p><code>parse_message</code>: Parses messages to the format expected by the Anthropic API.</p> </li> <li> <p>Handles tool calls and differentiates between user and tool messages.</p> </li> <li> <p><code>handle_http_response</code>: Processes the HTTP response from the Anthropic API.</p> </li> <li>Checks for errors and handles retriable errors.</li> <li>Parses the response and constructs the internal response structure.</li> </ul>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_ANTHROPIC/ZCL_LLM_CLIENT_ANTHROPIC_CLAS/#internal-data-structures","title":"Internal Data Structures","text":"<p>The class defines internal data structures to handle Anthropic-specific message formats and response parsing:</p> <ul> <li><code>anthropic_message</code>: Represents a single message with type, text, ID, name, and input JSON.</li> <li><code>anthropic_messages</code>: Table of <code>anthropic_message</code> objects.</li> <li><code>anthropic_usage</code>: Represents usage statistics with input and output tokens.</li> <li><code>anthropic_response</code>: Represents the response from the Anthropic API, including content, stop reason, role, and usage.</li> </ul>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_AZUREOAI/","title":"Package ZLLM_CLIENT_AZUREOAI","text":"<p>AI Generated documentation.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_AZUREOAI/#overview","title":"Overview","text":"<p>The package provides a specialized client for interacting with the Azure OpenAI service, focusing on authentication and HTTP request management. It includes a class that extends a base class to implement a JSON schema tailored for Azure OpenAI, enhancing the functionality for handling specific schema components before and after processing.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_CLIENT_AZUREOAI_CLAS/","title":"Class ZCL_LLM_CLIENT_AZUREOAI","text":"<p>AI Generated documentation.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_CLIENT_AZUREOAI_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_client_azureoai</code> class is a specialized client for interacting with the Azure OpenAI service. It inherits from the base class <code>zcl_llm_client_base</code> and provides functionality to create and manage client instances, handle authentication, and interact with the Azure OpenAI API.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_CLIENT_AZUREOAI_CLAS/#public-methods","title":"Public Methods","text":"<ul> <li> <p><code>get_client</code>: Factory method to obtain a new instance of the Azure OpenAI client. It takes <code>client_config</code> and <code>provider_config</code> as inputs and returns a reference to the client instance. This method can raise <code>zcx_llm_validation</code> and <code>zcx_llm_authorization</code> exceptions.</p> </li> <li> <p><code>constructor</code>: Initializes a new instance of the <code>zcl_llm_client_azureoai</code> class. It takes <code>client_config</code> and <code>provider_config</code> as inputs and can raise <code>zcx_llm_validation</code> and <code>zcx_llm_authorization</code> exceptions.</p> </li> </ul>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_CLIENT_AZUREOAI_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li><code>zcl_llm_client_base</code>: Base class for LLM (Large Language Model) clients.</li> <li><code>zllm_clnt_config</code>: Configuration type for client settings.</li> <li><code>zllm_providers</code>: Configuration type for provider settings.</li> <li><code>zif_llm_client</code>: Interface for LLM clients.</li> <li><code>zcx_llm_validation</code>: Exception class for validation errors.</li> <li><code>zcx_llm_authorization</code>: Exception class for authorization errors.</li> <li><code>zcl_llm_http_client_wrapper</code>: Wrapper class for HTTP client operations.</li> <li><code>zcl_llm_common</code>: Common utility class for LLM operations.</li> <li><code>zcl_llm_so_js_azureoai</code>: Class for creating structured output in JSON format for Azure OpenAI.</li> </ul>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_CLIENT_AZUREOAI_CLAS/#details","title":"Details","text":""},{"location":"Mistral%20Small%203/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_CLIENT_AZUREOAI_CLAS/#class-diagram","title":"Class Diagram","text":"<pre><code>classDiagram\n    class zcl_llm_client_azureoai {\n        -api_version: string\n        +constructor(client_config: zllm_clnt_config, provider_config: zllm_providers)\n        +get_client(client_config: zllm_clnt_config, provider_config: zllm_providers) : zif_llm_client\n        +get_http_client() : zcl_llm_http_client_wrapper\n        +set_auth()\n        +create_structured_output() : zcl_llm_so_js_azureoai\n        +get_chat_endpoint() : string\n    }\n\n    zcl_llm_client_azureoai --|&gt; zcl_llm_client_base\n    zcl_llm_client_azureoai --&gt; zllm_clnt_config\n    zcl_llm_client_azureoai --&gt; zllm_providers\n    zcl_llm_client_azureoai --&gt; zif_llm_client\n    zcl_llm_client_azureoai --&gt; zcx_llm_validation\n    zcl_llm_client_azureoai --&gt; zcx_llm_authorization\n    zcl_llm_client_azureoai --&gt; zcl_llm_http_client_wrapper\n    zcl_llm_client_azureoai --&gt; zcl_llm_common\n    zcl_llm_client_azureoai --&gt; zcl_llm_so_js_azureoai</code></pre>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_CLIENT_AZUREOAI_CLAS/#method-details","title":"Method Details","text":""},{"location":"Mistral%20Small%203/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_CLIENT_AZUREOAI_CLAS/#get_client","title":"<code>get_client</code>","text":"<p>The <code>get_client</code> method is a factory method that creates and returns a new instance of <code>zcl_llm_client_azureoai</code>. It takes <code>client_config</code> and <code>provider_config</code> as inputs and initializes the client instance. This method is crucial for obtaining a new client instance for interacting with the Azure OpenAI service.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_CLIENT_AZUREOAI_CLAS/#constructor","title":"<code>constructor</code>","text":"<p>The <code>constructor</code> method initializes a new instance of the <code>zcl_llm_client_azureoai</code> class. It calls the constructor of the base class <code>zcl_llm_client_base</code> and then performs any additional initialization required for the Azure OpenAI client.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_CLIENT_AZUREOAI_CLAS/#get_http_client","title":"<code>get_http_client</code>","text":"<p>The <code>get_http_client</code> method retrieves an HTTP client instance using the <code>zcl_llm_http_client_wrapper</code> class. It takes <code>client_config</code> and <code>provider_config</code> as inputs and returns the HTTP client instance. This method is used to handle HTTP requests to the Azure OpenAI API.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_CLIENT_AZUREOAI_CLAS/#set_auth","title":"<code>set_auth</code>","text":"<p>The <code>set_auth</code> method handles the authentication process. It decrypts the authentication value if it is encrypted and sets the appropriate header in the HTTP client. The authentication type is determined by the <code>provider_config-auth_type</code> parameter.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_CLIENT_AZUREOAI_CLAS/#create_structured_output","title":"<code>create_structured_output</code>","text":"<p>The <code>create_structured_output</code> method creates a structured output object of type <code>zcl_llm_so_js_azureoai</code>. This method is used to format the output in a structured JSON format for Azure OpenAI.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_CLIENT_AZUREOAI_CLAS/#get_chat_endpoint","title":"<code>get_chat_endpoint</code>","text":"<p>The <code>get_chat_endpoint</code> method constructs and returns the chat endpoint URL for the Azure OpenAI service. It uses the <code>client_config-provider_model</code> and the <code>api_version</code> constant to build the URL.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_SO_JS_AZUREOAI_CLAS/","title":"Class ZCL_LLM_SO_JS_AZUREOAI","text":"<p>AI Generated documentation.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_SO_JS_AZUREOAI_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_so_js_azureoai</code> class is a final class that extends the <code>zcl_llm_so_js</code> class. It is designed to implement a JSON schema for Azure OpenAI. The class redefines two protected methods, <code>pre_schema</code> and <code>post_schema</code>, to append specific JSON schema components before and after the base schema.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_SO_JS_AZUREOAI_CLAS/#public-methods","title":"Public Methods","text":"<p>The class does not define any public methods. All methods are either inherited from the base class or are protected and redefined.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_SO_JS_AZUREOAI_CLAS/#dependencies","title":"Dependencies","text":"<p>The class inherits from <code>zcl_llm_so_js</code>.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_SO_JS_AZUREOAI_CLAS/#details","title":"Details","text":"<p>The <code>zcl_llm_so_js_azureoai</code> class extends the functionality of <code>zcl_llm_so_js</code> by redefining the <code>pre_schema</code> and <code>post_schema</code> methods. These methods are used to modify the JSON schema by appending specific components.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_SO_JS_AZUREOAI_CLAS/#method-flow","title":"Method Flow","text":"<p>The following diagram illustrates the flow of the <code>pre_schema</code> and <code>post_schema</code> methods and their interaction with the base class:</p> <pre><code>graph TD\n    A[zcl_llm_so_js_azureoai] --&gt; B[zcl_llm_so_js]\n    A --&gt; C[pre_schema]\n    A --&gt; D[post_schema]\n    C --&gt; E[append_to_schema( |\"name\":\"Response\",\"strict\":true,\"schema\":\\{| )]\n    D --&gt; F[append_to_schema( |\\}| )]</code></pre>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_AZUREOAI/ZCL_LLM_SO_JS_AZUREOAI_CLAS/#method-details","title":"Method Details","text":"<ul> <li>pre_schema: This method is called before the base schema is processed. It appends the following JSON schema component to the schema:</li> </ul> <pre><code>{\n  \"name\": \"Response\",\n  \"strict\": true,\n  \"schema\": {\n</code></pre> <ul> <li>post_schema: This method is called after the base schema is processed. It appends the closing brace to the schema:</li> </ul> <pre><code>}\n</code></pre> <p>These methods ensure that the JSON schema for Azure OpenAI is correctly formatted and includes the necessary components.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OLLAMA/","title":"Package ZLLM_CLIENT_OLLAMA","text":"<p>AI Generated documentation.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OLLAMA/#overview","title":"Overview","text":"<p>The package is designed to facilitate interactions with the Ollama provider through a specialized client class, <code>ZCL_LLM_CLIENT_OLLAMA</code>. This class extends the base client functionality to manage provider-specific configurations and interactions, ensuring seamless integration and efficient communication with the Ollama service. The package likely includes methods for handling authentication, data transmission, and error management, tailored to the unique requirements of the Ollama provider.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OLLAMA/ZCL_LLM_CLIENT_OLLAMA_CLAS/","title":"Class ZCL_LLM_CLIENT_OLLAMA","text":"<p>AI Generated documentation.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OLLAMA/ZCL_LLM_CLIENT_OLLAMA_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_client_ollama</code> class is a specialized client for interacting with the Ollama provider, inheriting from the base class <code>zcl_llm_client_base</code>. It is designed to handle specific configurations and interactions required by the Ollama API. The class provides public methods for initializing the client, building HTTP requests, handling responses, and parsing messages.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OLLAMA/ZCL_LLM_CLIENT_OLLAMA_CLAS/#public-methods","title":"Public Methods","text":"<ul> <li><code>get_client</code>: This class method creates and returns an instance of <code>zcl_llm_client_ollama</code> based on the provided configuration parameters.</li> <li>Parameters:<ul> <li><code>client_config</code>: Configuration for the client.</li> <li><code>provider_config</code>: Configuration specific to the Ollama provider.</li> </ul> </li> <li>Returns: An instance of <code>zif_llm_client</code>.</li> <li> <p>Exceptions: <code>zcx_llm_validation</code>, <code>zcx_llm_authorization</code>.</p> </li> <li> <p><code>constructor</code>: Initializes an instance of <code>zcl_llm_client_ollama</code> with the given configuration parameters.</p> </li> <li>Parameters:<ul> <li><code>client_config</code>: Configuration for the client.</li> <li><code>provider_config</code>: Configuration specific to the Ollama provider.</li> </ul> </li> <li>Exceptions: <code>zcx_llm_validation</code>, <code>zcx_llm_authorization</code>.</li> </ul>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OLLAMA/ZCL_LLM_CLIENT_OLLAMA_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li>Base Class: <code>zcl_llm_client_base</code></li> <li>Interfaces: <code>zif_llm_client</code></li> <li>Exceptions: <code>zcx_llm_validation</code>, <code>zcx_llm_authorization</code></li> <li>Types: <code>zllm_clnt_config</code>, <code>zllm_providers</code></li> </ul>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OLLAMA/ZCL_LLM_CLIENT_OLLAMA_CLAS/#details","title":"Details","text":""},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OLLAMA/ZCL_LLM_CLIENT_OLLAMA_CLAS/#class-structure-and-inheritance","title":"Class Structure and Inheritance","text":"<p>The class <code>zcl_llm_client_ollama</code> extends <code>zcl_llm_client_base</code> and overrides several methods to provide Ollama-specific functionality. The class structure is as follows:</p> <pre><code>classDiagram\n    class zcl_llm_client_base {\n        +constructor(client_config, provider_config)\n        +get_http_client()\n        +set_auth()\n        +get_chat_endpoint()\n        +build_request_json(request)\n        +handle_http_response(http_response, request)\n        +parse_message(message)\n    }\n\n    class zcl_llm_client_ollama {\n        +constructor(client_config, provider_config)\n        +get_client(client_config, provider_config)\n        +get_http_client()\n        +set_auth()\n        +get_chat_endpoint()\n        +build_request_json(request)\n        +handle_http_response(http_response, request)\n        +parse_message(message)\n    }\n\n    zcl_llm_client_ollama --|&gt; zcl_llm_client_base</code></pre>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OLLAMA/ZCL_LLM_CLIENT_OLLAMA_CLAS/#method-details","title":"Method Details","text":""},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OLLAMA/ZCL_LLM_CLIENT_OLLAMA_CLAS/#get_http_client","title":"<code>get_http_client</code>","text":"<p>This method retrieves an HTTP client instance using the <code>zcl_llm_http_client_wrapper</code> class. It is a redefinition of the base class method and is specific to the Ollama provider.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OLLAMA/ZCL_LLM_CLIENT_OLLAMA_CLAS/#set_auth","title":"<code>set_auth</code>","text":"<p>This method sets the authentication headers for the HTTP client. It handles optional API keys and decryption of encrypted authentication data using the <code>zcl_llm_common</code> class.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OLLAMA/ZCL_LLM_CLIENT_OLLAMA_CLAS/#build_request_json","title":"<code>build_request_json</code>","text":"<p>This method builds the JSON request for the Ollama API. It modifies the request to include Ollama-specific parameters and handles structured output if required. The method ensures that the request is formatted correctly for the Ollama API.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OLLAMA/ZCL_LLM_CLIENT_OLLAMA_CLAS/#get_chat_endpoint","title":"<code>get_chat_endpoint</code>","text":"<p>This method returns the chat endpoint specific to the Ollama provider.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OLLAMA/ZCL_LLM_CLIENT_OLLAMA_CLAS/#handle_http_response","title":"<code>handle_http_response</code>","text":"<p>This method processes the HTTP response from the Ollama API. It handles errors, parses the response, and maps tool calls to the available tools. The method ensures that the response is correctly formatted and includes all necessary details.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OLLAMA/ZCL_LLM_CLIENT_OLLAMA_CLAS/#parse_message","title":"<code>parse_message</code>","text":"<p>This method parses a message and formats it according to the Ollama API requirements. It handles tool calls and ensures that the message is correctly structured for the API.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OLLAMA/ZCL_LLM_CLIENT_OLLAMA_CLAS/#interaction-with-external-classes-and-types","title":"Interaction with External Classes and Types","text":"<p>The class interacts with several external classes and types to handle configuration, authentication, and request/response processing. Key interactions include:</p> <ul> <li><code>zcl_llm_http_client_wrapper</code>: Used to retrieve the HTTP client instance.</li> <li><code>zcl_llm_common</code>: Used for JSON parsing and encryption/decryption.</li> <li><code>zcl_llm_client_base</code>: Base class providing common functionality.</li> <li><code>zif_llm_client</code>: Interface for the LLM client.</li> <li><code>zcx_llm_validation</code>, <code>zcx_llm_authorization</code>: Exceptions for validation and authorization errors.</li> </ul>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OLLAMA/ZCL_LLM_CLIENT_OLLAMA_CLAS/#data-types","title":"Data Types","text":"<p>The class defines several internal data types to structure the request and response data:</p> <ul> <li><code>ollama_function</code>: Represents a function with a name and arguments.</li> <li><code>ollama_tool_call</code>: Represents a tool call with an ID, type, and function.</li> <li><code>ollama_message</code>: Represents a message with a role, content, and tool calls.</li> <li><code>ollama_response</code>: Represents the response from the Ollama API, including prompt evaluation count, evaluation count, message, and done reason.</li> </ul> <p>These data types ensure that the request and response data are structured correctly for the Ollama API.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OPENAI/","title":"Package ZLLM_CLIENT_OPENAI","text":"<p>AI Generated documentation.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OPENAI/#overview","title":"Overview","text":"<p>The package is designed to facilitate interactions with the OpenAI API within an SAP environment. It includes classes that handle configuration, authentication, and management of API requests, as well as extensions to existing classes to support specific JSON schema components required for OpenAI integration. The package aims to provide a structured and efficient way to integrate OpenAI services into SAP systems, ensuring seamless communication and data exchange.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OPENAI/ZCL_LLM_CLIENT_OPENAI_CLAS/","title":"Class ZCL_LLM_CLIENT_OPENAI","text":"<p>AI Generated documentation.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OPENAI/ZCL_LLM_CLIENT_OPENAI_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_client_openai</code> class is a specialized client for interacting with the OpenAI API, inheriting from the base class <code>zcl_llm_client_base</code>. It provides functionality to configure and manage interactions with the OpenAI service, including authentication, endpoint management, and structured output creation. The class exposes public methods for instantiation and client retrieval, along with protected methods for redefining specific behaviors.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OPENAI/ZCL_LLM_CLIENT_OPENAI_CLAS/#public-methods","title":"Public Methods","text":"<ul> <li><code>get_client</code>: This class method creates and returns an instance of <code>zcl_llm_client_openai</code> based on the provided configuration parameters. It raises exceptions for validation and authorization errors.</li> </ul> <pre><code>METHOD get_client\n  IMPORTING\n    client_config   TYPE zllm_clnt_config\n    provider_config TYPE zllm_providers\n  RETURNING\n    VALUE(result)   TYPE REF TO zif_llm_client\n  RAISING\n    zcx_llm_validation\n    zcx_llm_authorization\nENDMETHOD.\n</code></pre> <ul> <li><code>constructor</code>: This method initializes an instance of <code>zcl_llm_client_openai</code> with the given configuration parameters. It calls the superclass constructor and performs additional initialization.</li> </ul> <pre><code>METHOD constructor\n  IMPORTING\n    client_config   TYPE zllm_clnt_config\n    provider_config TYPE zllm_providers\n  RAISING\n    zcx_llm_validation\n    zcx_llm_authorization\nENDMETHOD.\n</code></pre>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OPENAI/ZCL_LLM_CLIENT_OPENAI_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li><code>zcl_llm_client_base</code>: The base class from which <code>zcl_llm_client_openai</code> inherits.</li> <li><code>zif_llm_client</code>: The interface that the client implements.</li> <li><code>zcx_llm_validation</code>: Exception class for validation errors.</li> <li><code>zcx_llm_authorization</code>: Exception class for authorization errors.</li> <li><code>zcl_llm_common</code>: Utility class for common LLM operations.</li> <li><code>zcl_llm_http_client_wrapper</code>: Wrapper class for HTTP client operations.</li> <li><code>zcl_llm_so_js_oa</code>: Class for creating structured output.</li> </ul>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OPENAI/ZCL_LLM_CLIENT_OPENAI_CLAS/#details","title":"Details","text":""},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OPENAI/ZCL_LLM_CLIENT_OPENAI_CLAS/#class-diagram","title":"Class Diagram","text":"<pre><code>classDiagram\n  class zcl_llm_client_openai {\n    -client_config: zllm_clnt_config\n    -provider_config: zllm_providers\n    +constructor(client_config: zllm_clnt_config, provider_config: zllm_providers)\n    +get_client(client_config: zllm_clnt_config, provider_config: zllm_providers) : zif_llm_client\n  }\n\n  class zcl_llm_client_base {\n    &lt;&lt;abstract&gt;&gt;\n  }\n\n  class zif_llm_client {\n    &lt;&lt;interface&gt;&gt;\n  }\n\n  class zcx_llm_validation {\n    &lt;&lt;exception&gt;&gt;\n  }\n\n  class zcx_llm_authorization {\n    &lt;&lt;exception&gt;&gt;\n  }\n\n  class zcl_llm_common {\n    +get_llm_badi() : llm_badi\n  }\n\n  class zcl_llm_http_client_wrapper {\n    +get_client(client_config: zllm_clnt_config, provider_config: zllm_providers) : http_client\n  }\n\n  class zcl_llm_so_js_oa {\n  }\n\n  zcl_llm_client_openai --|&gt; zcl_llm_client_base\n  zcl_llm_client_openai ..&gt; zif_llm_client\n  zcl_llm_client_openai ..&gt; zcx_llm_validation\n  zcl_llm_client_openai ..&gt; zcx_llm_authorization\n  zcl_llm_client_openai ..&gt; zcl_llm_common\n  zcl_llm_client_openai ..&gt; zcl_llm_http_client_wrapper\n  zcl_llm_client_openai ..&gt; zcl_llm_so_js_oa</code></pre>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OPENAI/ZCL_LLM_CLIENT_OPENAI_CLAS/#method-details","title":"Method Details","text":""},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OPENAI/ZCL_LLM_CLIENT_OPENAI_CLAS/#get_client","title":"<code>get_client</code>","text":"<p>This method is responsible for creating and returning an instance of <code>zcl_llm_client_openai</code>. It takes configuration parameters for the client and provider, and raises exceptions if validation or authorization fails.</p> <pre><code>sequenceDiagram\n  participant User\n  participant zcl_llm_client_openai\n  participant zcl_llm_client_openai~constructor\n\n  User-&gt;&gt;zcl_llm_client_openai: get_client(client_config, provider_config)\n  zcl_llm_client_openai-&gt;&gt;zcl_llm_client_openai~constructor: NEW zcl_llm_client_openai(client_config, provider_config)\n  zcl_llm_client_openai~constructor--&gt;&gt;zcl_llm_client_openai: result\n  zcl_llm_client_openai--&gt;&gt;User: result</code></pre>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OPENAI/ZCL_LLM_CLIENT_OPENAI_CLAS/#constructor","title":"<code>constructor</code>","text":"<p>The constructor initializes the client with the provided configuration parameters. It calls the superclass constructor and performs additional initialization.</p> <pre><code>sequenceDiagram\n  participant User\n  participant zcl_llm_client_openai\n  participant zcl_llm_client_base~constructor\n\n  User-&gt;&gt;zcl_llm_client_openai: constructor(client_config, provider_config)\n  zcl_llm_client_openai-&gt;&gt;zcl_llm_client_base~constructor: super-&gt;constructor(client_config, provider_config)\n  zcl_llm_client_base~constructor--&gt;&gt;zcl_llm_client_openai: initialize()\n  zcl_llm_client_openai--&gt;&gt;User: initialized</code></pre>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OPENAI/ZCL_LLM_CLIENT_OPENAI_CLAS/#get_chat_endpoint","title":"<code>get_chat_endpoint</code>","text":"<p>This method returns the endpoint for chat completions, which is a fixed value.</p> <pre><code>METHOD get_chat_endpoint.\n  result = '/chat/completions'.\nENDMETHOD.\n</code></pre>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OPENAI/ZCL_LLM_CLIENT_OPENAI_CLAS/#set_auth","title":"<code>set_auth</code>","text":"<p>This method sets the authorization header for the HTTP client. It decrypts the authentication token if it is encrypted and sets the appropriate header.</p> <pre><code>sequenceDiagram\n  participant zcl_llm_client_openai\n  participant zcl_llm_common\n  participant llm_badi\n  participant enc_class\n\n  zcl_llm_client_openai-&gt;&gt;zcl_llm_common: get_llm_badi()\n  zcl_llm_common--&gt;&gt;zcl_llm_client_openai: llm_badi\n  zcl_llm_client_openai-&gt;&gt;llm_badi: get_encryption_impl()\n  llm_badi--&gt;&gt;zcl_llm_client_openai: enc_class\n  zcl_llm_client_openai-&gt;&gt;enc_class: decrypt(encrypted)\n  enc_class--&gt;&gt;zcl_llm_client_openai: auth_value\n  zcl_llm_client_openai-&gt;&gt;client: set_header(name, value)</code></pre>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OPENAI/ZCL_LLM_CLIENT_OPENAI_CLAS/#create_structured_output","title":"<code>create_structured_output</code>","text":"<p>This method creates and returns an instance of <code>zcl_llm_so_js_oa</code> for structured output.</p> <pre><code>METHOD create_structured_output.\n  result = NEW zcl_llm_so_js_oa().\nENDMETHOD.\n</code></pre>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OPENAI/ZCL_LLM_CLIENT_OPENAI_CLAS/#get_http_client","title":"<code>get_http_client</code>","text":"<p>This method retrieves an HTTP client instance using the provided configuration parameters.</p> <pre><code>METHOD get_http_client.\n  client = zcl_llm_http_client_wrapper=&gt;get_client(client_config, provider_config).\nENDMETHOD.\n</code></pre>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OPENAI/ZCL_LLM_SO_JS_OA_CLAS/","title":"Class ZCL_LLM_SO_JS_OA","text":"<p>AI Generated documentation.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OPENAI/ZCL_LLM_SO_JS_OA_CLAS/#overview","title":"Overview","text":"<p>The class <code>zcl_llm_so_js_oa</code> is a final class that inherits from <code>zcl_llm_so_js</code>. It is designed to implement a specific JSON schema for OpenAI, focusing on the <code>pre_schema</code> and <code>post_schema</code> methods. These methods are redefined to append specific JSON schema components before and after the main schema processing.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OPENAI/ZCL_LLM_SO_JS_OA_CLAS/#dependencies","title":"Dependencies","text":"<p>The class <code>zcl_llm_so_js_oa</code> inherits from <code>zcl_llm_so_js</code>. This inheritance indicates that it relies on the functionality provided by the base class, particularly the methods and properties defined there.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OPENAI/ZCL_LLM_SO_JS_OA_CLAS/#details","title":"Details","text":"<p>The class <code>zcl_llm_so_js_oa</code> extends the functionality of <code>zcl_llm_so_js</code> by redefining the <code>pre_schema</code> and <code>post_schema</code> methods. These methods are crucial for modifying the JSON schema to include specific components required for OpenAI integration.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OPENAI/ZCL_LLM_SO_JS_OA_CLAS/#method-details","title":"Method Details","text":""},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OPENAI/ZCL_LLM_SO_JS_OA_CLAS/#pre_schema","title":"<code>pre_schema</code>","text":"<p>The <code>pre_schema</code> method is redefined to append a specific JSON schema component before the main schema processing. This method calls <code>append_to_schema</code> with the following JSON fragment:</p> <pre><code>{\n  \"name\": \"Response\",\n  \"strict\": true,\n  \"schema\": {\n</code></pre> <p>This fragment sets the name of the response to \"Response\", enforces strict schema validation, and initializes the schema object.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OPENAI/ZCL_LLM_SO_JS_OA_CLAS/#post_schema","title":"<code>post_schema</code>","text":"<p>The <code>post_schema</code> method is redefined to append a closing bracket to the JSON schema after the main schema processing. This method calls <code>append_to_schema</code> with the following JSON fragment:</p> <pre><code>}\n</code></pre> <p>This fragment closes the schema object, completing the JSON schema structure.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OPENAI/ZCL_LLM_SO_JS_OA_CLAS/#interaction-flow","title":"Interaction Flow","text":"<p>The interaction flow of the class can be visualized as follows:</p> <pre><code>graph TD\n    A[zcl_llm_so_js_oa] --&gt; B[pre_schema]\n    A --&gt; C[post_schema]\n    B --&gt; D[append_to_schema]\n    C --&gt; E[append_to_schema]\n    D --&gt; F[JSON Schema Initialization]\n    E --&gt; G[JSON Schema Completion]</code></pre> <p>In this flow:</p> <ul> <li>The <code>pre_schema</code> method is called to initialize the JSON schema with specific components.</li> <li>The <code>post_schema</code> method is called to complete the JSON schema structure.</li> <li>Both methods use the <code>append_to_schema</code> method to modify the schema, ensuring that the JSON schema is correctly formatted for OpenAI integration.</li> </ul>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OPENROUTER/","title":"Package ZLLM_CLIENT_OPENROUTER","text":"<p>AI Generated documentation.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OPENROUTER/#overview","title":"Overview","text":"<p>The package provides specialized classes for interacting with external APIs and manipulating JSON structures. It includes a client class designed to handle specific configurations, authentication, and structured output creation for the OpenRouter API. Additionally, it features a class that extends the functionality of another class by redefining methods to manipulate or extend the schema of a JSON structure, likely for validation or transformation purposes. This package is tailored for scenarios requiring robust API interactions and JSON schema management.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_CLIENT_OPENROUTER_CLAS/","title":"Class ZCL_LLM_CLIENT_OPENROUTER","text":"<p>AI Generated documentation.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_CLIENT_OPENROUTER_CLAS/#overview","title":"Overview","text":"<p>The <code>zcl_llm_client_openrouter</code> class is a specialized client for interacting with the OpenRouter API, inheriting from the base class <code>zcl_llm_client_base</code>. It provides functionality to configure and manage HTTP clients, set authentication, and create structured outputs. The class is designed to handle specific configurations and interactions required for the OpenRouter service.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_CLIENT_OPENROUTER_CLAS/#public-methods","title":"Public Methods","text":"<ul> <li> <p><code>get_client</code>: This class method creates and returns an instance of <code>zcl_llm_client_openrouter</code> based on the provided client and provider configurations. It raises exceptions for validation and authorization errors.</p> </li> <li> <p><code>constructor</code>: This method initializes an instance of <code>zcl_llm_client_openrouter</code> with the given client and provider configurations. It calls the superclass constructor and performs additional initialization.</p> </li> </ul>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_CLIENT_OPENROUTER_CLAS/#dependencies","title":"Dependencies","text":"<ul> <li><code>zcl_llm_client_base</code>: The base class from which <code>zcl_llm_client_openrouter</code> inherits.</li> <li><code>zif_llm_client</code>: The interface that the client implements.</li> <li><code>zcx_llm_validation</code>: Exception class for validation errors.</li> <li><code>zcx_llm_authorization</code>: Exception class for authorization errors.</li> <li><code>zcl_llm_http_client_wrapper</code>: Utility class for obtaining an HTTP client.</li> <li><code>zcl_llm_common</code>: Utility class for obtaining encryption implementations.</li> <li><code>zcl_llm_so_js_or</code>: Class for creating structured outputs.</li> </ul>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_CLIENT_OPENROUTER_CLAS/#details","title":"Details","text":""},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_CLIENT_OPENROUTER_CLAS/#class-diagram","title":"Class Diagram","text":"<pre><code>classDiagram\n    class zcl_llm_client_openrouter {\n        -client_config: zllm_clnt_config\n        -provider_config: zllm_providers\n        +constructor(client_config: zllm_clnt_config, provider_config: zllm_providers)\n        +get_client(client_config: zllm_clnt_config, provider_config: zllm_providers) : zif_llm_client\n        +get_chat_endpoint() : string\n        +get_http_client() : zcl_llm_http_client_wrapper\n        +set_auth()\n        +create_structured_output() : zcl_llm_so_js_or\n    }\n\n    zcl_llm_client_openrouter --|&gt; zcl_llm_client_base\n    zcl_llm_client_openrouter --&gt; zif_llm_client\n    zcl_llm_client_openrouter --&gt; zcx_llm_validation\n    zcl_llm_client_openrouter --&gt; zcx_llm_authorization\n    zcl_llm_client_openrouter --&gt; zcl_llm_http_client_wrapper\n    zcl_llm_client_openrouter --&gt; zcl_llm_common\n    zcl_llm_client_openrouter --&gt; zcl_llm_so_js_or</code></pre>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_CLIENT_OPENROUTER_CLAS/#method-details","title":"Method Details","text":""},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_CLIENT_OPENROUTER_CLAS/#get_client","title":"<code>get_client</code>","text":"<p>This method creates a new instance of <code>zcl_llm_client_openrouter</code> using the provided configurations. It is a class method, meaning it can be called without creating an instance of the class.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_CLIENT_OPENROUTER_CLAS/#constructor","title":"<code>constructor</code>","text":"<p>The constructor initializes the instance by calling the superclass constructor and performing additional setup. It ensures that the client is properly configured with the given client and provider settings.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_CLIENT_OPENROUTER_CLAS/#get_chat_endpoint","title":"<code>get_chat_endpoint</code>","text":"<p>This method returns the endpoint for chat completions, which is a fixed string <code>'/chat/completions'</code>.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_CLIENT_OPENROUTER_CLAS/#get_http_client","title":"<code>get_http_client</code>","text":"<p>This method retrieves an HTTP client using the <code>zcl_llm_http_client_wrapper</code> utility class. It sets specific headers for OpenRouter statistics, including the referer and title.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_CLIENT_OPENROUTER_CLAS/#set_auth","title":"<code>set_auth</code>","text":"<p>This method handles authentication by decrypting the encrypted authentication value if provided and setting the appropriate authorization header. It uses the Business Add-In (BADI) mechanism to obtain the encryption implementation.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_CLIENT_OPENROUTER_CLAS/#create_structured_output","title":"<code>create_structured_output</code>","text":"<p>This method creates and returns an instance of <code>zcl_llm_so_js_or</code>, which is used for structured output.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_SO_JS_OR_CLAS/","title":"Class ZCL_LLM_SO_JS_OR","text":"<p>AI Generated documentation.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_SO_JS_OR_CLAS/#overview","title":"Overview","text":"<p>The class <code>zcl_llm_so_js_or</code> is a final class that inherits from <code>zcl_llm_so_js</code>. It does not define any public methods but redefines two protected methods: <code>pre_schema</code> and <code>post_schema</code>. These methods are likely used to manipulate or extend the schema of a JSON structure, as suggested by their names and the content of their implementations.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_SO_JS_OR_CLAS/#dependencies","title":"Dependencies","text":"<p>There are no explicit dependencies listed in the provided code. However, the class inherits from <code>zcl_llm_so_js</code>, indicating a dependency on that class.</p>"},{"location":"Mistral%20Small%203/ZLLM_CLIENT_OPENROUTER/ZCL_LLM_SO_JS_OR_CLAS/#details","title":"Details","text":"<p>The class <code>zcl_llm_so_js_or</code> redefines the <code>pre_schema</code> and <code>post_schema</code> methods to manipulate the schema of a JSON structure. The <code>pre_schema</code> method appends a JSON object with a \"name\" and \"strict\" property to the schema, while the <code>post_schema</code> method appends a closing brace to the schema. This suggests that the class is used to extend or modify the schema of a JSON structure in a specific way.</p> <pre><code>classDiagram\n    class zcl_llm_so_js_or {\n        -pre_schema()\n        -post_schema()\n    }\n\n    zcl_llm_so_js_or --&gt; zcl_llm_so_js : Inherits\n\n    class zcl_llm_so_js {\n        +pre_schema()\n        +post_schema()\n    }</code></pre> <p>The <code>pre_schema</code> method is called before the schema is processed, and the <code>post_schema</code> method is called after the schema is processed. This allows the class to insert or modify the schema at specific points in the processing flow. The exact details of the schema manipulation are not provided, but the use of the <code>append_to_schema</code> method suggests that the schema is being extended or modified in some way.</p>"}]}